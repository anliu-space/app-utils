{"version":3,"file":"lexon-9b54daa5.es.js","sources":["../../../node_modules/.pnpm/monaco-editor@0.38.0/node_modules/monaco-editor/esm/vs/basic-languages/lexon/lexon.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.38.0(0e330ae453813de4e6cf272460fb79c7117073d0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/lexon/lexon.ts\nvar conf = {\n  comments: {\n    lineComment: \"COMMENT\"\n  },\n  brackets: [[\"(\", \")\"]],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \":\", close: \".\" }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"`\", close: \"`\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n    { open: \":\", close: \".\" }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#region\"),\n      end: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#endregion\")\n    }\n  }\n};\nvar language = {\n  tokenPostfix: \".lexon\",\n  ignoreCase: true,\n  keywords: [\n    \"lexon\",\n    \"lex\",\n    \"clause\",\n    \"terms\",\n    \"contracts\",\n    \"may\",\n    \"pay\",\n    \"pays\",\n    \"appoints\",\n    \"into\",\n    \"to\"\n  ],\n  typeKeywords: [\"amount\", \"person\", \"key\", \"time\", \"date\", \"asset\", \"text\"],\n  operators: [\n    \"less\",\n    \"greater\",\n    \"equal\",\n    \"le\",\n    \"gt\",\n    \"or\",\n    \"and\",\n    \"add\",\n    \"added\",\n    \"subtract\",\n    \"subtracted\",\n    \"multiply\",\n    \"multiplied\",\n    \"times\",\n    \"divide\",\n    \"divided\",\n    \"is\",\n    \"be\",\n    \"certified\"\n  ],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  tokenizer: {\n    root: [\n      [/^(\\s*)(comment:?(?:\\s.*|))$/, [\"\", \"comment\"]],\n      [\n        /\"/,\n        {\n          token: \"identifier.quote\",\n          bracket: \"@open\",\n          next: \"@quoted_identifier\"\n        }\n      ],\n      [\n        \"LEX$\",\n        {\n          token: \"keyword\",\n          bracket: \"@open\",\n          next: \"@identifier_until_period\"\n        }\n      ],\n      [\"LEXON\", { token: \"keyword\", bracket: \"@open\", next: \"@semver\" }],\n      [\n        \":\",\n        {\n          token: \"delimiter\",\n          bracket: \"@open\",\n          next: \"@identifier_until_period\"\n        }\n      ],\n      [\n        /[a-z_$][\\w$]*/,\n        {\n          cases: {\n            \"@operators\": \"operator\",\n            \"@typeKeywords\": \"keyword.type\",\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      { include: \"@whitespace\" },\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [/@symbols/, \"delimiter\"],\n      [/\\d*\\.\\d*\\.\\d*/, \"number.semver\"],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\n      [/0[xX][0-9a-fA-F]+/, \"number.hex\"],\n      [/\\d+/, \"number\"],\n      [/[;,.]/, \"delimiter\"]\n    ],\n    quoted_identifier: [\n      [/[^\\\\\"]+/, \"identifier\"],\n      [/\"/, { token: \"identifier.quote\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    space_identifier_until_period: [\n      [\":\", \"delimiter\"],\n      [\" \", { token: \"white\", next: \"@identifier_rest\" }]\n    ],\n    identifier_until_period: [\n      { include: \"@whitespace\" },\n      [\":\", { token: \"delimiter\", next: \"@identifier_rest\" }],\n      [/[^\\\\.]+/, \"identifier\"],\n      [/\\./, { token: \"delimiter\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    identifier_rest: [\n      [/[^\\\\.]+/, \"identifier\"],\n      [/\\./, { token: \"delimiter\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    semver: [\n      { include: \"@whitespace\" },\n      [\":\", \"delimiter\"],\n      [/\\d*\\.\\d*\\.\\d*/, { token: \"number.semver\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"]]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","tokenPostfix","ignoreCase","keywords","typeKeywords","operators","symbols","tokenizer","root","token","bracket","next","cases","include","quoted_identifier","space_identifier_until_period","identifier_until_period","identifier_rest","semver","whitespace"],"mappings":"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","x_google_ignoreList":[0]}
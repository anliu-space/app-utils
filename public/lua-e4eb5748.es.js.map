{"version":3,"file":"lua-e4eb5748.es.js","sources":["../../../node_modules/.pnpm/monaco-editor@0.38.0/node_modules/monaco-editor/esm/vs/basic-languages/lua/lua.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.38.0(0e330ae453813de4e6cf272460fb79c7117073d0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/lua/lua.ts\nvar conf = {\n  comments: {\n    lineComment: \"--\",\n    blockComment: [\"--[[\", \"]]\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".lua\",\n  keywords: [\n    \"and\",\n    \"break\",\n    \"do\",\n    \"else\",\n    \"elseif\",\n    \"end\",\n    \"false\",\n    \"for\",\n    \"function\",\n    \"goto\",\n    \"if\",\n    \"in\",\n    \"local\",\n    \"nil\",\n    \"not\",\n    \"or\",\n    \"repeat\",\n    \"return\",\n    \"then\",\n    \"true\",\n    \"until\",\n    \"while\"\n  ],\n  brackets: [\n    { token: \"delimiter.bracket\", open: \"{\", close: \"}\" },\n    { token: \"delimiter.array\", open: \"[\", close: \"]\" },\n    { token: \"delimiter.parenthesis\", open: \"(\", close: \")\" }\n  ],\n  operators: [\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\",\n    \"%\",\n    \"^\",\n    \"#\",\n    \"==\",\n    \"~=\",\n    \"<=\",\n    \">=\",\n    \"<\",\n    \">\",\n    \"=\",\n    \";\",\n    \":\",\n    \",\",\n    \".\",\n    \"..\",\n    \"...\"\n  ],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  tokenizer: {\n    root: [\n      [\n        /[a-zA-Z_]\\w*/,\n        {\n          cases: {\n            \"@keywords\": { token: \"keyword.$0\" },\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      { include: \"@whitespace\" },\n      [/(,)(\\s*)([a-zA-Z_]\\w*)(\\s*)(:)(?!:)/, [\"delimiter\", \"\", \"key\", \"\", \"delimiter\"]],\n      [/({)(\\s*)([a-zA-Z_]\\w*)(\\s*)(:)(?!:)/, [\"@brackets\", \"\", \"key\", \"\", \"delimiter\"]],\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@operators\": \"delimiter\",\n            \"@default\": \"\"\n          }\n        }\n      ],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\n      [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, \"number.hex\"],\n      [/\\d+?/, \"number\"],\n      [/[;,.]/, \"delimiter\"],\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n      [/'([^'\\\\]|\\\\.)*$/, \"string.invalid\"],\n      [/\"/, \"string\", '@string.\"'],\n      [/'/, \"string\", \"@string.'\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"\"],\n      [/--\\[([=]*)\\[/, \"comment\", \"@comment.$1\"],\n      [/--.*$/, \"comment\"]\n    ],\n    comment: [\n      [/[^\\]]+/, \"comment\"],\n      [\n        /\\]([=]*)\\]/,\n        {\n          cases: {\n            \"$1==$S2\": { token: \"comment\", next: \"@pop\" },\n            \"@default\": \"comment\"\n          }\n        }\n      ],\n      [/./, \"comment\"]\n    ],\n    string: [\n      [/[^\\\\\"']+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [\n        /[\"']/,\n        {\n          cases: {\n            \"$#==$S2\": { token: \"string\", next: \"@pop\" },\n            \"@default\": \"string\"\n          }\n        }\n      ]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","language","defaultToken","tokenPostfix","keywords","token","operators","symbols","escapes","tokenizer","root","cases","include","whitespace","comment","next","string"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAIA,IAAI,GAAG;AACTC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAE,IAAI;AACjBC,IAAAA,YAAY,EAAE,CAAC,MAAM,EAAE,IAAI,CAAA;GAC5B;AACDC,EAAAA,QAAQ,EAAE,CACR,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,GAAG,EAAE,GAAG,CAAC,CACX;AACDC,EAAAA,gBAAgB,EAAE,CAChB;AAAEC,IAAAA,IAAI,EAAE,GAAG;AAAEC,IAAAA,KAAK,EAAE,GAAA;AAAI,GAAC,EACzB;AAAED,IAAAA,IAAI,EAAE,GAAG;AAAEC,IAAAA,KAAK,EAAE,GAAA;AAAI,GAAC,EACzB;AAAED,IAAAA,IAAI,EAAE,GAAG;AAAEC,IAAAA,KAAK,EAAE,GAAA;AAAI,GAAC,EACzB;AAAED,IAAAA,IAAI,EAAE,GAAG;AAAEC,IAAAA,KAAK,EAAE,GAAA;AAAI,GAAC,EACzB;AAAED,IAAAA,IAAI,EAAE,GAAG;AAAEC,IAAAA,KAAK,EAAE,GAAA;AAAI,GAAC,CAC1B;AACDC,EAAAA,gBAAgB,EAAE,CAChB;AAAEF,IAAAA,IAAI,EAAE,GAAG;AAAEC,IAAAA,KAAK,EAAE,GAAA;AAAI,GAAC,EACzB;AAAED,IAAAA,IAAI,EAAE,GAAG;AAAEC,IAAAA,KAAK,EAAE,GAAA;AAAI,GAAC,EACzB;AAAED,IAAAA,IAAI,EAAE,GAAG;AAAEC,IAAAA,KAAK,EAAE,GAAA;AAAI,GAAC,EACzB;AAAED,IAAAA,IAAI,EAAE,GAAG;AAAEC,IAAAA,KAAK,EAAE,GAAA;AAAI,GAAC,EACzB;AAAED,IAAAA,IAAI,EAAE,GAAG;AAAEC,IAAAA,KAAK,EAAE,GAAA;GAAK,CAAA;AAE7B,EAAC;AACD,IAAIE,QAAQ,GAAG;AACbC,EAAAA,YAAY,EAAE,EAAE;AAChBC,EAAAA,YAAY,EAAE,MAAM;EACpBC,QAAQ,EAAE,CACR,KAAK,EACL,OAAO,EACP,IAAI,EACJ,MAAM,EACN,QAAQ,EACR,KAAK,EACL,OAAO,EACP,KAAK,EACL,UAAU,EACV,MAAM,EACN,IAAI,EACJ,IAAI,EACJ,OAAO,EACP,KAAK,EACL,KAAK,EACL,IAAI,EACJ,QAAQ,EACR,QAAQ,EACR,MAAM,EACN,MAAM,EACN,OAAO,EACP,OAAO,CACR;AACDR,EAAAA,QAAQ,EAAE,CACR;AAAES,IAAAA,KAAK,EAAE,mBAAmB;AAAEP,IAAAA,IAAI,EAAE,GAAG;AAAEC,IAAAA,KAAK,EAAE,GAAA;AAAI,GAAC,EACrD;AAAEM,IAAAA,KAAK,EAAE,iBAAiB;AAAEP,IAAAA,IAAI,EAAE,GAAG;AAAEC,IAAAA,KAAK,EAAE,GAAA;AAAI,GAAC,EACnD;AAAEM,IAAAA,KAAK,EAAE,uBAAuB;AAAEP,IAAAA,IAAI,EAAE,GAAG;AAAEC,IAAAA,KAAK,EAAE,GAAA;AAAI,GAAC,CAC1D;AACDO,EAAAA,SAAS,EAAE,CACT,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,IAAI,EACJ,KAAK,CACN;AACDC,EAAAA,OAAO,EAAE,uBAAuB;AAChCC,EAAAA,OAAO,EAAE,uEAAuE;AAChFC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CACJ,CACE,cAAc,EACd;AACEC,MAAAA,KAAK,EAAE;AACL,QAAA,WAAW,EAAE;AAAEN,UAAAA,KAAK,EAAE,YAAA;SAAc;AACpC,QAAA,UAAU,EAAE,YAAA;AACd,OAAA;AACF,KAAC,CACF,EACD;AAAEO,MAAAA,OAAO,EAAE,aAAA;AAAc,KAAC,EAC1B,CAAC,qCAAqC,EAAE,CAAC,WAAW,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,WAAW,CAAC,CAAC,EAClF,CAAC,qCAAqC,EAAE,CAAC,WAAW,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,WAAW,CAAC,CAAC,EAClF,CAAC,YAAY,EAAE,WAAW,CAAC,EAC3B,CACE,UAAU,EACV;AACED,MAAAA,KAAK,EAAE;AACL,QAAA,YAAY,EAAE,WAAW;AACzB,QAAA,UAAU,EAAE,EAAA;AACd,OAAA;KACD,CACF,EACD,CAAC,0BAA0B,EAAE,cAAc,CAAC,EAC5C,CAAC,+BAA+B,EAAE,YAAY,CAAC,EAC/C,CAAC,MAAM,EAAE,QAAQ,CAAC,EAClB,CAAC,OAAO,EAAE,WAAW,CAAC,EACtB,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,EACrC,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,EACrC,CAAC,GAAG,EAAE,QAAQ,EAAE,WAAW,CAAC,EAC5B,CAAC,GAAG,EAAE,QAAQ,EAAE,WAAW,CAAC,CAC7B;IACDE,UAAU,EAAE,CACV,CAAC,YAAY,EAAE,EAAE,CAAC,EAClB,CAAC,cAAc,EAAE,SAAS,EAAE,aAAa,CAAC,EAC1C,CAAC,OAAO,EAAE,SAAS,CAAC,CACrB;IACDC,OAAO,EAAE,CACP,CAAC,QAAQ,EAAE,SAAS,CAAC,EACrB,CACE,YAAY,EACZ;AACEH,MAAAA,KAAK,EAAE;AACL,QAAA,SAAS,EAAE;AAAEN,UAAAA,KAAK,EAAE,SAAS;AAAEU,UAAAA,IAAI,EAAE,MAAA;SAAQ;AAC7C,QAAA,UAAU,EAAE,SAAA;AACd,OAAA;AACF,KAAC,CACF,EACD,CAAC,GAAG,EAAE,SAAS,CAAC,CACjB;IACDC,MAAM,EAAE,CACN,CAAC,UAAU,EAAE,QAAQ,CAAC,EACtB,CAAC,UAAU,EAAE,eAAe,CAAC,EAC7B,CAAC,KAAK,EAAE,uBAAuB,CAAC,EAChC,CACE,MAAM,EACN;AACEL,MAAAA,KAAK,EAAE;AACL,QAAA,SAAS,EAAE;AAAEN,UAAAA,KAAK,EAAE,QAAQ;AAAEU,UAAAA,IAAI,EAAE,MAAA;SAAQ;AAC5C,QAAA,UAAU,EAAE,QAAA;AACd,OAAA;AACF,KAAC,CACF,CAAA;AAEL,GAAA;AACF;;;;","x_google_ignoreList":[0]}
{"version":3,"file":"bicep-0b4fd945.es.js","sources":["../../../node_modules/.pnpm/monaco-editor@0.38.0/node_modules/monaco-editor/esm/vs/basic-languages/bicep/bicep.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.38.0(0e330ae453813de4e6cf272460fb79c7117073d0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/bicep/bicep.ts\nvar bounded = (text) => `\\\\b${text}\\\\b`;\nvar identifierStart = \"[_a-zA-Z]\";\nvar identifierContinue = \"[_a-zA-Z0-9]\";\nvar identifier = bounded(`${identifierStart}${identifierContinue}*`);\nvar keywords = [\n  \"targetScope\",\n  \"resource\",\n  \"module\",\n  \"param\",\n  \"var\",\n  \"output\",\n  \"for\",\n  \"in\",\n  \"if\",\n  \"existing\"\n];\nvar namedLiterals = [\"true\", \"false\", \"null\"];\nvar nonCommentWs = `[ \\\\t\\\\r\\\\n]`;\nvar numericLiteral = `[0-9]+`;\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\" },\n    { open: \"'''\", close: \"'''\" }\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\n    { open: \"'''\", close: \"'''\", notIn: [\"string\", \"comment\"] }\n  ],\n  autoCloseBefore: \":.,=}])' \\n\t\",\n  indentationRules: {\n    increaseIndentPattern: new RegExp(\"^((?!\\\\/\\\\/).)*(\\\\{[^}\\\"'`]*|\\\\([^)\\\"'`]*|\\\\[[^\\\\]\\\"'`]*)$\"),\n    decreaseIndentPattern: new RegExp(\"^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\")\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".bicep\",\n  brackets: [\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" }\n  ],\n  symbols: /[=><!~?:&|+\\-*/^%]+/,\n  keywords,\n  namedLiterals,\n  escapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\\\${)`,\n  tokenizer: {\n    root: [{ include: \"@expression\" }, { include: \"@whitespace\" }],\n    stringVerbatim: [\n      { regex: `(|'|'')[^']`, action: { token: \"string\" } },\n      { regex: `'''`, action: { token: \"string.quote\", next: \"@pop\" } }\n    ],\n    stringLiteral: [\n      { regex: `\\\\\\${`, action: { token: \"delimiter.bracket\", next: \"@bracketCounting\" } },\n      { regex: `[^\\\\\\\\'$]+`, action: { token: \"string\" } },\n      { regex: \"@escapes\", action: { token: \"string.escape\" } },\n      { regex: `\\\\\\\\.`, action: { token: \"string.escape.invalid\" } },\n      { regex: `'`, action: { token: \"string\", next: \"@pop\" } }\n    ],\n    bracketCounting: [\n      { regex: `{`, action: { token: \"delimiter.bracket\", next: \"@bracketCounting\" } },\n      { regex: `}`, action: { token: \"delimiter.bracket\", next: \"@pop\" } },\n      { include: \"expression\" }\n    ],\n    comment: [\n      { regex: `[^\\\\*]+`, action: { token: \"comment\" } },\n      { regex: `\\\\*\\\\/`, action: { token: \"comment\", next: \"@pop\" } },\n      { regex: `[\\\\/*]`, action: { token: \"comment\" } }\n    ],\n    whitespace: [\n      { regex: nonCommentWs },\n      { regex: `\\\\/\\\\*`, action: { token: \"comment\", next: \"@comment\" } },\n      { regex: `\\\\/\\\\/.*$`, action: { token: \"comment\" } }\n    ],\n    expression: [\n      { regex: `'''`, action: { token: \"string.quote\", next: \"@stringVerbatim\" } },\n      { regex: `'`, action: { token: \"string.quote\", next: \"@stringLiteral\" } },\n      { regex: numericLiteral, action: { token: \"number\" } },\n      {\n        regex: identifier,\n        action: {\n          cases: {\n            \"@keywords\": { token: \"keyword\" },\n            \"@namedLiterals\": { token: \"keyword\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      }\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["bounded","text","concat","identifierStart","identifierContinue","identifier","keywords","namedLiterals","nonCommentWs","numericLiteral","conf","comments","lineComment","blockComment","brackets","surroundingPairs","open","close","autoClosingPairs","notIn","autoCloseBefore","indentationRules","increaseIndentPattern","RegExp","decreaseIndentPattern","language","defaultToken","tokenPostfix","token","symbols","escapes","tokenizer","root","include","stringVerbatim","regex","action","next","stringLiteral","bracketCounting","comment","whitespace","expression","cases"],"mappings":"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","x_google_ignoreList":[0]}
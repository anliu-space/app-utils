
/**
 * dkal-app-utils v1.0.1
 * (c) 1990-2023 anliu-space
 * Released under the MIT License.
 */

(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { _ as _createClass, a as _createForOfIteratorHelper, b as _inherits, c as _createSuper, d as _classCallCheck, e as _get, f as _getPrototypeOf, g as _slicedToArray, h as _toConsumableArray, i as _typeof, j as _assertThisInitialized, k as _defineProperty } from './dayjs-19c6a114.es.js';

/**
The data structure for documents. @nonabstract
*/
var Text = /*#__PURE__*/function () {
  /**
  @internal
  */
  function Text() {
    _classCallCheck(this, Text);
  }
  /**
  Create a `Text` instance for the given array of lines.
  */
  _createClass(Text, [{
    key: "lineAt",
    value:
    /**
    Get the line description around the given position.
    */
    function lineAt(pos) {
      if (pos < 0 || pos > this.length) throw new RangeError("Invalid position ".concat(pos, " in document of length ").concat(this.length));
      return this.lineInner(pos, false, 1, 0);
    }
    /**
    Get the description for the given (1-based) line number.
    */
  }, {
    key: "line",
    value: function line(n) {
      if (n < 1 || n > this.lines) throw new RangeError("Invalid line number ".concat(n, " in ").concat(this.lines, "-line document"));
      return this.lineInner(n, true, 1, 0);
    }
    /**
    Replace a range of the text with the given content.
    */
  }, {
    key: "replace",
    value: function replace(from, to, text) {
      var parts = [];
      this.decompose(0, from, parts, 2 /* Open.To */);
      if (text.length) text.decompose(0, text.length, parts, 1 /* Open.From */ | 2 /* Open.To */);
      this.decompose(to, this.length, parts, 1 /* Open.From */);
      return TextNode.from(parts, this.length - (to - from) + text.length);
    }
    /**
    Append another document to this one.
    */
  }, {
    key: "append",
    value: function append(other) {
      return this.replace(this.length, this.length, other);
    }
    /**
    Retrieve the text between the given points.
    */
  }, {
    key: "slice",
    value: function slice(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;
      var parts = [];
      this.decompose(from, to, parts, 0);
      return TextNode.from(parts, to - from);
    }
    /**
    Test whether this text is equal to another instance.
    */
  }, {
    key: "eq",
    value: function eq(other) {
      if (other == this) return true;
      if (other.length != this.length || other.lines != this.lines) return false;
      var start = this.scanIdentical(other, 1),
        end = this.length - this.scanIdentical(other, -1);
      var a = new RawTextCursor(this),
        b = new RawTextCursor(other);
      for (var skip = start, pos = start;;) {
        a.next(skip);
        b.next(skip);
        skip = 0;
        if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value) return false;
        pos += a.value.length;
        if (a.done || pos >= end) return true;
      }
    }
    /**
    Iterate over the text. When `dir` is `-1`, iteration happens
    from end to start. This will return lines and the breaks between
    them as separate strings.
    */
  }, {
    key: "iter",
    value: function iter() {
      var dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      return new RawTextCursor(this, dir);
    }
    /**
    Iterate over a range of the text. When `from` > `to`, the
    iterator will run in reverse.
    */
  }, {
    key: "iterRange",
    value: function iterRange(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;
      return new PartialTextCursor(this, from, to);
    }
    /**
    Return a cursor that iterates over the given range of lines,
    _without_ returning the line breaks between, and yielding empty
    strings for empty lines.
    
    When `from` and `to` are given, they should be 1-based line numbers.
    */
  }, {
    key: "iterLines",
    value: function iterLines(from, to) {
      var inner;
      if (from == null) {
        inner = this.iter();
      } else {
        if (to == null) to = this.lines + 1;
        var start = this.line(from).from;
        inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
      }
      return new LineCursor(inner);
    }
    /**
    Return the document as a string, using newline characters to
    separate lines.
    */
  }, {
    key: "toString",
    value: function toString() {
      return this.sliceString(0);
    }
    /**
    Convert the document to an array of lines (which can be
    deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
    */
  }, {
    key: "toJSON",
    value: function toJSON() {
      var lines = [];
      this.flatten(lines);
      return lines;
    }
  }], [{
    key: "of",
    value: function of(text) {
      if (text.length == 0) throw new RangeError("A document must have at least one line");
      if (text.length == 1 && !text[0]) return Text.empty;
      return text.length <= 32 /* Tree.Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
    }
  }]);
  return Text;
}(); // Leaves store an array of line strings. There are always line breaks
// between these strings. Leaves are limited in size and have to be
// contained in TextNode instances for bigger documents.
var TextLeaf = /*#__PURE__*/function (_Text) {
  _inherits(TextLeaf, _Text);
  var _super = _createSuper(TextLeaf);
  function TextLeaf(text) {
    var _this;
    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : textLength(text);
    _classCallCheck(this, TextLeaf);
    _this = _super.call(this);
    _this.text = text;
    _this.length = length;
    return _this;
  }
  _createClass(TextLeaf, [{
    key: "lines",
    get: function get() {
      return this.text.length;
    }
  }, {
    key: "children",
    get: function get() {
      return null;
    }
  }, {
    key: "lineInner",
    value: function lineInner(target, isLine, line, offset) {
      for (var i = 0;; i++) {
        var string = this.text[i],
          end = offset + string.length;
        if ((isLine ? line : end) >= target) return new Line(offset, end, line, string);
        offset = end + 1;
        line++;
      }
    }
  }, {
    key: "decompose",
    value: function decompose(from, to, target, open) {
      var text = from <= 0 && to >= this.length ? this : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
      if (open & 1 /* Open.From */) {
        var prev = target.pop();
        var joined = appendText(text.text, prev.text.slice(), 0, text.length);
        if (joined.length <= 32 /* Tree.Branch */) {
          target.push(new TextLeaf(joined, prev.length + text.length));
        } else {
          var mid = joined.length >> 1;
          target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
        }
      } else {
        target.push(text);
      }
    }
  }, {
    key: "replace",
    value: function replace(from, to, text) {
      if (!(text instanceof TextLeaf)) return _get(_getPrototypeOf(TextLeaf.prototype), "replace", this).call(this, from, to, text);
      var lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
      var newLen = this.length + text.length - (to - from);
      if (lines.length <= 32 /* Tree.Branch */) return new TextLeaf(lines, newLen);
      return TextNode.from(TextLeaf.split(lines, []), newLen);
    }
  }, {
    key: "sliceString",
    value: function sliceString(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;
      var lineSep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "\n";
      var result = "";
      for (var pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
        var line = this.text[i],
          end = pos + line.length;
        if (pos > from && i) result += lineSep;
        if (from < end && to > pos) result += line.slice(Math.max(0, from - pos), to - pos);
        pos = end + 1;
      }
      return result;
    }
  }, {
    key: "flatten",
    value: function flatten(target) {
      var _iterator = _createForOfIteratorHelper(this.text),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var line = _step.value;
          target.push(line);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "scanIdentical",
    value: function scanIdentical() {
      return 0;
    }
  }], [{
    key: "split",
    value: function split(text, target) {
      var part = [],
        len = -1;
      var _iterator2 = _createForOfIteratorHelper(text),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var line = _step2.value;
          part.push(line);
          len += line.length + 1;
          if (part.length == 32 /* Tree.Branch */) {
            target.push(new TextLeaf(part, len));
            part = [];
            len = -1;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      if (len > -1) target.push(new TextLeaf(part, len));
      return target;
    }
  }]);
  return TextLeaf;
}(Text); // Nodes provide the tree structure of the `Text` type. They store a
// number of other nodes or leaves, taking care to balance themselves
// on changes. There are implied line breaks _between_ the children of
// a node (but not before the first or after the last child).
var TextNode = /*#__PURE__*/function (_Text2) {
  _inherits(TextNode, _Text2);
  var _super2 = _createSuper(TextNode);
  function TextNode(children, length) {
    var _this2;
    _classCallCheck(this, TextNode);
    _this2 = _super2.call(this);
    _this2.children = children;
    _this2.length = length;
    _this2.lines = 0;
    var _iterator3 = _createForOfIteratorHelper(children),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var child = _step3.value;
        _this2.lines += child.lines;
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
    return _this2;
  }
  _createClass(TextNode, [{
    key: "lineInner",
    value: function lineInner(target, isLine, line, offset) {
      for (var i = 0;; i++) {
        var child = this.children[i],
          end = offset + child.length,
          endLine = line + child.lines - 1;
        if ((isLine ? endLine : end) >= target) return child.lineInner(target, isLine, line, offset);
        offset = end + 1;
        line = endLine + 1;
      }
    }
  }, {
    key: "decompose",
    value: function decompose(from, to, target, open) {
      for (var i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
        var child = this.children[i],
          end = pos + child.length;
        if (from <= end && to >= pos) {
          var childOpen = open & ((pos <= from ? 1 /* Open.From */ : 0) | (end >= to ? 2 /* Open.To */ : 0));
          if (pos >= from && end <= to && !childOpen) target.push(child);else child.decompose(from - pos, to - pos, target, childOpen);
        }
        pos = end + 1;
      }
    }
  }, {
    key: "replace",
    value: function replace(from, to, text) {
      if (text.lines < this.lines) for (var i = 0, pos = 0; i < this.children.length; i++) {
        var child = this.children[i],
          end = pos + child.length;
        // Fast path: if the change only affects one child and the
        // child's size remains in the acceptable range, only update
        // that child
        if (from >= pos && to <= end) {
          var updated = child.replace(from - pos, to - pos, text);
          var totalLines = this.lines - child.lines + updated.lines;
          if (updated.lines < totalLines >> 5 /* Tree.BranchShift */ - 1 && updated.lines > totalLines >> 5 /* Tree.BranchShift */ + 1) {
            var copy = this.children.slice();
            copy[i] = updated;
            return new TextNode(copy, this.length - (to - from) + text.length);
          }
          return _get(_getPrototypeOf(TextNode.prototype), "replace", this).call(this, pos, end, updated);
        }
        pos = end + 1;
      }
      return _get(_getPrototypeOf(TextNode.prototype), "replace", this).call(this, from, to, text);
    }
  }, {
    key: "sliceString",
    value: function sliceString(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;
      var lineSep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "\n";
      var result = "";
      for (var i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
        var child = this.children[i],
          end = pos + child.length;
        if (pos > from && i) result += lineSep;
        if (from < end && to > pos) result += child.sliceString(from - pos, to - pos, lineSep);
        pos = end + 1;
      }
      return result;
    }
  }, {
    key: "flatten",
    value: function flatten(target) {
      var _iterator4 = _createForOfIteratorHelper(this.children),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var child = _step4.value;
          child.flatten(target);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
  }, {
    key: "scanIdentical",
    value: function scanIdentical(other, dir) {
      if (!(other instanceof TextNode)) return 0;
      var length = 0;
      var _ref = dir > 0 ? [0, 0, this.children.length, other.children.length] : [this.children.length - 1, other.children.length - 1, -1, -1],
        _ref2 = _slicedToArray(_ref, 4),
        iA = _ref2[0],
        iB = _ref2[1],
        eA = _ref2[2],
        eB = _ref2[3];
      for (;; iA += dir, iB += dir) {
        if (iA == eA || iB == eB) return length;
        var chA = this.children[iA],
          chB = other.children[iB];
        if (chA != chB) return length + chA.scanIdentical(chB, dir);
        length += chA.length + 1;
      }
    }
  }], [{
    key: "from",
    value: function from(children) {
      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : children.reduce(function (l, ch) {
        return l + ch.length + 1;
      }, -1);
      var lines = 0;
      var _iterator5 = _createForOfIteratorHelper(children),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _ch = _step5.value;
          lines += _ch.lines;
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      if (lines < 32 /* Tree.Branch */) {
        var flat = [];
        var _iterator6 = _createForOfIteratorHelper(children),
          _step6;
        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var ch = _step6.value;
            ch.flatten(flat);
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
        return new TextLeaf(flat, length);
      }
      var chunk = Math.max(32 /* Tree.Branch */, lines >> 5 /* Tree.BranchShift */),
        maxChunk = chunk << 1,
        minChunk = chunk >> 1;
      var chunked = [],
        currentLines = 0,
        currentLen = -1,
        currentChunk = [];
      function add(child) {
        var last;
        if (child.lines > maxChunk && child instanceof TextNode) {
          var _iterator7 = _createForOfIteratorHelper(child.children),
            _step7;
          try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              var node = _step7.value;
              add(node);
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }
        } else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
          flush();
          chunked.push(child);
        } else if (child instanceof TextLeaf && currentLines && (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf && child.lines + last.lines <= 32 /* Tree.Branch */) {
          currentLines += child.lines;
          currentLen += child.length + 1;
          currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
        } else {
          if (currentLines + child.lines > chunk) flush();
          currentLines += child.lines;
          currentLen += child.length + 1;
          currentChunk.push(child);
        }
      }
      function flush() {
        if (currentLines == 0) return;
        chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
        currentLen = -1;
        currentLines = currentChunk.length = 0;
      }
      var _iterator8 = _createForOfIteratorHelper(children),
        _step8;
      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var child = _step8.value;
          add(child);
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
      flush();
      return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
    }
  }]);
  return TextNode;
}(Text);
Text.empty = /*@__PURE__*/new TextLeaf([""], 0);
function textLength(text) {
  var length = -1;
  var _iterator9 = _createForOfIteratorHelper(text),
    _step9;
  try {
    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
      var line = _step9.value;
      length += line.length + 1;
    }
  } catch (err) {
    _iterator9.e(err);
  } finally {
    _iterator9.f();
  }
  return length;
}
function appendText(text, target) {
  var from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var to = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1e9;
  for (var pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
    var line = text[i],
      end = pos + line.length;
    if (end >= from) {
      if (end > to) line = line.slice(0, to - pos);
      if (pos < from) line = line.slice(from - pos);
      if (first) {
        target[target.length - 1] += line;
        first = false;
      } else target.push(line);
    }
    pos = end + 1;
  }
  return target;
}
function sliceText(text, from, to) {
  return appendText(text, [""], from, to);
}
var RawTextCursor = /*#__PURE__*/function () {
  function RawTextCursor(text) {
    var dir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    _classCallCheck(this, RawTextCursor);
    this.dir = dir;
    this.done = false;
    this.lineBreak = false;
    this.value = "";
    this.nodes = [text];
    this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
  }
  _createClass(RawTextCursor, [{
    key: "nextInner",
    value: function nextInner(skip, dir) {
      this.done = this.lineBreak = false;
      for (;;) {
        var last = this.nodes.length - 1;
        var top = this.nodes[last],
          offsetValue = this.offsets[last],
          offset = offsetValue >> 1;
        var size = top instanceof TextLeaf ? top.text.length : top.children.length;
        if (offset == (dir > 0 ? size : 0)) {
          if (last == 0) {
            this.done = true;
            this.value = "";
            return this;
          }
          if (dir > 0) this.offsets[last - 1]++;
          this.nodes.pop();
          this.offsets.pop();
        } else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
          this.offsets[last] += dir;
          if (skip == 0) {
            this.lineBreak = true;
            this.value = "\n";
            return this;
          }
          skip--;
        } else if (top instanceof TextLeaf) {
          // Move to the next string
          var next = top.text[offset + (dir < 0 ? -1 : 0)];
          this.offsets[last] += dir;
          if (next.length > Math.max(0, skip)) {
            this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
            return this;
          }
          skip -= next.length;
        } else {
          var _next = top.children[offset + (dir < 0 ? -1 : 0)];
          if (skip > _next.length) {
            skip -= _next.length;
            this.offsets[last] += dir;
          } else {
            if (dir < 0) this.offsets[last]--;
            this.nodes.push(_next);
            this.offsets.push(dir > 0 ? 1 : (_next instanceof TextLeaf ? _next.text.length : _next.children.length) << 1);
          }
        }
      }
    }
  }, {
    key: "next",
    value: function next() {
      var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      if (skip < 0) {
        this.nextInner(-skip, -this.dir);
        skip = this.value.length;
      }
      return this.nextInner(skip, this.dir);
    }
  }]);
  return RawTextCursor;
}();
var PartialTextCursor = /*#__PURE__*/function () {
  function PartialTextCursor(text, start, end) {
    _classCallCheck(this, PartialTextCursor);
    this.value = "";
    this.done = false;
    this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
    this.pos = start > end ? text.length : 0;
    this.from = Math.min(start, end);
    this.to = Math.max(start, end);
  }
  _createClass(PartialTextCursor, [{
    key: "nextInner",
    value: function nextInner(skip, dir) {
      if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
        this.value = "";
        this.done = true;
        return this;
      }
      skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
      var limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
      if (skip > limit) skip = limit;
      limit -= skip;
      var _this$cursor$next = this.cursor.next(skip),
        value = _this$cursor$next.value;
      this.pos += (value.length + skip) * dir;
      this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
      this.done = !this.value;
      return this;
    }
  }, {
    key: "next",
    value: function next() {
      var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      if (skip < 0) skip = Math.max(skip, this.from - this.pos);else if (skip > 0) skip = Math.min(skip, this.to - this.pos);
      return this.nextInner(skip, this.cursor.dir);
    }
  }, {
    key: "lineBreak",
    get: function get() {
      return this.cursor.lineBreak && this.value != "";
    }
  }]);
  return PartialTextCursor;
}();
var LineCursor = /*#__PURE__*/function () {
  function LineCursor(inner) {
    _classCallCheck(this, LineCursor);
    this.inner = inner;
    this.afterBreak = true;
    this.value = "";
    this.done = false;
  }
  _createClass(LineCursor, [{
    key: "next",
    value: function next() {
      var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var _this$inner$next = this.inner.next(skip),
        done = _this$inner$next.done,
        lineBreak = _this$inner$next.lineBreak,
        value = _this$inner$next.value;
      if (done) {
        this.done = true;
        this.value = "";
      } else if (lineBreak) {
        if (this.afterBreak) {
          this.value = "";
        } else {
          this.afterBreak = true;
          this.next();
        }
      } else {
        this.value = value;
        this.afterBreak = false;
      }
      return this;
    }
  }, {
    key: "lineBreak",
    get: function get() {
      return false;
    }
  }]);
  return LineCursor;
}();
if (typeof Symbol != "undefined") {
  Text.prototype[Symbol.iterator] = function () {
    return this.iter();
  };
  RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] = LineCursor.prototype[Symbol.iterator] = function () {
    return this;
  };
}
/**
This type describes a line in the document. It is created
on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).
*/
var Line = /*#__PURE__*/function () {
  /**
  @internal
  */
  function Line(
  /**
  The position of the start of the line.
  */
  from,
  /**
  The position at the end of the line (_before_ the line break,
  or at the end of document for the last line).
  */
  to,
  /**
  This line's line number (1-based).
  */
  number,
  /**
  The line's content.
  */
  text) {
    _classCallCheck(this, Line);
    this.from = from;
    this.to = to;
    this.number = number;
    this.text = text;
  }
  /**
  The length of the line (not including any line break after it).
  */
  _createClass(Line, [{
    key: "length",
    get: function get() {
      return this.to - this.from;
    }
  }]);
  return Line;
}(); // Compressed representation of the Grapheme_Cluster_Break=Extend
// information from
// http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
// Each pair of elements represents a range, as an offet from the
// previous range and a length. Numbers are in base-36, with the empty
// string being a shorthand for 1.
var extend = /*@__PURE__*/"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(function (s) {
  return s ? parseInt(s, 36) : 1;
});
// Convert offsets into absolute values
for (var i$1 = 1; i$1 < extend.length; i$1++) extend[i$1] += extend[i$1 - 1];
function isExtendingChar(code) {
  for (var _i = 1; _i < extend.length; _i += 2) if (extend[_i] > code) return extend[_i - 1] <= code;
  return false;
}
function isRegionalIndicator(code) {
  return code >= 0x1F1E6 && code <= 0x1F1FF;
}
var ZWJ = 0x200d;
/**
Returns a next grapheme cluster break _after_ (not equal to)
`pos`, if `forward` is true, or before otherwise. Returns `pos`
itself if no further cluster break is available in the string.
Moves across surrogate pairs, extending characters (when
`includeExtending` is true), characters joined with zero-width
joiners, and flag emoji.
*/
function findClusterBreak(str, pos) {
  var forward = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var includeExtending = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
}
function nextClusterBreak(str, pos, includeExtending) {
  if (pos == str.length) return pos;
  // If pos is in the middle of a surrogate pair, move to its start
  if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1))) pos--;
  var prev = codePointAt(str, pos);
  pos += codePointSize(prev);
  while (pos < str.length) {
    var next = codePointAt(str, pos);
    if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
      pos += codePointSize(next);
      prev = next;
    } else if (isRegionalIndicator(next)) {
      var countBefore = 0,
        _i2 = pos - 2;
      while (_i2 >= 0 && isRegionalIndicator(codePointAt(str, _i2))) {
        countBefore++;
        _i2 -= 2;
      }
      if (countBefore % 2 == 0) break;else pos += 2;
    } else {
      break;
    }
  }
  return pos;
}
function prevClusterBreak(str, pos, includeExtending) {
  while (pos > 0) {
    var found = nextClusterBreak(str, pos - 2, includeExtending);
    if (found < pos) return found;
    pos--;
  }
  return 0;
}
function surrogateLow(ch) {
  return ch >= 0xDC00 && ch < 0xE000;
}
function surrogateHigh(ch) {
  return ch >= 0xD800 && ch < 0xDC00;
}
/**
Find the code point at the given position in a string (like the
[`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
string method).
*/
function codePointAt(str, pos) {
  var code0 = str.charCodeAt(pos);
  if (!surrogateHigh(code0) || pos + 1 == str.length) return code0;
  var code1 = str.charCodeAt(pos + 1);
  if (!surrogateLow(code1)) return code0;
  return (code0 - 0xd800 << 10) + (code1 - 0xdc00) + 0x10000;
}
/**
Given a Unicode codepoint, return the JavaScript string that
respresents it (like
[`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).
*/
function fromCodePoint(code) {
  if (code <= 0xffff) return String.fromCharCode(code);
  code -= 0x10000;
  return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);
}
/**
The amount of positions a character takes up a JavaScript string.
*/
function codePointSize(code) {
  return code < 0x10000 ? 1 : 2;
}
var DefaultSplit = /\r\n?|\n/;
/**
Distinguishes different ways in which positions can be mapped.
*/
var MapMode = /*@__PURE__*/function (MapMode) {
  /**
  Map a position to a valid new position, even when its context
  was deleted.
  */
  MapMode[MapMode["Simple"] = 0] = "Simple";
  /**
  Return null if deletion happens across the position.
  */
  MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
  /**
  Return null if the character _before_ the position is deleted.
  */
  MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
  /**
  Return null if the character _after_ the position is deleted.
  */
  MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
  return MapMode;
}(MapMode || (MapMode = {}));
/**
A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
that doesn't store the inserted text. As such, it can't be
applied, but is cheaper to store and manipulate.
*/
var ChangeDesc = /*#__PURE__*/function () {
  // Sections are encoded as pairs of integers. The first is the
  // length in the current document, and the second is -1 for
  // unaffected sections, and the length of the replacement content
  // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
  // 0), and a replacement two positive numbers.
  /**
  @internal
  */
  function ChangeDesc(
  /**
  @internal
  */
  sections) {
    _classCallCheck(this, ChangeDesc);
    this.sections = sections;
  }
  /**
  The length of the document before the change.
  */
  _createClass(ChangeDesc, [{
    key: "length",
    get: function get() {
      var result = 0;
      for (var _i3 = 0; _i3 < this.sections.length; _i3 += 2) result += this.sections[_i3];
      return result;
    }
    /**
    The length of the document after the change.
    */
  }, {
    key: "newLength",
    get: function get() {
      var result = 0;
      for (var _i4 = 0; _i4 < this.sections.length; _i4 += 2) {
        var ins = this.sections[_i4 + 1];
        result += ins < 0 ? this.sections[_i4] : ins;
      }
      return result;
    }
    /**
    False when there are actual changes in this set.
    */
  }, {
    key: "empty",
    get: function get() {
      return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
    }
    /**
    Iterate over the unchanged parts left by these changes. `posA`
    provides the position of the range in the old document, `posB`
    the new position in the changed document.
    */
  }, {
    key: "iterGaps",
    value: function iterGaps(f) {
      for (var _i5 = 0, posA = 0, posB = 0; _i5 < this.sections.length;) {
        var len = this.sections[_i5++],
          ins = this.sections[_i5++];
        if (ins < 0) {
          f(posA, posB, len);
          posB += len;
        } else {
          posB += ins;
        }
        posA += len;
      }
    }
    /**
    Iterate over the ranges changed by these changes. (See
    [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
    variant that also provides you with the inserted text.)
    `fromA`/`toA` provides the extent of the change in the starting
    document, `fromB`/`toB` the extent of the replacement in the
    changed document.
    
    When `individual` is true, adjacent changes (which are kept
    separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
    reported separately.
    */
  }, {
    key: "iterChangedRanges",
    value: function iterChangedRanges(f) {
      var individual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      _iterChanges(this, f, individual);
    }
    /**
    Get a description of the inverted form of these changes.
    */
  }, {
    key: "invertedDesc",
    get: function get() {
      var sections = [];
      for (var _i6 = 0; _i6 < this.sections.length;) {
        var len = this.sections[_i6++],
          ins = this.sections[_i6++];
        if (ins < 0) sections.push(len, ins);else sections.push(ins, len);
      }
      return new ChangeDesc(sections);
    }
    /**
    Compute the combined effect of applying another set of changes
    after this one. The length of the document after this set should
    match the length before `other`.
    */
  }, {
    key: "composeDesc",
    value: function composeDesc(other) {
      return this.empty ? other : other.empty ? this : composeSets(this, other);
    }
    /**
    Map this description, which should start with the same document
    as `other`, over another set of changes, so that it can be
    applied after it. When `before` is true, map as if the changes
    in `other` happened before the ones in `this`.
    */
  }, {
    key: "mapDesc",
    value: function mapDesc(other) {
      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return other.empty ? this : mapSet(this, other, before);
    }
  }, {
    key: "mapPos",
    value: function mapPos(pos) {
      var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
      var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : MapMode.Simple;
      var posA = 0,
        posB = 0;
      for (var _i7 = 0; _i7 < this.sections.length;) {
        var len = this.sections[_i7++],
          ins = this.sections[_i7++],
          endA = posA + len;
        if (ins < 0) {
          if (endA > pos) return posB + (pos - posA);
          posB += len;
        } else {
          if (mode != MapMode.Simple && endA >= pos && (mode == MapMode.TrackDel && posA < pos && endA > pos || mode == MapMode.TrackBefore && posA < pos || mode == MapMode.TrackAfter && endA > pos)) return null;
          if (endA > pos || endA == pos && assoc < 0 && !len) return pos == posA || assoc < 0 ? posB : posB + ins;
          posB += ins;
        }
        posA = endA;
      }
      if (pos > posA) throw new RangeError("Position ".concat(pos, " is out of range for changeset of length ").concat(posA));
      return posB;
    }
    /**
    Check whether these changes touch a given range. When one of the
    changes entirely covers the range, the string `"cover"` is
    returned.
    */
  }, {
    key: "touchesRange",
    value: function touchesRange(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
      for (var _i8 = 0, pos = 0; _i8 < this.sections.length && pos <= to;) {
        var len = this.sections[_i8++],
          ins = this.sections[_i8++],
          end = pos + len;
        if (ins >= 0 && pos <= to && end >= from) return pos < from && end > to ? "cover" : true;
        pos = end;
      }
      return false;
    }
    /**
    @internal
    */
  }, {
    key: "toString",
    value: function toString() {
      var result = "";
      for (var _i9 = 0; _i9 < this.sections.length;) {
        var len = this.sections[_i9++],
          ins = this.sections[_i9++];
        result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
      }
      return result;
    }
    /**
    Serialize this change desc to a JSON-representable value.
    */
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.sections;
    }
    /**
    Create a change desc from its JSON representation (as produced
    by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
    */
  }], [{
    key: "fromJSON",
    value: function fromJSON(json) {
      if (!Array.isArray(json) || json.length % 2 || json.some(function (a) {
        return typeof a != "number";
      })) throw new RangeError("Invalid JSON representation of ChangeDesc");
      return new ChangeDesc(json);
    }
    /**
    @internal
    */
  }, {
    key: "create",
    value: function create(sections) {
      return new ChangeDesc(sections);
    }
  }]);
  return ChangeDesc;
}();
/**
A change set represents a group of modifications to a document. It
stores the document length, and can only be applied to documents
with exactly that length.
*/
var ChangeSet = /*#__PURE__*/function (_ChangeDesc) {
  _inherits(ChangeSet, _ChangeDesc);
  var _super3 = _createSuper(ChangeSet);
  function ChangeSet(sections,
  /**
  @internal
  */
  inserted) {
    var _this3;
    _classCallCheck(this, ChangeSet);
    _this3 = _super3.call(this, sections);
    _this3.inserted = inserted;
    return _this3;
  }
  /**
  Apply the changes to a document, returning the modified
  document.
  */
  _createClass(ChangeSet, [{
    key: "apply",
    value: function apply(doc) {
      if (this.length != doc.length) throw new RangeError("Applying change set to a document with the wrong length");
      _iterChanges(this, function (fromA, toA, fromB, _toB, text) {
        return doc = doc.replace(fromB, fromB + (toA - fromA), text);
      }, false);
      return doc;
    }
  }, {
    key: "mapDesc",
    value: function mapDesc(other) {
      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return mapSet(this, other, before, true);
    }
    /**
    Given the document as it existed _before_ the changes, return a
    change set that represents the inverse of this set, which could
    be used to go from the document created by the changes back to
    the document as it existed before the changes.
    */
  }, {
    key: "invert",
    value: function invert(doc) {
      var sections = this.sections.slice(),
        inserted = [];
      for (var _i10 = 0, pos = 0; _i10 < sections.length; _i10 += 2) {
        var len = sections[_i10],
          ins = sections[_i10 + 1];
        if (ins >= 0) {
          sections[_i10] = ins;
          sections[_i10 + 1] = len;
          var index = _i10 >> 1;
          while (inserted.length < index) inserted.push(Text.empty);
          inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);
        }
        pos += len;
      }
      return new ChangeSet(sections, inserted);
    }
    /**
    Combine two subsequent change sets into a single set. `other`
    must start in the document produced by `this`. If `this` goes
    `docA` → `docB` and `other` represents `docB` → `docC`, the
    returned value will represent the change `docA` → `docC`.
    */
  }, {
    key: "compose",
    value: function compose(other) {
      return this.empty ? other : other.empty ? this : composeSets(this, other, true);
    }
    /**
    Given another change set starting in the same document, maps this
    change set over the other, producing a new change set that can be
    applied to the document produced by applying `other`. When
    `before` is `true`, order changes as if `this` comes before
    `other`, otherwise (the default) treat `other` as coming first.
    
    Given two changes `A` and `B`, `A.compose(B.map(A))` and
    `B.compose(A.map(B, true))` will produce the same document. This
    provides a basic form of [operational
    transformation](https://en.wikipedia.org/wiki/Operational_transformation),
    and can be used for collaborative editing.
    */
  }, {
    key: "map",
    value: function map(other) {
      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return other.empty ? this : mapSet(this, other, before, true);
    }
    /**
    Iterate over the changed ranges in the document, calling `f` for
    each, with the range in the original document (`fromA`-`toA`)
    and the range that replaces it in the new document
    (`fromB`-`toB`).
    
    When `individual` is true, adjacent changes are reported
    separately.
    */
  }, {
    key: "iterChanges",
    value: function iterChanges(f) {
      var individual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      _iterChanges(this, f, individual);
    }
    /**
    Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
    set.
    */
  }, {
    key: "desc",
    get: function get() {
      return ChangeDesc.create(this.sections);
    }
    /**
    @internal
    */
  }, {
    key: "filter",
    value: function filter(ranges) {
      var resultSections = [],
        resultInserted = [],
        filteredSections = [];
      var iter = new SectionIter(this);
      done: for (var _i11 = 0, pos = 0;;) {
        var next = _i11 == ranges.length ? 1e9 : ranges[_i11++];
        while (pos < next || pos == next && iter.len == 0) {
          if (iter.done) break done;
          var len = Math.min(iter.len, next - pos);
          addSection(filteredSections, len, -1);
          var ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
          addSection(resultSections, len, ins);
          if (ins > 0) addInsert(resultInserted, resultSections, iter.text);
          iter.forward(len);
          pos += len;
        }
        var end = ranges[_i11++];
        while (pos < end) {
          if (iter.done) break done;
          var _len = Math.min(iter.len, end - pos);
          addSection(resultSections, _len, -1);
          addSection(filteredSections, _len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
          iter.forward(_len);
          pos += _len;
        }
      }
      return {
        changes: new ChangeSet(resultSections, resultInserted),
        filtered: ChangeDesc.create(filteredSections)
      };
    }
    /**
    Serialize this change set to a JSON-representable value.
    */
  }, {
    key: "toJSON",
    value: function toJSON() {
      var parts = [];
      for (var _i12 = 0; _i12 < this.sections.length; _i12 += 2) {
        var len = this.sections[_i12],
          ins = this.sections[_i12 + 1];
        if (ins < 0) parts.push(len);else if (ins == 0) parts.push([len]);else parts.push([len].concat(this.inserted[_i12 >> 1].toJSON()));
      }
      return parts;
    }
    /**
    Create a change set for the given changes, for a document of the
    given length, using `lineSep` as line separator.
    */
  }], [{
    key: "of",
    value: function of(changes, length, lineSep) {
      var sections = [],
        inserted = [],
        pos = 0;
      var total = null;
      function flush() {
        var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        if (!force && !sections.length) return;
        if (pos < length) addSection(sections, length - pos, -1);
        var set = new ChangeSet(sections, inserted);
        total = total ? total.compose(set.map(total)) : set;
        sections = [];
        inserted = [];
        pos = 0;
      }
      function process(spec) {
        if (Array.isArray(spec)) {
          var _iterator10 = _createForOfIteratorHelper(spec),
            _step10;
          try {
            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
              var sub = _step10.value;
              process(sub);
            }
          } catch (err) {
            _iterator10.e(err);
          } finally {
            _iterator10.f();
          }
        } else if (spec instanceof ChangeSet) {
          if (spec.length != length) throw new RangeError("Mismatched change set length (got ".concat(spec.length, ", expected ").concat(length, ")"));
          flush();
          total = total ? total.compose(spec.map(total)) : spec;
        } else {
          var from = spec.from,
            _spec$to = spec.to,
            to = _spec$to === void 0 ? from : _spec$to,
            _insert = spec.insert;
          if (from > to || from < 0 || to > length) throw new RangeError("Invalid change range ".concat(from, " to ").concat(to, " (in doc of length ").concat(length, ")"));
          var insText = !_insert ? Text.empty : typeof _insert == "string" ? Text.of(_insert.split(lineSep || DefaultSplit)) : _insert;
          var insLen = insText.length;
          if (from == to && insLen == 0) return;
          if (from < pos) flush();
          if (from > pos) addSection(sections, from - pos, -1);
          addSection(sections, to - from, insLen);
          addInsert(inserted, sections, insText);
          pos = to;
        }
      }
      process(changes);
      flush(!total);
      return total;
    }
    /**
    Create an empty changeset of the given length.
    */
  }, {
    key: "empty",
    value: function empty(length) {
      return new ChangeSet(length ? [length, -1] : [], []);
    }
    /**
    Create a changeset from its JSON representation (as produced by
    [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
    */
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      if (!Array.isArray(json)) throw new RangeError("Invalid JSON representation of ChangeSet");
      var sections = [],
        inserted = [];
      for (var _i13 = 0; _i13 < json.length; _i13++) {
        var part = json[_i13];
        if (typeof part == "number") {
          sections.push(part, -1);
        } else if (!Array.isArray(part) || typeof part[0] != "number" || part.some(function (e, i) {
          return i && typeof e != "string";
        })) {
          throw new RangeError("Invalid JSON representation of ChangeSet");
        } else if (part.length == 1) {
          sections.push(part[0], 0);
        } else {
          while (inserted.length < _i13) inserted.push(Text.empty);
          inserted[_i13] = Text.of(part.slice(1));
          sections.push(part[0], inserted[_i13].length);
        }
      }
      return new ChangeSet(sections, inserted);
    }
    /**
    @internal
    */
  }, {
    key: "createSet",
    value: function createSet(sections, inserted) {
      return new ChangeSet(sections, inserted);
    }
  }]);
  return ChangeSet;
}(ChangeDesc);
function addSection(sections, len, ins) {
  var forceJoin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  if (len == 0 && ins <= 0) return;
  var last = sections.length - 2;
  if (last >= 0 && ins <= 0 && ins == sections[last + 1]) sections[last] += len;else if (len == 0 && sections[last] == 0) sections[last + 1] += ins;else if (forceJoin) {
    sections[last] += len;
    sections[last + 1] += ins;
  } else sections.push(len, ins);
}
function addInsert(values, sections, value) {
  if (value.length == 0) return;
  var index = sections.length - 2 >> 1;
  if (index < values.length) {
    values[values.length - 1] = values[values.length - 1].append(value);
  } else {
    while (values.length < index) values.push(Text.empty);
    values.push(value);
  }
}
function _iterChanges(desc, f, individual) {
  var inserted = desc.inserted;
  for (var posA = 0, posB = 0, _i14 = 0; _i14 < desc.sections.length;) {
    var len = desc.sections[_i14++],
      ins = desc.sections[_i14++];
    if (ins < 0) {
      posA += len;
      posB += len;
    } else {
      var endA = posA,
        endB = posB,
        _text = Text.empty;
      for (;;) {
        endA += len;
        endB += ins;
        if (ins && inserted) _text = _text.append(inserted[_i14 - 2 >> 1]);
        if (individual || _i14 == desc.sections.length || desc.sections[_i14 + 1] < 0) break;
        len = desc.sections[_i14++];
        ins = desc.sections[_i14++];
      }
      f(posA, endA, posB, endB, _text);
      posA = endA;
      posB = endB;
    }
  }
}
function mapSet(setA, setB, before) {
  var mkSet = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  // Produce a copy of setA that applies to the document after setB
  // has been applied (assuming both start at the same document).
  var sections = [],
    insert = mkSet ? [] : null;
  var a = new SectionIter(setA),
    b = new SectionIter(setB);
  // Iterate over both sets in parallel. inserted tracks, for changes
  // in A that have to be processed piece-by-piece, whether their
  // content has been inserted already, and refers to the section
  // index.
  for (var inserted = -1;;) {
    if (a.ins == -1 && b.ins == -1) {
      // Move across ranges skipped by both sets.
      var len = Math.min(a.len, b.len);
      addSection(sections, len, -1);
      a.forward(len);
      b.forward(len);
    } else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {
      // If there's a change in B that comes before the next change in
      // A (ordered by start pos, then len, then before flag), skip
      // that (and process any changes in A it covers).
      var _len2 = b.len;
      addSection(sections, b.ins, -1);
      while (_len2) {
        var piece = Math.min(a.len, _len2);
        if (a.ins >= 0 && inserted < a.i && a.len <= piece) {
          addSection(sections, 0, a.ins);
          if (insert) addInsert(insert, sections, a.text);
          inserted = a.i;
        }
        a.forward(piece);
        _len2 -= piece;
      }
      b.next();
    } else if (a.ins >= 0) {
      // Process the part of a change in A up to the start of the next
      // non-deletion change in B (if overlapping).
      var _len3 = 0,
        left = a.len;
      while (left) {
        if (b.ins == -1) {
          var _piece = Math.min(left, b.len);
          _len3 += _piece;
          left -= _piece;
          b.forward(_piece);
        } else if (b.ins == 0 && b.len < left) {
          left -= b.len;
          b.next();
        } else {
          break;
        }
      }
      addSection(sections, _len3, inserted < a.i ? a.ins : 0);
      if (insert && inserted < a.i) addInsert(insert, sections, a.text);
      inserted = a.i;
      a.forward(a.len - left);
    } else if (a.done && b.done) {
      return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
    } else {
      throw new Error("Mismatched change set lengths");
    }
  }
}
function composeSets(setA, setB) {
  var mkSet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var sections = [];
  var insert = mkSet ? [] : null;
  var a = new SectionIter(setA),
    b = new SectionIter(setB);
  for (var open = false;;) {
    if (a.done && b.done) {
      return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
    } else if (a.ins == 0) {
      // Deletion in A
      addSection(sections, a.len, 0, open);
      a.next();
    } else if (b.len == 0 && !b.done) {
      // Insertion in B
      addSection(sections, 0, b.ins, open);
      if (insert) addInsert(insert, sections, b.text);
      b.next();
    } else if (a.done || b.done) {
      throw new Error("Mismatched change set lengths");
    } else {
      var len = Math.min(a.len2, b.len),
        sectionLen = sections.length;
      if (a.ins == -1) {
        var insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
        addSection(sections, len, insB, open);
        if (insert && insB) addInsert(insert, sections, b.text);
      } else if (b.ins == -1) {
        addSection(sections, a.off ? 0 : a.len, len, open);
        if (insert) addInsert(insert, sections, a.textBit(len));
      } else {
        addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
        if (insert && !b.off) addInsert(insert, sections, b.text);
      }
      open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
      a.forward2(len);
      b.forward(len);
    }
  }
}
var SectionIter = /*#__PURE__*/function () {
  function SectionIter(set) {
    _classCallCheck(this, SectionIter);
    this.set = set;
    this.i = 0;
    this.next();
  }
  _createClass(SectionIter, [{
    key: "next",
    value: function next() {
      var sections = this.set.sections;
      if (this.i < sections.length) {
        this.len = sections[this.i++];
        this.ins = sections[this.i++];
      } else {
        this.len = 0;
        this.ins = -2;
      }
      this.off = 0;
    }
  }, {
    key: "done",
    get: function get() {
      return this.ins == -2;
    }
  }, {
    key: "len2",
    get: function get() {
      return this.ins < 0 ? this.len : this.ins;
    }
  }, {
    key: "text",
    get: function get() {
      var inserted = this.set.inserted,
        index = this.i - 2 >> 1;
      return index >= inserted.length ? Text.empty : inserted[index];
    }
  }, {
    key: "textBit",
    value: function textBit(len) {
      var inserted = this.set.inserted,
        index = this.i - 2 >> 1;
      return index >= inserted.length && !len ? Text.empty : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
    }
  }, {
    key: "forward",
    value: function forward(len) {
      if (len == this.len) this.next();else {
        this.len -= len;
        this.off += len;
      }
    }
  }, {
    key: "forward2",
    value: function forward2(len) {
      if (this.ins == -1) this.forward(len);else if (len == this.ins) this.next();else {
        this.ins -= len;
        this.off += len;
      }
    }
  }]);
  return SectionIter;
}();
/**
A single selection range. When
[`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
multiple ranges. By default, selections hold exactly one range.
*/
var SelectionRange = /*#__PURE__*/function () {
  function SelectionRange(
  /**
  The lower boundary of the range.
  */
  from,
  /**
  The upper boundary of the range.
  */
  to, flags) {
    _classCallCheck(this, SelectionRange);
    this.from = from;
    this.to = to;
    this.flags = flags;
  }
  /**
  The anchor of the range—the side that doesn't move when you
  extend it.
  */
  _createClass(SelectionRange, [{
    key: "anchor",
    get: function get() {
      return this.flags & 16 /* RangeFlag.Inverted */ ? this.to : this.from;
    }
    /**
    The head of the range, which is moved when the range is
    [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
    */
  }, {
    key: "head",
    get: function get() {
      return this.flags & 16 /* RangeFlag.Inverted */ ? this.from : this.to;
    }
    /**
    True when `anchor` and `head` are at the same position.
    */
  }, {
    key: "empty",
    get: function get() {
      return this.from == this.to;
    }
    /**
    If this is a cursor that is explicitly associated with the
    character on one of its sides, this returns the side. -1 means
    the character before its position, 1 the character after, and 0
    means no association.
    */
  }, {
    key: "assoc",
    get: function get() {
      return this.flags & 4 /* RangeFlag.AssocBefore */ ? -1 : this.flags & 8 /* RangeFlag.AssocAfter */ ? 1 : 0;
    }
    /**
    The bidirectional text level associated with this cursor, if
    any.
    */
  }, {
    key: "bidiLevel",
    get: function get() {
      var level = this.flags & 3 /* RangeFlag.BidiLevelMask */;
      return level == 3 ? null : level;
    }
    /**
    The goal column (stored vertical offset) associated with a
    cursor. This is used to preserve the vertical position when
    [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
    lines of different length.
    */
  }, {
    key: "goalColumn",
    get: function get() {
      var value = this.flags >> 5 /* RangeFlag.GoalColumnOffset */;
      return value == 33554431 /* RangeFlag.NoGoalColumn */ ? undefined : value;
    }
    /**
    Map this range through a change, producing a valid range in the
    updated document.
    */
  }, {
    key: "map",
    value: function map(change) {
      var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
      var from, to;
      if (this.empty) {
        from = to = change.mapPos(this.from, assoc);
      } else {
        from = change.mapPos(this.from, 1);
        to = change.mapPos(this.to, -1);
      }
      return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
    }
    /**
    Extend this range to cover at least `from` to `to`.
    */
  }, {
    key: "extend",
    value: function extend(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
      if (from <= this.anchor && to >= this.anchor) return EditorSelection.range(from, to);
      var head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
      return EditorSelection.range(this.anchor, head);
    }
    /**
    Compare this range to another range.
    */
  }, {
    key: "eq",
    value: function eq(other) {
      return this.anchor == other.anchor && this.head == other.head;
    }
    /**
    Return a JSON-serializable object representing the range.
    */
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        anchor: this.anchor,
        head: this.head
      };
    }
    /**
    Convert a JSON representation of a range to a `SelectionRange`
    instance.
    */
  }], [{
    key: "fromJSON",
    value: function fromJSON(json) {
      if (!json || typeof json.anchor != "number" || typeof json.head != "number") throw new RangeError("Invalid JSON representation for SelectionRange");
      return EditorSelection.range(json.anchor, json.head);
    }
    /**
    @internal
    */
  }, {
    key: "create",
    value: function create(from, to, flags) {
      return new SelectionRange(from, to, flags);
    }
  }]);
  return SelectionRange;
}();
/**
An editor selection holds one or more selection ranges.
*/
var EditorSelection = /*#__PURE__*/function () {
  function EditorSelection(
  /**
  The ranges in the selection, sorted by position. Ranges cannot
  overlap (but they may touch, if they aren't empty).
  */
  ranges,
  /**
  The index of the _main_ range in the selection (which is
  usually the range that was added last).
  */
  mainIndex) {
    _classCallCheck(this, EditorSelection);
    this.ranges = ranges;
    this.mainIndex = mainIndex;
  }
  /**
  Map a selection through a change. Used to adjust the selection
  position for changes.
  */
  _createClass(EditorSelection, [{
    key: "map",
    value: function map(change) {
      var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
      if (change.empty) return this;
      return EditorSelection.create(this.ranges.map(function (r) {
        return r.map(change, assoc);
      }), this.mainIndex);
    }
    /**
    Compare this selection to another selection.
    */
  }, {
    key: "eq",
    value: function eq(other) {
      if (this.ranges.length != other.ranges.length || this.mainIndex != other.mainIndex) return false;
      for (var _i15 = 0; _i15 < this.ranges.length; _i15++) if (!this.ranges[_i15].eq(other.ranges[_i15])) return false;
      return true;
    }
    /**
    Get the primary selection range. Usually, you should make sure
    your code applies to _all_ ranges, by using methods like
    [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
    */
  }, {
    key: "main",
    get: function get() {
      return this.ranges[this.mainIndex];
    }
    /**
    Make sure the selection only has one range. Returns a selection
    holding only the main range from this selection.
    */
  }, {
    key: "asSingle",
    value: function asSingle() {
      return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);
    }
    /**
    Extend this selection with an extra range.
    */
  }, {
    key: "addRange",
    value: function addRange(range) {
      var main = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
    }
    /**
    Replace a given range with another range, and then normalize the
    selection to merge and sort ranges if necessary.
    */
  }, {
    key: "replaceRange",
    value: function replaceRange(range) {
      var which = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.mainIndex;
      var ranges = this.ranges.slice();
      ranges[which] = range;
      return EditorSelection.create(ranges, this.mainIndex);
    }
    /**
    Convert this selection to an object that can be serialized to
    JSON.
    */
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        ranges: this.ranges.map(function (r) {
          return r.toJSON();
        }),
        main: this.mainIndex
      };
    }
    /**
    Create a selection from a JSON representation.
    */
  }], [{
    key: "fromJSON",
    value: function fromJSON(json) {
      if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length) throw new RangeError("Invalid JSON representation for EditorSelection");
      return new EditorSelection(json.ranges.map(function (r) {
        return SelectionRange.fromJSON(r);
      }), json.main);
    }
    /**
    Create a selection holding a single range.
    */
  }, {
    key: "single",
    value: function single(anchor) {
      var head = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : anchor;
      return new EditorSelection([EditorSelection.range(anchor, head)], 0);
    }
    /**
    Sort and merge the given set of ranges, creating a valid
    selection.
    */
  }, {
    key: "create",
    value: function create(ranges) {
      var mainIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      if (ranges.length == 0) throw new RangeError("A selection needs at least one range");
      for (var pos = 0, _i16 = 0; _i16 < ranges.length; _i16++) {
        var range = ranges[_i16];
        if (range.empty ? range.from <= pos : range.from < pos) return EditorSelection.normalized(ranges.slice(), mainIndex);
        pos = range.to;
      }
      return new EditorSelection(ranges, mainIndex);
    }
    /**
    Create a cursor selection range at the given position. You can
    safely ignore the optional arguments in most situations.
    */
  }, {
    key: "cursor",
    value: function cursor(pos) {
      var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var bidiLevel = arguments.length > 2 ? arguments[2] : undefined;
      var goalColumn = arguments.length > 3 ? arguments[3] : undefined;
      return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4 /* RangeFlag.AssocBefore */ : 8 /* RangeFlag.AssocAfter */) | (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) | (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* RangeFlag.NoGoalColumn */) << 5 /* RangeFlag.GoalColumnOffset */);
    }
    /**
    Create a selection range.
    */
  }, {
    key: "range",
    value: function range(anchor, head, goalColumn, bidiLevel) {
      var flags = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* RangeFlag.NoGoalColumn */) << 5 /* RangeFlag.GoalColumnOffset */ | (bidiLevel == null ? 3 : Math.min(2, bidiLevel));
      return head < anchor ? SelectionRange.create(head, anchor, 16 /* RangeFlag.Inverted */ | 8 /* RangeFlag.AssocAfter */ | flags) : SelectionRange.create(anchor, head, (head > anchor ? 4 /* RangeFlag.AssocBefore */ : 0) | flags);
    }
    /**
    @internal
    */
  }, {
    key: "normalized",
    value: function normalized(ranges) {
      var mainIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var main = ranges[mainIndex];
      ranges.sort(function (a, b) {
        return a.from - b.from;
      });
      mainIndex = ranges.indexOf(main);
      for (var _i17 = 1; _i17 < ranges.length; _i17++) {
        var range = ranges[_i17],
          prev = ranges[_i17 - 1];
        if (range.empty ? range.from <= prev.to : range.from < prev.to) {
          var from = prev.from,
            to = Math.max(range.to, prev.to);
          if (_i17 <= mainIndex) mainIndex--;
          ranges.splice(--_i17, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
        }
      }
      return new EditorSelection(ranges, mainIndex);
    }
  }]);
  return EditorSelection;
}();
function checkSelection(selection, docLength) {
  var _iterator11 = _createForOfIteratorHelper(selection.ranges),
    _step11;
  try {
    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
      var range = _step11.value;
      if (range.to > docLength) throw new RangeError("Selection points outside of document");
    }
  } catch (err) {
    _iterator11.e(err);
  } finally {
    _iterator11.f();
  }
}
var nextID = 0;
/**
A facet is a labeled value that is associated with an editor
state. It takes inputs from any number of extensions, and combines
those into a single output value.

Examples of uses of facets are the [tab
size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor
attributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update
listeners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).
*/
var Facet = /*#__PURE__*/function () {
  function Facet(
  /**
  @internal
  */
  combine,
  /**
  @internal
  */
  compareInput,
  /**
  @internal
  */
  compare, isStatic, enables) {
    _classCallCheck(this, Facet);
    this.combine = combine;
    this.compareInput = compareInput;
    this.compare = compare;
    this.isStatic = isStatic;
    /**
    @internal
    */
    this.id = nextID++;
    this["default"] = combine([]);
    this.extensions = typeof enables == "function" ? enables(this) : enables;
  }
  /**
  Define a new facet.
  */
  _createClass(Facet, [{
    key: "of",
    value:
    /**
    Returns an extension that adds the given value to this facet.
    */
    function of(value) {
      return new FacetProvider([], this, 0 /* Provider.Static */, value);
    }
    /**
    Create an extension that computes a value for the facet from a
    state. You must take care to declare the parts of the state that
    this value depends on, since your function is only called again
    for a new state when one of those parts changed.
    
    In cases where your value depends only on a single field, you'll
    want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
    */
  }, {
    key: "compute",
    value: function compute(deps, get) {
      if (this.isStatic) throw new Error("Can't compute a static facet");
      return new FacetProvider(deps, this, 1 /* Provider.Single */, get);
    }
    /**
    Create an extension that computes zero or more values for this
    facet from a state.
    */
  }, {
    key: "computeN",
    value: function computeN(deps, get) {
      if (this.isStatic) throw new Error("Can't compute a static facet");
      return new FacetProvider(deps, this, 2 /* Provider.Multi */, get);
    }
  }, {
    key: "from",
    value: function from(field, get) {
      if (!get) get = function get(x) {
        return x;
      };
      return this.compute([field], function (state) {
        return get(state.field(field));
      });
    }
  }], [{
    key: "define",
    value: function define() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return new Facet(config.combine || function (a) {
        return a;
      }, config.compareInput || function (a, b) {
        return a === b;
      }, config.compare || (!config.combine ? sameArray$1 : function (a, b) {
        return a === b;
      }), !!config["static"], config.enables);
    }
  }]);
  return Facet;
}();
function sameArray$1(a, b) {
  return a == b || a.length == b.length && a.every(function (e, i) {
    return e === b[i];
  });
}
var FacetProvider = /*#__PURE__*/function () {
  function FacetProvider(dependencies, facet, type, value) {
    _classCallCheck(this, FacetProvider);
    this.dependencies = dependencies;
    this.facet = facet;
    this.type = type;
    this.value = value;
    this.id = nextID++;
  }
  _createClass(FacetProvider, [{
    key: "dynamicSlot",
    value: function dynamicSlot(addresses) {
      var _this4 = this;
      var _a;
      var getter = this.value;
      var compare = this.facet.compareInput;
      var id = this.id,
        idx = addresses[id] >> 1,
        multi = this.type == 2 /* Provider.Multi */;
      var depDoc = false,
        depSel = false,
        depAddrs = [];
      var _iterator12 = _createForOfIteratorHelper(this.dependencies),
        _step12;
      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          var dep = _step12.value;
          if (dep == "doc") depDoc = true;else if (dep == "selection") depSel = true;else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0) depAddrs.push(addresses[dep.id]);
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }
      return {
        create: function create(state) {
          state.values[idx] = getter(state);
          return 1 /* SlotStatus.Changed */;
        },
        update: function update(state, tr) {
          if (depDoc && tr.docChanged || depSel && (tr.docChanged || tr.selection) || ensureAll(state, depAddrs)) {
            var newVal = getter(state);
            if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {
              state.values[idx] = newVal;
              return 1 /* SlotStatus.Changed */;
            }
          }

          return 0;
        },
        reconfigure: function reconfigure(state, oldState) {
          var newVal,
            oldAddr = oldState.config.address[id];
          if (oldAddr != null) {
            var oldVal = getAddr(oldState, oldAddr);
            if (_this4.dependencies.every(function (dep) {
              return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) : dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
            }) || (multi ? compareArray(newVal = getter(state), oldVal, compare) : compare(newVal = getter(state), oldVal))) {
              state.values[idx] = oldVal;
              return 0;
            }
          } else {
            newVal = getter(state);
          }
          state.values[idx] = newVal;
          return 1 /* SlotStatus.Changed */;
        }
      };
    }
  }]);
  return FacetProvider;
}();
function compareArray(a, b, compare) {
  if (a.length != b.length) return false;
  for (var _i18 = 0; _i18 < a.length; _i18++) if (!compare(a[_i18], b[_i18])) return false;
  return true;
}
function ensureAll(state, addrs) {
  var changed = false;
  var _iterator13 = _createForOfIteratorHelper(addrs),
    _step13;
  try {
    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
      var addr = _step13.value;
      if (ensureAddr(state, addr) & 1 /* SlotStatus.Changed */) changed = true;
    }
  } catch (err) {
    _iterator13.e(err);
  } finally {
    _iterator13.f();
  }
  return changed;
}
function dynamicFacetSlot(addresses, facet, providers) {
  var providerAddrs = providers.map(function (p) {
    return addresses[p.id];
  });
  var providerTypes = providers.map(function (p) {
    return p.type;
  });
  var dynamic = providerAddrs.filter(function (p) {
    return !(p & 1);
  });
  var idx = addresses[facet.id] >> 1;
  function get(state) {
    var values = [];
    for (var _i19 = 0; _i19 < providerAddrs.length; _i19++) {
      var value = getAddr(state, providerAddrs[_i19]);
      if (providerTypes[_i19] == 2 /* Provider.Multi */) {
        var _iterator14 = _createForOfIteratorHelper(value),
          _step14;
        try {
          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
            var val = _step14.value;
            values.push(val);
          }
        } catch (err) {
          _iterator14.e(err);
        } finally {
          _iterator14.f();
        }
      } else values.push(value);
    }
    return facet.combine(values);
  }
  return {
    create: function create(state) {
      var _iterator15 = _createForOfIteratorHelper(providerAddrs),
        _step15;
      try {
        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
          var addr = _step15.value;
          ensureAddr(state, addr);
        }
      } catch (err) {
        _iterator15.e(err);
      } finally {
        _iterator15.f();
      }
      state.values[idx] = get(state);
      return 1 /* SlotStatus.Changed */;
    },
    update: function update(state, tr) {
      if (!ensureAll(state, dynamic)) return 0;
      var value = get(state);
      if (facet.compare(value, state.values[idx])) return 0;
      state.values[idx] = value;
      return 1 /* SlotStatus.Changed */;
    },
    reconfigure: function reconfigure(state, oldState) {
      var depChanged = ensureAll(state, providerAddrs);
      var oldProviders = oldState.config.facets[facet.id],
        oldValue = oldState.facet(facet);
      if (oldProviders && !depChanged && sameArray$1(providers, oldProviders)) {
        state.values[idx] = oldValue;
        return 0;
      }
      var value = get(state);
      if (facet.compare(value, oldValue)) {
        state.values[idx] = oldValue;
        return 0;
      }
      state.values[idx] = value;
      return 1 /* SlotStatus.Changed */;
    }
  };
}

var initField = /*@__PURE__*/Facet.define({
  "static": true
});
/**
Fields can store additional information in an editor state, and
keep it in sync with the rest of the state.
*/
var StateField = /*#__PURE__*/function () {
  function StateField(
  /**
  @internal
  */
  id, createF, updateF, compareF,
  /**
  @internal
  */
  spec) {
    _classCallCheck(this, StateField);
    this.id = id;
    this.createF = createF;
    this.updateF = updateF;
    this.compareF = compareF;
    this.spec = spec;
    /**
    @internal
    */
    this.provides = undefined;
  }
  /**
  Define a state field.
  */
  _createClass(StateField, [{
    key: "create",
    value: function create(state) {
      var _this5 = this;
      var init = state.facet(initField).find(function (i) {
        return i.field == _this5;
      });
      return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
    }
    /**
    @internal
    */
  }, {
    key: "slot",
    value: function slot(addresses) {
      var _this6 = this;
      var idx = addresses[this.id] >> 1;
      return {
        create: function create(state) {
          state.values[idx] = _this6.create(state);
          return 1 /* SlotStatus.Changed */;
        },

        update: function update(state, tr) {
          var oldVal = state.values[idx];
          var value = _this6.updateF(oldVal, tr);
          if (_this6.compareF(oldVal, value)) return 0;
          state.values[idx] = value;
          return 1 /* SlotStatus.Changed */;
        },

        reconfigure: function reconfigure(state, oldState) {
          if (oldState.config.address[_this6.id] != null) {
            state.values[idx] = oldState.field(_this6);
            return 0;
          }
          state.values[idx] = _this6.create(state);
          return 1 /* SlotStatus.Changed */;
        }
      };
    }
    /**
    Returns an extension that enables this field and overrides the
    way it is initialized. Can be useful when you need to provide a
    non-default starting value for the field.
    */
  }, {
    key: "init",
    value: function init(create) {
      return [this, initField.of({
        field: this,
        create: create
      })];
    }
    /**
    State field instances can be used as
    [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
    given state.
    */
  }, {
    key: "extension",
    get: function get() {
      return this;
    }
  }], [{
    key: "define",
    value: function define(config) {
      var field = new StateField(nextID++, config.create, config.update, config.compare || function (a, b) {
        return a === b;
      }, config);
      if (config.provide) field.provides = config.provide(field);
      return field;
    }
  }]);
  return StateField;
}();
var Prec_ = {
  lowest: 4,
  low: 3,
  "default": 2,
  high: 1,
  highest: 0
};
function prec(value) {
  return function (ext) {
    return new PrecExtension(ext, value);
  };
}
/**
By default extensions are registered in the order they are found
in the flattened form of nested array that was provided.
Individual extension values can be assigned a precedence to
override this. Extensions that do not have a precedence set get
the precedence of the nearest parent with a precedence, or
[`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
final ordering of extensions is determined by first sorting by
precedence and then by order within each precedence.
*/
var Prec = {
  /**
  The highest precedence level, for extensions that should end up
  near the start of the precedence ordering.
  */
  highest: /*@__PURE__*/prec(Prec_.highest),
  /**
  A higher-than-default precedence, for extensions that should
  come before those with default precedence.
  */
  high: /*@__PURE__*/prec(Prec_.high),
  /**
  The default precedence, which is also used for extensions
  without an explicit precedence.
  */
  "default": /*@__PURE__*/prec(Prec_["default"]),
  /**
  A lower-than-default precedence.
  */
  low: /*@__PURE__*/prec(Prec_.low),
  /**
  The lowest precedence level. Meant for things that should end up
  near the end of the extension order.
  */
  lowest: /*@__PURE__*/prec(Prec_.lowest)
};
var PrecExtension = /*#__PURE__*/_createClass(function PrecExtension(inner, prec) {
  _classCallCheck(this, PrecExtension);
  this.inner = inner;
  this.prec = prec;
});
/**
Extension compartments can be used to make a configuration
dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
configuration in a compartment, you can later
[replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
transaction.
*/
var Compartment = /*#__PURE__*/function () {
  function Compartment() {
    _classCallCheck(this, Compartment);
  }
  _createClass(Compartment, [{
    key: "of",
    value:
    /**
    Create an instance of this compartment to add to your [state
    configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
    */
    function of(ext) {
      return new CompartmentInstance(this, ext);
    }
    /**
    Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
    reconfigures this compartment.
    */
  }, {
    key: "reconfigure",
    value: function reconfigure(content) {
      return Compartment.reconfigure.of({
        compartment: this,
        extension: content
      });
    }
    /**
    Get the current content of the compartment in the state, or
    `undefined` if it isn't present.
    */
  }, {
    key: "get",
    value: function get(state) {
      return state.config.compartments.get(this);
    }
  }]);
  return Compartment;
}();
var CompartmentInstance = /*#__PURE__*/_createClass(function CompartmentInstance(compartment, inner) {
  _classCallCheck(this, CompartmentInstance);
  this.compartment = compartment;
  this.inner = inner;
});
var Configuration = /*#__PURE__*/function () {
  function Configuration(base, compartments, dynamicSlots, address, staticValues, facets) {
    _classCallCheck(this, Configuration);
    this.base = base;
    this.compartments = compartments;
    this.dynamicSlots = dynamicSlots;
    this.address = address;
    this.staticValues = staticValues;
    this.facets = facets;
    this.statusTemplate = [];
    while (this.statusTemplate.length < dynamicSlots.length) this.statusTemplate.push(0 /* SlotStatus.Unresolved */);
  }
  _createClass(Configuration, [{
    key: "staticFacet",
    value: function staticFacet(facet) {
      var addr = this.address[facet.id];
      return addr == null ? facet["default"] : this.staticValues[addr >> 1];
    }
  }], [{
    key: "resolve",
    value: function resolve(base, compartments, oldState) {
      var fields = [];
      var facets = Object.create(null);
      var newCompartments = new Map();
      var _iterator16 = _createForOfIteratorHelper(flatten(base, compartments, newCompartments)),
        _step16;
      try {
        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
          var ext = _step16.value;
          if (ext instanceof StateField) fields.push(ext);else (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
        }
      } catch (err) {
        _iterator16.e(err);
      } finally {
        _iterator16.f();
      }
      var address = Object.create(null);
      var staticValues = [];
      var dynamicSlots = [];
      var _loop = function _loop() {
        var field = _fields[_i20];
        address[field.id] = dynamicSlots.length << 1;
        dynamicSlots.push(function (a) {
          return field.slot(a);
        });
      };
      for (var _i20 = 0, _fields = fields; _i20 < _fields.length; _i20++) {
        _loop();
      }
      var oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
      var _loop2 = function _loop2() {
        var providers = facets[id],
          facet = providers[0].facet;
        var oldProviders = oldFacets && oldFacets[id] || [];
        if (providers.every(function (p) {
          return p.type == 0;
        } /* Provider.Static */)) {
          address[facet.id] = staticValues.length << 1 | 1;
          if (sameArray$1(oldProviders, providers)) {
            staticValues.push(oldState.facet(facet));
          } else {
            var value = facet.combine(providers.map(function (p) {
              return p.value;
            }));
            staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
          }
        } else {
          var _iterator17 = _createForOfIteratorHelper(providers),
            _step17;
          try {
            var _loop3 = function _loop3() {
              var p = _step17.value;
              if (p.type == 0 /* Provider.Static */) {
                address[p.id] = staticValues.length << 1 | 1;
                staticValues.push(p.value);
              } else {
                address[p.id] = dynamicSlots.length << 1;
                dynamicSlots.push(function (a) {
                  return p.dynamicSlot(a);
                });
              }
            };
            for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
              _loop3();
            }
          } catch (err) {
            _iterator17.e(err);
          } finally {
            _iterator17.f();
          }
          address[facet.id] = dynamicSlots.length << 1;
          dynamicSlots.push(function (a) {
            return dynamicFacetSlot(a, facet, providers);
          });
        }
      };
      for (var id in facets) {
        _loop2();
      }
      var dynamic = dynamicSlots.map(function (f) {
        return f(address);
      });
      return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);
    }
  }]);
  return Configuration;
}();
function flatten(extension, compartments, newCompartments) {
  var result = [[], [], [], [], []];
  var seen = new Map();
  function inner(ext, prec) {
    var known = seen.get(ext);
    if (known != null) {
      if (known <= prec) return;
      var found = result[known].indexOf(ext);
      if (found > -1) result[known].splice(found, 1);
      if (ext instanceof CompartmentInstance) newCompartments["delete"](ext.compartment);
    }
    seen.set(ext, prec);
    if (Array.isArray(ext)) {
      var _iterator18 = _createForOfIteratorHelper(ext),
        _step18;
      try {
        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
          var e = _step18.value;
          inner(e, prec);
        }
      } catch (err) {
        _iterator18.e(err);
      } finally {
        _iterator18.f();
      }
    } else if (ext instanceof CompartmentInstance) {
      if (newCompartments.has(ext.compartment)) throw new RangeError("Duplicate use of compartment in extensions");
      var content = compartments.get(ext.compartment) || ext.inner;
      newCompartments.set(ext.compartment, content);
      inner(content, prec);
    } else if (ext instanceof PrecExtension) {
      inner(ext.inner, ext.prec);
    } else if (ext instanceof StateField) {
      result[prec].push(ext);
      if (ext.provides) inner(ext.provides, prec);
    } else if (ext instanceof FacetProvider) {
      result[prec].push(ext);
      if (ext.facet.extensions) inner(ext.facet.extensions, Prec_["default"]);
    } else {
      var _content = ext.extension;
      if (!_content) throw new Error("Unrecognized extension value in extension set (".concat(ext, "). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks."));
      inner(_content, prec);
    }
  }
  inner(extension, Prec_["default"]);
  return result.reduce(function (a, b) {
    return a.concat(b);
  });
}
function ensureAddr(state, addr) {
  if (addr & 1) return 2 /* SlotStatus.Computed */;
  var idx = addr >> 1;
  var status = state.status[idx];
  if (status == 4 /* SlotStatus.Computing */) throw new Error("Cyclic dependency between fields and/or facets");
  if (status & 2 /* SlotStatus.Computed */) return status;
  state.status[idx] = 4 /* SlotStatus.Computing */;
  var changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
  return state.status[idx] = 2 /* SlotStatus.Computed */ | changed;
}
function getAddr(state, addr) {
  return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
}
var languageData = /*@__PURE__*/Facet.define();
var allowMultipleSelections = /*@__PURE__*/Facet.define({
  combine: function combine(values) {
    return values.some(function (v) {
      return v;
    });
  },
  "static": true
});
var lineSeparator = /*@__PURE__*/Facet.define({
  combine: function combine(values) {
    return values.length ? values[0] : undefined;
  },
  "static": true
});
var changeFilter = /*@__PURE__*/Facet.define();
var transactionFilter = /*@__PURE__*/Facet.define();
var transactionExtender = /*@__PURE__*/Facet.define();
var readOnly = /*@__PURE__*/Facet.define({
  combine: function combine(values) {
    return values.length ? values[0] : false;
  }
});

/**
Annotations are tagged values that are used to add metadata to
transactions in an extensible way. They should be used to model
things that effect the entire transaction (such as its [time
stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
[origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
_alongside_ the other changes made by the transaction, [state
effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
*/
var Annotation = /*#__PURE__*/function () {
  /**
  @internal
  */
  function Annotation(
  /**
  The annotation type.
  */
  type,
  /**
  The value of this annotation.
  */
  value) {
    _classCallCheck(this, Annotation);
    this.type = type;
    this.value = value;
  }
  /**
  Define a new type of annotation.
  */
  _createClass(Annotation, null, [{
    key: "define",
    value: function define() {
      return new AnnotationType();
    }
  }]);
  return Annotation;
}();
/**
Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
*/
var AnnotationType = /*#__PURE__*/function () {
  function AnnotationType() {
    _classCallCheck(this, AnnotationType);
  }
  _createClass(AnnotationType, [{
    key: "of",
    value:
    /**
    Create an instance of this annotation.
    */
    function of(value) {
      return new Annotation(this, value);
    }
  }]);
  return AnnotationType;
}();
/**
Representation of a type of state effect. Defined with
[`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
*/
var StateEffectType = /*#__PURE__*/function () {
  /**
  @internal
  */
  function StateEffectType(
  // The `any` types in these function types are there to work
  // around TypeScript issue #37631, where the type guard on
  // `StateEffect.is` mysteriously stops working when these properly
  // have type `Value`.
  /**
  @internal
  */
  map) {
    _classCallCheck(this, StateEffectType);
    this.map = map;
  }
  /**
  Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
  type.
  */
  _createClass(StateEffectType, [{
    key: "of",
    value: function of(value) {
      return new StateEffect(this, value);
    }
  }]);
  return StateEffectType;
}();
/**
State effects can be used to represent additional effects
associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
are often useful to model changes to custom [state
fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
document or selection changes.
*/
var StateEffect = /*#__PURE__*/function () {
  /**
  @internal
  */
  function StateEffect(
  /**
  @internal
  */
  type,
  /**
  The value of this effect.
  */
  value) {
    _classCallCheck(this, StateEffect);
    this.type = type;
    this.value = value;
  }
  /**
  Map this effect through a position mapping. Will return
  `undefined` when that ends up deleting the effect.
  */
  _createClass(StateEffect, [{
    key: "map",
    value: function map(mapping) {
      var mapped = this.type.map(this.value, mapping);
      return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
    }
    /**
    Tells you whether this effect object is of a given
    [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
    */
  }, {
    key: "is",
    value: function is(type) {
      return this.type == type;
    }
    /**
    Define a new effect type. The type parameter indicates the type
    of values that his effect holds. It should be a type that
    doesn't include `undefined`, since that is used in
    [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
    removed.
    */
  }], [{
    key: "define",
    value: function define() {
      var spec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return new StateEffectType(spec.map || function (v) {
        return v;
      });
    }
    /**
    Map an array of effects through a change set.
    */
  }, {
    key: "mapEffects",
    value: function mapEffects(effects, mapping) {
      if (!effects.length) return effects;
      var result = [];
      var _iterator19 = _createForOfIteratorHelper(effects),
        _step19;
      try {
        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
          var effect = _step19.value;
          var mapped = effect.map(mapping);
          if (mapped) result.push(mapped);
        }
      } catch (err) {
        _iterator19.e(err);
      } finally {
        _iterator19.f();
      }
      return result;
    }
  }]);
  return StateEffect;
}();
/**
This effect can be used to reconfigure the root extensions of
the editor. Doing this will discard any extensions
[appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
compartments.
*/
StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
/**
Append extensions to the top-level configuration of the editor.
*/
StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
/**
Changes to the editor state are grouped into transactions.
Typically, a user action creates a single transaction, which may
contain any number of document changes, may change the selection,
or have other effects. Create a transaction by calling
[`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately
dispatch one by calling
[`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).
*/
var Transaction = /*#__PURE__*/function () {
  function Transaction(
  /**
  The state from which the transaction starts.
  */
  startState,
  /**
  The document changes made by this transaction.
  */
  changes,
  /**
  The selection set by this transaction, or undefined if it
  doesn't explicitly set a selection.
  */
  selection,
  /**
  The effects added to the transaction.
  */
  effects,
  /**
  @internal
  */
  annotations,
  /**
  Whether the selection should be scrolled into view after this
  transaction is dispatched.
  */
  scrollIntoView) {
    _classCallCheck(this, Transaction);
    this.startState = startState;
    this.changes = changes;
    this.selection = selection;
    this.effects = effects;
    this.annotations = annotations;
    this.scrollIntoView = scrollIntoView;
    /**
    @internal
    */
    this._doc = null;
    /**
    @internal
    */
    this._state = null;
    if (selection) checkSelection(selection, changes.newLength);
    if (!annotations.some(function (a) {
      return a.type == Transaction.time;
    })) this.annotations = annotations.concat(Transaction.time.of(Date.now()));
  }
  /**
  @internal
  */
  _createClass(Transaction, [{
    key: "newDoc",
    get:
    /**
    The new document produced by the transaction. Contrary to
    [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
    force the entire new state to be computed right away, so it is
    recommended that [transaction
    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
    when they need to look at the new document.
    */
    function get() {
      return this._doc || (this._doc = this.changes.apply(this.startState.doc));
    }
    /**
    The new selection produced by the transaction. If
    [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
    this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
    current selection through the changes made by the transaction.
    */
  }, {
    key: "newSelection",
    get: function get() {
      return this.selection || this.startState.selection.map(this.changes);
    }
    /**
    The new state created by the transaction. Computed on demand
    (but retained for subsequent access), so it is recommended not to
    access it in [transaction
    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
    */
  }, {
    key: "state",
    get: function get() {
      if (!this._state) this.startState.applyTransaction(this);
      return this._state;
    }
    /**
    Get the value of the given annotation type, if any.
    */
  }, {
    key: "annotation",
    value: function annotation(type) {
      var _iterator20 = _createForOfIteratorHelper(this.annotations),
        _step20;
      try {
        for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
          var ann = _step20.value;
          if (ann.type == type) return ann.value;
        }
      } catch (err) {
        _iterator20.e(err);
      } finally {
        _iterator20.f();
      }
      return undefined;
    }
    /**
    Indicates whether the transaction changed the document.
    */
  }, {
    key: "docChanged",
    get: function get() {
      return !this.changes.empty;
    }
    /**
    Indicates whether this transaction reconfigures the state
    (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
    with a top-level configuration
    [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
    */
  }, {
    key: "reconfigured",
    get: function get() {
      return this.startState.config != this.state.config;
    }
    /**
    Returns true if the transaction has a [user
    event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
    or more specific than `event`. For example, if the transaction
    has `"select.pointer"` as user event, `"select"` and
    `"select.pointer"` will match it.
    */
  }, {
    key: "isUserEvent",
    value: function isUserEvent(event) {
      var e = this.annotation(Transaction.userEvent);
      return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
    }
  }], [{
    key: "create",
    value: function create(startState, changes, selection, effects, annotations, scrollIntoView) {
      return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);
    }
  }]);
  return Transaction;
}();
/**
Annotation used to store transaction timestamps. Automatically
added to every transaction, holding `Date.now()`.
*/
Transaction.time = /*@__PURE__*/Annotation.define();
/**
Annotation used to associate a transaction with a user interface
event. Holds a string identifying the event, using a
dot-separated format to support attaching more specific
information. The events used by the core libraries are:

 - `"input"` when content is entered
   - `"input.type"` for typed input
     - `"input.type.compose"` for composition
   - `"input.paste"` for pasted input
   - `"input.drop"` when adding content with drag-and-drop
   - `"input.complete"` when autocompleting
 - `"delete"` when the user deletes content
   - `"delete.selection"` when deleting the selection
   - `"delete.forward"` when deleting forward from the selection
   - `"delete.backward"` when deleting backward from the selection
   - `"delete.cut"` when cutting to the clipboard
 - `"move"` when content is moved
   - `"move.drop"` when content is moved within the editor through drag-and-drop
 - `"select"` when explicitly changing the selection
   - `"select.pointer"` when selecting with a mouse or other pointing device
 - `"undo"` and `"redo"` for history actions

Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
whether the annotation matches a given event.
*/
Transaction.userEvent = /*@__PURE__*/Annotation.define();
/**
Annotation indicating whether a transaction should be added to
the undo history or not.
*/
Transaction.addToHistory = /*@__PURE__*/Annotation.define();
/**
Annotation indicating (when present and true) that a transaction
represents a change made by some other actor, not the user. This
is used, for example, to tag other people's changes in
collaborative editing.
*/
Transaction.remote = /*@__PURE__*/Annotation.define();
function joinRanges(a, b) {
  var result = [];
  for (var iA = 0, iB = 0;;) {
    var from = void 0,
      to = void 0;
    if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
      from = a[iA++];
      to = a[iA++];
    } else if (iB < b.length) {
      from = b[iB++];
      to = b[iB++];
    } else return result;
    if (!result.length || result[result.length - 1] < from) result.push(from, to);else if (result[result.length - 1] < to) result[result.length - 1] = to;
  }
}
function mergeTransaction(a, b, sequential) {
  var _a;
  var mapForA, mapForB, changes;
  if (sequential) {
    mapForA = b.changes;
    mapForB = ChangeSet.empty(b.changes.length);
    changes = a.changes.compose(b.changes);
  } else {
    mapForA = b.changes.map(a.changes);
    mapForB = a.changes.mapDesc(b.changes, true);
    changes = a.changes.compose(mapForA);
  }
  return {
    changes: changes,
    selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
    effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
    annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
    scrollIntoView: a.scrollIntoView || b.scrollIntoView
  };
}
function resolveTransactionInner(state, spec, docSize) {
  var sel = spec.selection,
    annotations = asArray$1(spec.annotations);
  if (spec.userEvent) annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
  return {
    changes: spec.changes instanceof ChangeSet ? spec.changes : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
    selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
    effects: asArray$1(spec.effects),
    annotations: annotations,
    scrollIntoView: !!spec.scrollIntoView
  };
}
function resolveTransaction(state, specs, filter) {
  var s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
  if (specs.length && specs[0].filter === false) filter = false;
  for (var _i21 = 1; _i21 < specs.length; _i21++) {
    if (specs[_i21].filter === false) filter = false;
    var seq = !!specs[_i21].sequential;
    s = mergeTransaction(s, resolveTransactionInner(state, specs[_i21], seq ? s.changes.newLength : state.doc.length), seq);
  }
  var tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
  return extendTransaction(filter ? filterTransaction(tr) : tr);
}
// Finish a transaction by applying filters if necessary.
function filterTransaction(tr) {
  var state = tr.startState;
  // Change filters
  var result = true;
  var _iterator21 = _createForOfIteratorHelper(state.facet(changeFilter)),
    _step21;
  try {
    for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
      var filter = _step21.value;
      var value = filter(tr);
      if (value === false) {
        result = false;
        break;
      }
      if (Array.isArray(value)) result = result === true ? value : joinRanges(result, value);
    }
  } catch (err) {
    _iterator21.e(err);
  } finally {
    _iterator21.f();
  }
  if (result !== true) {
    var changes, back;
    if (result === false) {
      back = tr.changes.invertedDesc;
      changes = ChangeSet.empty(state.doc.length);
    } else {
      var filtered = tr.changes.filter(result);
      changes = filtered.changes;
      back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
    }
    tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
  }
  // Transaction filters
  var filters = state.facet(transactionFilter);
  for (var _i22 = filters.length - 1; _i22 >= 0; _i22--) {
    var _filtered = filters[_i22](tr);
    if (_filtered instanceof Transaction) tr = _filtered;else if (Array.isArray(_filtered) && _filtered.length == 1 && _filtered[0] instanceof Transaction) tr = _filtered[0];else tr = resolveTransaction(state, asArray$1(_filtered), false);
  }
  return tr;
}
function extendTransaction(tr) {
  var state = tr.startState,
    extenders = state.facet(transactionExtender),
    spec = tr;
  for (var _i23 = extenders.length - 1; _i23 >= 0; _i23--) {
    var extension = extenders[_i23](tr);
    if (extension && Object.keys(extension).length) spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
  }
  return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
}
var none$2 = [];
function asArray$1(value) {
  return value == null ? none$2 : Array.isArray(value) ? value : [value];
}

/**
The categories produced by a [character
categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
do things like selecting by word.
*/
var CharCategory = /*@__PURE__*/function (CharCategory) {
  /**
  Word characters.
  */
  CharCategory[CharCategory["Word"] = 0] = "Word";
  /**
  Whitespace.
  */
  CharCategory[CharCategory["Space"] = 1] = "Space";
  /**
  Anything else.
  */
  CharCategory[CharCategory["Other"] = 2] = "Other";
  return CharCategory;
}(CharCategory || (CharCategory = {}));
var nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
var wordChar;
try {
  wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
} catch (_) {}
function hasWordChar(str) {
  if (wordChar) return wordChar.test(str);
  for (var _i24 = 0; _i24 < str.length; _i24++) {
    var ch = str[_i24];
    if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch))) return true;
  }
  return false;
}
function makeCategorizer(wordChars) {
  return function (_char) {
    if (!/\S/.test(_char)) return CharCategory.Space;
    if (hasWordChar(_char)) return CharCategory.Word;
    for (var _i25 = 0; _i25 < wordChars.length; _i25++) if (_char.indexOf(wordChars[_i25]) > -1) return CharCategory.Word;
    return CharCategory.Other;
  };
}

/**
The editor state class is a persistent (immutable) data structure.
To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
[transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
instance, without modifying the original object.

As such, _never_ mutate properties of a state directly. That'll
just break things.
*/
var EditorState = /*#__PURE__*/function () {
  function EditorState(
  /**
  @internal
  */
  config,
  /**
  The current document.
  */
  doc,
  /**
  The current selection.
  */
  selection,
  /**
  @internal
  */
  values, computeSlot, tr) {
    _classCallCheck(this, EditorState);
    this.config = config;
    this.doc = doc;
    this.selection = selection;
    this.values = values;
    this.status = config.statusTemplate.slice();
    this.computeSlot = computeSlot;
    // Fill in the computed state immediately, so that further queries
    // for it made during the update return this state
    if (tr) tr._state = this;
    for (var _i26 = 0; _i26 < this.config.dynamicSlots.length; _i26++) ensureAddr(this, _i26 << 1);
    this.computeSlot = null;
  }
  _createClass(EditorState, [{
    key: "field",
    value: function field(_field) {
      var require = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var addr = this.config.address[_field.id];
      if (addr == null) {
        if (require) throw new RangeError("Field is not present in this state");
        return undefined;
      }
      ensureAddr(this, addr);
      return getAddr(this, addr);
    }
    /**
    Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
    state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
    can be passed. Unless
    [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
    [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
    are assumed to start in the _current_ document (not the document
    produced by previous specs), and its
    [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
    [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
    to the document created by its _own_ changes. The resulting
    transaction contains the combined effect of all the different
    specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
    specs take precedence over earlier ones.
    */
  }, {
    key: "update",
    value: function update() {
      for (var _len4 = arguments.length, specs = new Array(_len4), _key = 0; _key < _len4; _key++) {
        specs[_key] = arguments[_key];
      }
      return resolveTransaction(this, specs, true);
    }
    /**
    @internal
    */
  }, {
    key: "applyTransaction",
    value: function applyTransaction(tr) {
      var _this7 = this;
      var conf = this.config,
        _conf = conf,
        base = _conf.base,
        compartments = _conf.compartments;
      var _iterator22 = _createForOfIteratorHelper(tr.effects),
        _step22;
      try {
        for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
          var effect = _step22.value;
          if (effect.is(Compartment.reconfigure)) {
            if (conf) {
              compartments = new Map();
              conf.compartments.forEach(function (val, key) {
                return compartments.set(key, val);
              });
              conf = null;
            }
            compartments.set(effect.value.compartment, effect.value.extension);
          } else if (effect.is(StateEffect.reconfigure)) {
            conf = null;
            base = effect.value;
          } else if (effect.is(StateEffect.appendConfig)) {
            conf = null;
            base = asArray$1(base).concat(effect.value);
          }
        }
      } catch (err) {
        _iterator22.e(err);
      } finally {
        _iterator22.f();
      }
      var startValues;
      if (!conf) {
        conf = Configuration.resolve(base, compartments, this);
        var intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(function () {
          return null;
        }), function (state, slot) {
          return slot.reconfigure(state, _this7);
        }, null);
        startValues = intermediateState.values;
      } else {
        startValues = tr.startState.values.slice();
      }
      new EditorState(conf, tr.newDoc, tr.newSelection, startValues, function (state, slot) {
        return slot.update(state, tr);
      }, tr);
    }
    /**
    Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
    replaces every selection range with the given content.
    */
  }, {
    key: "replaceSelection",
    value: function replaceSelection(text) {
      if (typeof text == "string") text = this.toText(text);
      return this.changeByRange(function (range) {
        return {
          changes: {
            from: range.from,
            to: range.to,
            insert: text
          },
          range: EditorSelection.cursor(range.from + text.length)
        };
      });
    }
    /**
    Create a set of changes and a new selection by running the given
    function for each range in the active selection. The function
    can return an optional set of changes (in the coordinate space
    of the start document), plus an updated range (in the coordinate
    space of the document produced by the call's own changes). This
    method will merge all the changes and ranges into a single
    changeset and selection, and return it as a [transaction
    spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
    [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
    */
  }, {
    key: "changeByRange",
    value: function changeByRange(f) {
      var sel = this.selection;
      var result1 = f(sel.ranges[0]);
      var changes = this.changes(result1.changes),
        ranges = [result1.range];
      var effects = asArray$1(result1.effects);
      for (var _i27 = 1; _i27 < sel.ranges.length; _i27++) {
        var result = f(sel.ranges[_i27]);
        var newChanges = this.changes(result.changes),
          newMapped = newChanges.map(changes);
        for (var j = 0; j < _i27; j++) ranges[j] = ranges[j].map(newMapped);
        var mapBy = changes.mapDesc(newChanges, true);
        ranges.push(result.range.map(mapBy));
        changes = changes.compose(newMapped);
        effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray$1(result.effects), mapBy));
      }
      return {
        changes: changes,
        selection: EditorSelection.create(ranges, sel.mainIndex),
        effects: effects
      };
    }
    /**
    Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
    description, taking the state's document length and line
    separator into account.
    */
  }, {
    key: "changes",
    value: function changes() {
      var spec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      if (spec instanceof ChangeSet) return spec;
      return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
    }
    /**
    Using the state's [line
    separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
    [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
    */
  }, {
    key: "toText",
    value: function toText(string) {
      return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
    }
    /**
    Return the given range of the document as a string.
    */
  }, {
    key: "sliceDoc",
    value: function sliceDoc() {
      var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.doc.length;
      return this.doc.sliceString(from, to, this.lineBreak);
    }
    /**
    Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
    */
  }, {
    key: "facet",
    value: function facet(_facet) {
      var addr = this.config.address[_facet.id];
      if (addr == null) return _facet["default"];
      ensureAddr(this, addr);
      return getAddr(this, addr);
    }
    /**
    Convert this state to a JSON-serializable object. When custom
    fields should be serialized, you can pass them in as an object
    mapping property names (in the resulting object, which should
    not use `doc` or `selection`) to fields.
    */
  }, {
    key: "toJSON",
    value: function toJSON(fields) {
      var result = {
        doc: this.sliceDoc(),
        selection: this.selection.toJSON()
      };
      if (fields) for (var prop in fields) {
        var value = fields[prop];
        if (value instanceof StateField && this.config.address[value.id] != null) result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
      }
      return result;
    }
    /**
    Deserialize a state from its JSON representation. When custom
    fields should be deserialized, pass the same object you passed
    to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
    third argument.
    */
  }, {
    key: "tabSize",
    get:
    /**
    The size (in columns) of a tab in the document, determined by
    the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
    */
    function get() {
      return this.facet(EditorState.tabSize);
    }
    /**
    Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
    string for this state.
    */
  }, {
    key: "lineBreak",
    get: function get() {
      return this.facet(EditorState.lineSeparator) || "\n";
    }
    /**
    Returns true when the editor is
    [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
    */
  }, {
    key: "readOnly",
    get: function get() {
      return this.facet(readOnly);
    }
    /**
    Look up a translation for the given phrase (via the
    [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
    original string if no translation is found.
    
    If additional arguments are passed, they will be inserted in
    place of markers like `$1` (for the first value) and `$2`, etc.
    A single `$` is equivalent to `$1`, and `$$` will produce a
    literal dollar sign.
    */
  }, {
    key: "phrase",
    value: function phrase(_phrase) {
      for (var _len5 = arguments.length, insert = new Array(_len5 > 1 ? _len5 - 1 : 0), _key2 = 1; _key2 < _len5; _key2++) {
        insert[_key2 - 1] = arguments[_key2];
      }
      var _iterator23 = _createForOfIteratorHelper(this.facet(EditorState.phrases)),
        _step23;
      try {
        for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
          var map = _step23.value;
          if (Object.prototype.hasOwnProperty.call(map, _phrase)) {
            _phrase = map[_phrase];
            break;
          }
        }
      } catch (err) {
        _iterator23.e(err);
      } finally {
        _iterator23.f();
      }
      if (insert.length) _phrase = _phrase.replace(/\$(\$|\d*)/g, function (m, i) {
        if (i == "$") return "$";
        var n = +(i || 1);
        return !n || n > insert.length ? m : insert[n - 1];
      });
      return _phrase;
    }
    /**
    Find the values for a given language data field, provided by the
    the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
    
    Examples of language data fields are...
    
    - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
      comment syntax.
    - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
      for providing language-specific completion sources.
    - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
      characters that should be considered part of words in this
      language.
    - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
      bracket closing behavior.
    */
  }, {
    key: "languageDataAt",
    value: function languageDataAt(name, pos) {
      var side = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
      var values = [];
      var _iterator24 = _createForOfIteratorHelper(this.facet(languageData)),
        _step24;
      try {
        for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
          var provider = _step24.value;
          var _iterator25 = _createForOfIteratorHelper(provider(this, pos, side)),
            _step25;
          try {
            for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
              var result = _step25.value;
              if (Object.prototype.hasOwnProperty.call(result, name)) values.push(result[name]);
            }
          } catch (err) {
            _iterator25.e(err);
          } finally {
            _iterator25.f();
          }
        }
      } catch (err) {
        _iterator24.e(err);
      } finally {
        _iterator24.f();
      }
      return values;
    }
    /**
    Return a function that can categorize strings (expected to
    represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
    into one of:
    
     - Word (contains an alphanumeric character or a character
       explicitly listed in the local language's `"wordChars"`
       language data, which should be a string)
     - Space (contains only whitespace)
     - Other (anything else)
    */
  }, {
    key: "charCategorizer",
    value: function charCategorizer(at) {
      return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
    }
    /**
    Find the word at the given position, meaning the range
    containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
    around it. If no word characters are adjacent to the position,
    this returns null.
    */
  }, {
    key: "wordAt",
    value: function wordAt(pos) {
      var _this$doc$lineAt = this.doc.lineAt(pos),
        text = _this$doc$lineAt.text,
        from = _this$doc$lineAt.from,
        length = _this$doc$lineAt.length;
      var cat = this.charCategorizer(pos);
      var start = pos - from,
        end = pos - from;
      while (start > 0) {
        var prev = findClusterBreak(text, start, false);
        if (cat(text.slice(prev, start)) != CharCategory.Word) break;
        start = prev;
      }
      while (end < length) {
        var next = findClusterBreak(text, end);
        if (cat(text.slice(end, next)) != CharCategory.Word) break;
        end = next;
      }
      return start == end ? null : EditorSelection.range(start + from, end + from);
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON(json) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var fields = arguments.length > 2 ? arguments[2] : undefined;
      if (!json || typeof json.doc != "string") throw new RangeError("Invalid JSON representation for EditorState");
      var fieldInit = [];
      if (fields) {
        var _loop4 = function _loop4() {
          if (Object.prototype.hasOwnProperty.call(json, prop)) {
            var field = fields[prop],
              value = json[prop];
            fieldInit.push(field.init(function (state) {
              return field.spec.fromJSON(value, state);
            }));
          }
        };
        for (var prop in fields) {
          _loop4();
        }
      }
      return EditorState.create({
        doc: json.doc,
        selection: EditorSelection.fromJSON(json.selection),
        extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
      });
    }
    /**
    Create a new state. You'll usually only need this when
    initializing an editor—updated states are created by applying
    transactions.
    */
  }, {
    key: "create",
    value: function create() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var configuration = Configuration.resolve(config.extensions || [], new Map());
      var doc = config.doc instanceof Text ? config.doc : Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
      var selection = !config.selection ? EditorSelection.single(0) : config.selection instanceof EditorSelection ? config.selection : EditorSelection.single(config.selection.anchor, config.selection.head);
      checkSelection(selection, doc.length);
      if (!configuration.staticFacet(allowMultipleSelections)) selection = selection.asSingle();
      return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(function () {
        return null;
      }), function (state, slot) {
        return slot.create(state);
      }, null);
    }
  }]);
  return EditorState;
}();
/**
A facet that, when enabled, causes the editor to allow multiple
ranges to be selected. Be careful though, because by default the
editor relies on the native DOM selection, which cannot handle
multiple selections. An extension like
[`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
secondary selections visible to the user.
*/
EditorState.allowMultipleSelections = allowMultipleSelections;
/**
Configures the tab size to use in this state. The first
(highest-precedence) value of the facet is used. If no value is
given, this defaults to 4.
*/
EditorState.tabSize = /*@__PURE__*/Facet.define({
  combine: function combine(values) {
    return values.length ? values[0] : 4;
  }
});
/**
The line separator to use. By default, any of `"\n"`, `"\r\n"`
and `"\r"` is treated as a separator when splitting lines, and
lines are joined with `"\n"`.

When you configure a value here, only that precise separator
will be used, allowing you to round-trip documents through the
editor without normalizing line separators.
*/
EditorState.lineSeparator = lineSeparator;
/**
This facet controls the value of the
[`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
consulted by commands and extensions that implement editing
functionality to determine whether they should apply. It
defaults to false, but when its highest-precedence value is
`true`, such functionality disables itself.

Not to be confused with
[`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
controls whether the editor's DOM is set to be editable (and
thus focusable).
*/
EditorState.readOnly = readOnly;
/**
Registers translation phrases. The
[`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
all objects registered with this facet to find translations for
its argument.
*/
EditorState.phrases = /*@__PURE__*/Facet.define({
  compare: function compare(a, b) {
    var kA = Object.keys(a),
      kB = Object.keys(b);
    return kA.length == kB.length && kA.every(function (k) {
      return a[k] == b[k];
    });
  }
});
/**
A facet used to register [language
data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
*/
EditorState.languageData = languageData;
/**
Facet used to register change filters, which are called for each
transaction (unless explicitly
[disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
part of the transaction's changes.

Such a function can return `true` to indicate that it doesn't
want to do anything, `false` to completely stop the changes in
the transaction, or a set of ranges in which changes should be
suppressed. Such ranges are represented as an array of numbers,
with each pair of two numbers indicating the start and end of a
range. So for example `[10, 20, 100, 110]` suppresses changes
between 10 and 20, and between 100 and 110.
*/
EditorState.changeFilter = changeFilter;
/**
Facet used to register a hook that gets a chance to update or
replace transaction specs before they are applied. This will
only be applied for transactions that don't have
[`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
can either return a single transaction spec (possibly the input
transaction), or an array of specs (which will be combined in
the same way as the arguments to
[`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).

When possible, it is recommended to avoid accessing
[`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
since it will force creation of a state that will then be
discarded again, if the transaction is actually filtered.

(This functionality should be used with care. Indiscriminately
modifying transaction is likely to break something or degrade
the user experience.)
*/
EditorState.transactionFilter = transactionFilter;
/**
This is a more limited form of
[`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
which can only add
[annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
[effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
of filter runs even if the transaction has disabled regular
[filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
for effects that don't need to touch the changes or selection,
but do want to process every transaction.

Extenders run _after_ filters, when both are present.
*/
EditorState.transactionExtender = transactionExtender;
Compartment.reconfigure = /*@__PURE__*/StateEffect.define();

/**
Utility function for combining behaviors to fill in a config
object from an array of provided configs. `defaults` should hold
default values for all optional fields in `Config`.

The function will, by default, error
when a field gets two values that aren't `===`-equal, but you can
provide combine functions per field to do something else.
*/
function combineConfig(configs, defaults) {
  var combine = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var result = {};
  var _iterator26 = _createForOfIteratorHelper(configs),
    _step26;
  try {
    for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
      var config = _step26.value;
      for (var _i28 = 0, _Object$keys = Object.keys(config); _i28 < _Object$keys.length; _i28++) {
        var _key3 = _Object$keys[_i28];
        var value = config[_key3],
          current = result[_key3];
        if (current === undefined) result[_key3] = value;else if (current === value || value === undefined) ; // No conflict
        else if (Object.hasOwnProperty.call(combine, _key3)) result[_key3] = combine[_key3](current, value);else throw new Error("Config merge conflict for field " + _key3);
      }
    }
  } catch (err) {
    _iterator26.e(err);
  } finally {
    _iterator26.f();
  }
  for (var key in defaults) if (result[key] === undefined) result[key] = defaults[key];
  return result;
}

/**
Each range is associated with a value, which must inherit from
this class.
*/
var RangeValue = /*#__PURE__*/function () {
  function RangeValue() {
    _classCallCheck(this, RangeValue);
  }
  _createClass(RangeValue, [{
    key: "eq",
    value:
    /**
    Compare this value with another value. Used when comparing
    rangesets. The default implementation compares by identity.
    Unless you are only creating a fixed number of unique instances
    of your value type, it is a good idea to implement this
    properly.
    */
    function eq(other) {
      return this == other;
    }
    /**
    Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
    */
  }, {
    key: "range",
    value: function range(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
      return Range$1.create(from, to, this);
    }
  }]);
  return RangeValue;
}();
RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
RangeValue.prototype.point = false;
RangeValue.prototype.mapMode = MapMode.TrackDel;
/**
A range associates a value with a range of positions.
*/
var Range$1 = /*#__PURE__*/function () {
  function Range(
  /**
  The range's start position.
  */
  from,
  /**
  Its end position.
  */
  to,
  /**
  The value associated with this range.
  */
  value) {
    _classCallCheck(this, Range);
    this.from = from;
    this.to = to;
    this.value = value;
  }
  /**
  @internal
  */
  _createClass(Range, null, [{
    key: "create",
    value: function create(from, to, value) {
      return new Range(from, to, value);
    }
  }]);
  return Range;
}();
function cmpRange(a, b) {
  return a.from - b.from || a.value.startSide - b.value.startSide;
}
var Chunk = /*#__PURE__*/function () {
  function Chunk(from, to, value,
  // Chunks are marked with the largest point that occurs
  // in them (or -1 for no points), so that scans that are
  // only interested in points (such as the
  // heightmap-related logic) can skip range-only chunks.
  maxPoint) {
    _classCallCheck(this, Chunk);
    this.from = from;
    this.to = to;
    this.value = value;
    this.maxPoint = maxPoint;
  }
  _createClass(Chunk, [{
    key: "length",
    get: function get() {
      return this.to[this.to.length - 1];
    }
    // Find the index of the given position and side. Use the ranges'
    // `from` pos when `end == false`, `to` when `end == true`.
  }, {
    key: "findIndex",
    value: function findIndex(pos, side, end) {
      var startAt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var arr = end ? this.to : this.from;
      for (var lo = startAt, hi = arr.length;;) {
        if (lo == hi) return lo;
        var mid = lo + hi >> 1;
        var diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
        if (mid == lo) return diff >= 0 ? lo : hi;
        if (diff >= 0) hi = mid;else lo = mid + 1;
      }
    }
  }, {
    key: "between",
    value: function between(offset, from, to, f) {
      for (var _i29 = this.findIndex(from, -1000000000 /* C.Far */, true), e = this.findIndex(to, 1000000000 /* C.Far */, false, _i29); _i29 < e; _i29++) if (f(this.from[_i29] + offset, this.to[_i29] + offset, this.value[_i29]) === false) return false;
    }
  }, {
    key: "map",
    value: function map(offset, changes) {
      var value = [],
        from = [],
        to = [],
        newPos = -1,
        maxPoint = -1;
      for (var _i30 = 0; _i30 < this.value.length; _i30++) {
        var val = this.value[_i30],
          curFrom = this.from[_i30] + offset,
          curTo = this.to[_i30] + offset,
          newFrom = void 0,
          newTo = void 0;
        if (curFrom == curTo) {
          var mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
          if (mapped == null) continue;
          newFrom = newTo = mapped;
          if (val.startSide != val.endSide) {
            newTo = changes.mapPos(curFrom, val.endSide);
            if (newTo < newFrom) continue;
          }
        } else {
          newFrom = changes.mapPos(curFrom, val.startSide);
          newTo = changes.mapPos(curTo, val.endSide);
          if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0) continue;
        }
        if ((newTo - newFrom || val.endSide - val.startSide) < 0) continue;
        if (newPos < 0) newPos = newFrom;
        if (val.point) maxPoint = Math.max(maxPoint, newTo - newFrom);
        value.push(val);
        from.push(newFrom - newPos);
        to.push(newTo - newPos);
      }
      return {
        mapped: value.length ? new Chunk(from, to, value, maxPoint) : null,
        pos: newPos
      };
    }
  }]);
  return Chunk;
}();
/**
A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a
way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and
[update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data
structure.
*/
var RangeSet = /*#__PURE__*/function () {
  function RangeSet(
  /**
  @internal
  */
  chunkPos,
  /**
  @internal
  */
  chunk,
  /**
  @internal
  */
  nextLayer,
  /**
  @internal
  */
  maxPoint) {
    _classCallCheck(this, RangeSet);
    this.chunkPos = chunkPos;
    this.chunk = chunk;
    this.nextLayer = nextLayer;
    this.maxPoint = maxPoint;
  }
  /**
  @internal
  */
  _createClass(RangeSet, [{
    key: "length",
    get:
    /**
    @internal
    */
    function get() {
      var last = this.chunk.length - 1;
      return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
    }
    /**
    The number of ranges in the set.
    */
  }, {
    key: "size",
    get: function get() {
      if (this.isEmpty) return 0;
      var size = this.nextLayer.size;
      var _iterator27 = _createForOfIteratorHelper(this.chunk),
        _step27;
      try {
        for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
          var chunk = _step27.value;
          size += chunk.value.length;
        }
      } catch (err) {
        _iterator27.e(err);
      } finally {
        _iterator27.f();
      }
      return size;
    }
    /**
    @internal
    */
  }, {
    key: "chunkEnd",
    value: function chunkEnd(index) {
      return this.chunkPos[index] + this.chunk[index].length;
    }
    /**
    Update the range set, optionally adding new ranges or filtering
    out existing ones.
    
    (Note: The type parameter is just there as a kludge to work
    around TypeScript variance issues that prevented `RangeSet<X>`
    from being a subtype of `RangeSet<Y>` when `X` is a subtype of
    `Y`.)
    */
  }, {
    key: "update",
    value: function update(updateSpec) {
      var _updateSpec$add = updateSpec.add,
        add = _updateSpec$add === void 0 ? [] : _updateSpec$add,
        _updateSpec$sort = updateSpec.sort,
        sort = _updateSpec$sort === void 0 ? false : _updateSpec$sort,
        _updateSpec$filterFro = updateSpec.filterFrom,
        filterFrom = _updateSpec$filterFro === void 0 ? 0 : _updateSpec$filterFro,
        _updateSpec$filterTo = updateSpec.filterTo,
        filterTo = _updateSpec$filterTo === void 0 ? this.length : _updateSpec$filterTo;
      var filter = updateSpec.filter;
      if (add.length == 0 && !filter) return this;
      if (sort) add = add.slice().sort(cmpRange);
      if (this.isEmpty) return add.length ? RangeSet.of(add) : this;
      var cur = new LayerCursor(this, null, -1)["goto"](0),
        i = 0,
        spill = [];
      var builder = new RangeSetBuilder();
      while (cur.value || i < add.length) {
        if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
          var range = add[i++];
          if (!builder.addInner(range.from, range.to, range.value)) spill.push(range);
        } else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length && (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) && (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) && builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
          cur.nextChunk();
        } else {
          if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
            if (!builder.addInner(cur.from, cur.to, cur.value)) spill.push(Range$1.create(cur.from, cur.to, cur.value));
          }
          cur.next();
        }
      }
      return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty : this.nextLayer.update({
        add: spill,
        filter: filter,
        filterFrom: filterFrom,
        filterTo: filterTo
      }));
    }
    /**
    Map this range set through a set of changes, return the new set.
    */
  }, {
    key: "map",
    value: function map(changes) {
      if (changes.empty || this.isEmpty) return this;
      var chunks = [],
        chunkPos = [],
        maxPoint = -1;
      for (var _i31 = 0; _i31 < this.chunk.length; _i31++) {
        var start = this.chunkPos[_i31],
          chunk = this.chunk[_i31];
        var touch = changes.touchesRange(start, start + chunk.length);
        if (touch === false) {
          maxPoint = Math.max(maxPoint, chunk.maxPoint);
          chunks.push(chunk);
          chunkPos.push(changes.mapPos(start));
        } else if (touch === true) {
          var _chunk$map = chunk.map(start, changes),
            mapped = _chunk$map.mapped,
            pos = _chunk$map.pos;
          if (mapped) {
            maxPoint = Math.max(maxPoint, mapped.maxPoint);
            chunks.push(mapped);
            chunkPos.push(pos);
          }
        }
      }
      var next = this.nextLayer.map(changes);
      return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);
    }
    /**
    Iterate over the ranges that touch the region `from` to `to`,
    calling `f` for each. There is no guarantee that the ranges will
    be reported in any specific order. When the callback returns
    `false`, iteration stops.
    */
  }, {
    key: "between",
    value: function between(from, to, f) {
      if (this.isEmpty) return;
      for (var _i32 = 0; _i32 < this.chunk.length; _i32++) {
        var start = this.chunkPos[_i32],
          chunk = this.chunk[_i32];
        if (to >= start && from <= start + chunk.length && chunk.between(start, from - start, to - start, f) === false) return;
      }
      this.nextLayer.between(from, to, f);
    }
    /**
    Iterate over the ranges in this set, in order, including all
    ranges that end at or after `from`.
    */
  }, {
    key: "iter",
    value: function iter() {
      var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      return HeapCursor.from([this])["goto"](from);
    }
    /**
    @internal
    */
  }, {
    key: "isEmpty",
    get: function get() {
      return this.nextLayer == this;
    }
    /**
    Iterate over the ranges in a collection of sets, in order,
    starting from `from`.
    */
  }], [{
    key: "create",
    value: function create(chunkPos, chunk, nextLayer, maxPoint) {
      return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);
    }
  }, {
    key: "iter",
    value: function iter(sets) {
      var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return HeapCursor.from(sets)["goto"](from);
    }
    /**
    Iterate over two groups of sets, calling methods on `comparator`
    to notify it of possible differences.
    */
  }, {
    key: "compare",
    value: function compare(oldSets, newSets,
    /**
    This indicates how the underlying data changed between these
    ranges, and is needed to synchronize the iteration.
    */
    textDiff, comparator) {
      var minPointSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;
      var a = oldSets.filter(function (set) {
        return set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize;
      });
      var b = newSets.filter(function (set) {
        return set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize;
      });
      var sharedChunks = findSharedChunks(a, b, textDiff);
      var sideA = new SpanCursor(a, sharedChunks, minPointSize);
      var sideB = new SpanCursor(b, sharedChunks, minPointSize);
      textDiff.iterGaps(function (fromA, fromB, length) {
        return _compare(sideA, fromA, sideB, fromB, length, comparator);
      });
      if (textDiff.empty && textDiff.length == 0) _compare(sideA, 0, sideB, 0, 0, comparator);
    }
    /**
    Compare the contents of two groups of range sets, returning true
    if they are equivalent in the given range.
    */
  }, {
    key: "eq",
    value: function eq(oldSets, newSets) {
      var from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var to = arguments.length > 3 ? arguments[3] : undefined;
      if (to == null) to = 1000000000 /* C.Far */ - 1;
      var a = oldSets.filter(function (set) {
        return !set.isEmpty && newSets.indexOf(set) < 0;
      });
      var b = newSets.filter(function (set) {
        return !set.isEmpty && oldSets.indexOf(set) < 0;
      });
      if (a.length != b.length) return false;
      if (!a.length) return true;
      var sharedChunks = findSharedChunks(a, b);
      var sideA = new SpanCursor(a, sharedChunks, 0)["goto"](from),
        sideB = new SpanCursor(b, sharedChunks, 0)["goto"](from);
      for (;;) {
        if (sideA.to != sideB.to || !sameValues(sideA.active, sideB.active) || sideA.point && (!sideB.point || !sideA.point.eq(sideB.point))) return false;
        if (sideA.to > to) return true;
        sideA.next();
        sideB.next();
      }
    }
    /**
    Iterate over a group of range sets at the same time, notifying
    the iterator about the ranges covering every given piece of
    content. Returns the open count (see
    [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
    of the iteration.
    */
  }, {
    key: "spans",
    value: function spans(sets, from, to, iterator) {
      var minPointSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;
      var cursor = new SpanCursor(sets, null, minPointSize)["goto"](from),
        pos = from;
      var openRanges = cursor.openStart;
      for (;;) {
        var curTo = Math.min(cursor.to, to);
        if (cursor.point) {
          var active = cursor.activeForPoint(cursor.to);
          var openCount = cursor.pointFrom < from ? active.length + 1 : Math.min(active.length, openRanges);
          iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
          openRanges = Math.min(cursor.openEnd(curTo), active.length);
        } else if (curTo > pos) {
          iterator.span(pos, curTo, cursor.active, openRanges);
          openRanges = cursor.openEnd(curTo);
        }
        if (cursor.to > to) return openRanges + (cursor.point && cursor.to > to ? 1 : 0);
        pos = cursor.to;
        cursor.next();
      }
    }
    /**
    Create a range set for the given range or array of ranges. By
    default, this expects the ranges to be _sorted_ (by start
    position and, if two start at the same position,
    `value.startSide`). You can pass `true` as second argument to
    cause the method to sort them.
    */
  }, {
    key: "of",
    value: function of(ranges) {
      var sort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var build = new RangeSetBuilder();
      var _iterator28 = _createForOfIteratorHelper(ranges instanceof Range$1 ? [ranges] : sort ? lazySort(ranges) : ranges),
        _step28;
      try {
        for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
          var range = _step28.value;
          build.add(range.from, range.to, range.value);
        }
      } catch (err) {
        _iterator28.e(err);
      } finally {
        _iterator28.f();
      }
      return build.finish();
    }
  }]);
  return RangeSet;
}();
/**
The empty set of ranges.
*/
RangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);
function lazySort(ranges) {
  if (ranges.length > 1) for (var prev = ranges[0], _i33 = 1; _i33 < ranges.length; _i33++) {
    var cur = ranges[_i33];
    if (cmpRange(prev, cur) > 0) return ranges.slice().sort(cmpRange);
    prev = cur;
  }
  return ranges;
}
RangeSet.empty.nextLayer = RangeSet.empty;
/**
A range set builder is a data structure that helps build up a
[range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating
an array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.
*/
var RangeSetBuilder = /*#__PURE__*/function () {
  /**
  Create an empty builder.
  */
  function RangeSetBuilder() {
    _classCallCheck(this, RangeSetBuilder);
    this.chunks = [];
    this.chunkPos = [];
    this.chunkStart = -1;
    this.last = null;
    this.lastFrom = -1000000000 /* C.Far */;
    this.lastTo = -1000000000 /* C.Far */;
    this.from = [];
    this.to = [];
    this.value = [];
    this.maxPoint = -1;
    this.setMaxPoint = -1;
    this.nextLayer = null;
  }
  /**
  Add a range. Ranges should be added in sorted (by `from` and
  `value.startSide`) order.
  */
  _createClass(RangeSetBuilder, [{
    key: "finishChunk",
    value: function finishChunk(newArrays) {
      this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
      this.chunkPos.push(this.chunkStart);
      this.chunkStart = -1;
      this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
      this.maxPoint = -1;
      if (newArrays) {
        this.from = [];
        this.to = [];
        this.value = [];
      }
    }
  }, {
    key: "add",
    value: function add(from, to, value) {
      if (!this.addInner(from, to, value)) (this.nextLayer || (this.nextLayer = new RangeSetBuilder())).add(from, to, value);
    }
    /**
    @internal
    */
  }, {
    key: "addInner",
    value: function addInner(from, to, value) {
      var diff = from - this.lastTo || value.startSide - this.last.endSide;
      if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0) throw new Error("Ranges must be added sorted by `from` position and `startSide`");
      if (diff < 0) return false;
      if (this.from.length == 250 /* C.ChunkSize */) this.finishChunk(true);
      if (this.chunkStart < 0) this.chunkStart = from;
      this.from.push(from - this.chunkStart);
      this.to.push(to - this.chunkStart);
      this.last = value;
      this.lastFrom = from;
      this.lastTo = to;
      this.value.push(value);
      if (value.point) this.maxPoint = Math.max(this.maxPoint, to - from);
      return true;
    }
    /**
    @internal
    */
  }, {
    key: "addChunk",
    value: function addChunk(from, chunk) {
      if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0) return false;
      if (this.from.length) this.finishChunk(true);
      this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
      this.chunks.push(chunk);
      this.chunkPos.push(from);
      var last = chunk.value.length - 1;
      this.last = chunk.value[last];
      this.lastFrom = chunk.from[last] + from;
      this.lastTo = chunk.to[last] + from;
      return true;
    }
    /**
    Finish the range set. Returns the new set. The builder can't be
    used anymore after this has been called.
    */
  }, {
    key: "finish",
    value: function finish() {
      return this.finishInner(RangeSet.empty);
    }
    /**
    @internal
    */
  }, {
    key: "finishInner",
    value: function finishInner(next) {
      if (this.from.length) this.finishChunk(false);
      if (this.chunks.length == 0) return next;
      var result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
      this.from = null; // Make sure further `add` calls produce errors
      return result;
    }
  }]);
  return RangeSetBuilder;
}();
function findSharedChunks(a, b, textDiff) {
  var inA = new Map();
  var _iterator29 = _createForOfIteratorHelper(a),
    _step29;
  try {
    for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
      var set = _step29.value;
      for (var _i34 = 0; _i34 < set.chunk.length; _i34++) if (set.chunk[_i34].maxPoint <= 0) inA.set(set.chunk[_i34], set.chunkPos[_i34]);
    }
  } catch (err) {
    _iterator29.e(err);
  } finally {
    _iterator29.f();
  }
  var shared = new Set();
  var _iterator30 = _createForOfIteratorHelper(b),
    _step30;
  try {
    for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
      var _set = _step30.value;
      for (var _i35 = 0; _i35 < _set.chunk.length; _i35++) {
        var known = inA.get(_set.chunk[_i35]);
        if (known != null && (textDiff ? textDiff.mapPos(known) : known) == _set.chunkPos[_i35] && !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + _set.chunk[_i35].length))) shared.add(_set.chunk[_i35]);
      }
    }
  } catch (err) {
    _iterator30.e(err);
  } finally {
    _iterator30.f();
  }
  return shared;
}
var LayerCursor = /*#__PURE__*/function () {
  function LayerCursor(layer, skip, minPoint) {
    var rank = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    _classCallCheck(this, LayerCursor);
    this.layer = layer;
    this.skip = skip;
    this.minPoint = minPoint;
    this.rank = rank;
  }
  _createClass(LayerCursor, [{
    key: "startSide",
    get: function get() {
      return this.value ? this.value.startSide : 0;
    }
  }, {
    key: "endSide",
    get: function get() {
      return this.value ? this.value.endSide : 0;
    }
  }, {
    key: "goto",
    value: function goto(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1000000000;
      this.chunkIndex = this.rangeIndex = 0;
      this.gotoInner(pos, side, false);
      return this;
    }
  }, {
    key: "gotoInner",
    value: function gotoInner(pos, side, forward) {
      while (this.chunkIndex < this.layer.chunk.length) {
        var next = this.layer.chunk[this.chunkIndex];
        if (!(this.skip && this.skip.has(next) || this.layer.chunkEnd(this.chunkIndex) < pos || next.maxPoint < this.minPoint)) break;
        this.chunkIndex++;
        forward = false;
      }
      if (this.chunkIndex < this.layer.chunk.length) {
        var rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
        if (!forward || this.rangeIndex < rangeIndex) this.setRangeIndex(rangeIndex);
      }
      this.next();
    }
  }, {
    key: "forward",
    value: function forward(pos, side) {
      if ((this.to - pos || this.endSide - side) < 0) this.gotoInner(pos, side, true);
    }
  }, {
    key: "next",
    value: function next() {
      for (;;) {
        if (this.chunkIndex == this.layer.chunk.length) {
          this.from = this.to = 1000000000 /* C.Far */;
          this.value = null;
          break;
        } else {
          var chunkPos = this.layer.chunkPos[this.chunkIndex],
            chunk = this.layer.chunk[this.chunkIndex];
          var from = chunkPos + chunk.from[this.rangeIndex];
          this.from = from;
          this.to = chunkPos + chunk.to[this.rangeIndex];
          this.value = chunk.value[this.rangeIndex];
          this.setRangeIndex(this.rangeIndex + 1);
          if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint) break;
        }
      }
    }
  }, {
    key: "setRangeIndex",
    value: function setRangeIndex(index) {
      if (index == this.layer.chunk[this.chunkIndex].value.length) {
        this.chunkIndex++;
        if (this.skip) {
          while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex])) this.chunkIndex++;
        }
        this.rangeIndex = 0;
      } else {
        this.rangeIndex = index;
      }
    }
  }, {
    key: "nextChunk",
    value: function nextChunk() {
      this.chunkIndex++;
      this.rangeIndex = 0;
      this.next();
    }
  }, {
    key: "compare",
    value: function compare(other) {
      return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank || this.to - other.to || this.endSide - other.endSide;
    }
  }]);
  return LayerCursor;
}();
var HeapCursor = /*#__PURE__*/function () {
  function HeapCursor(heap) {
    _classCallCheck(this, HeapCursor);
    this.heap = heap;
  }
  _createClass(HeapCursor, [{
    key: "startSide",
    get: function get() {
      return this.value ? this.value.startSide : 0;
    }
  }, {
    key: "goto",
    value: function goto(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1000000000;
      var _iterator31 = _createForOfIteratorHelper(this.heap),
        _step31;
      try {
        for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
          var cur = _step31.value;
          cur["goto"](pos, side);
        }
      } catch (err) {
        _iterator31.e(err);
      } finally {
        _iterator31.f();
      }
      for (var _i36 = this.heap.length >> 1; _i36 >= 0; _i36--) heapBubble(this.heap, _i36);
      this.next();
      return this;
    }
  }, {
    key: "forward",
    value: function forward(pos, side) {
      var _iterator32 = _createForOfIteratorHelper(this.heap),
        _step32;
      try {
        for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
          var cur = _step32.value;
          cur.forward(pos, side);
        }
      } catch (err) {
        _iterator32.e(err);
      } finally {
        _iterator32.f();
      }
      for (var _i37 = this.heap.length >> 1; _i37 >= 0; _i37--) heapBubble(this.heap, _i37);
      if ((this.to - pos || this.value.endSide - side) < 0) this.next();
    }
  }, {
    key: "next",
    value: function next() {
      if (this.heap.length == 0) {
        this.from = this.to = 1000000000 /* C.Far */;
        this.value = null;
        this.rank = -1;
      } else {
        var top = this.heap[0];
        this.from = top.from;
        this.to = top.to;
        this.value = top.value;
        this.rank = top.rank;
        if (top.value) top.next();
        heapBubble(this.heap, 0);
      }
    }
  }], [{
    key: "from",
    value: function from(sets) {
      var skip = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var minPoint = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
      var heap = [];
      for (var _i38 = 0; _i38 < sets.length; _i38++) {
        for (var cur = sets[_i38]; !cur.isEmpty; cur = cur.nextLayer) {
          if (cur.maxPoint >= minPoint) heap.push(new LayerCursor(cur, skip, minPoint, _i38));
        }
      }
      return heap.length == 1 ? heap[0] : new HeapCursor(heap);
    }
  }]);
  return HeapCursor;
}();
function heapBubble(heap, index) {
  for (var cur = heap[index];;) {
    var childIndex = (index << 1) + 1;
    if (childIndex >= heap.length) break;
    var child = heap[childIndex];
    if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
      child = heap[childIndex + 1];
      childIndex++;
    }
    if (cur.compare(child) < 0) break;
    heap[childIndex] = cur;
    heap[index] = child;
    index = childIndex;
  }
}
var SpanCursor = /*#__PURE__*/function () {
  function SpanCursor(sets, skip, minPoint) {
    _classCallCheck(this, SpanCursor);
    this.minPoint = minPoint;
    this.active = [];
    this.activeTo = [];
    this.activeRank = [];
    this.minActive = -1;
    // A currently active point range, if any
    this.point = null;
    this.pointFrom = 0;
    this.pointRank = 0;
    this.to = -1000000000 /* C.Far */;
    this.endSide = 0;
    // The amount of open active ranges at the start of the iterator.
    // Not including points.
    this.openStart = -1;
    this.cursor = HeapCursor.from(sets, skip, minPoint);
  }
  _createClass(SpanCursor, [{
    key: "goto",
    value: function goto(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1000000000;
      this.cursor["goto"](pos, side);
      this.active.length = this.activeTo.length = this.activeRank.length = 0;
      this.minActive = -1;
      this.to = pos;
      this.endSide = side;
      this.openStart = -1;
      this.next();
      return this;
    }
  }, {
    key: "forward",
    value: function forward(pos, side) {
      while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0) this.removeActive(this.minActive);
      this.cursor.forward(pos, side);
    }
  }, {
    key: "removeActive",
    value: function removeActive(index) {
      remove(this.active, index);
      remove(this.activeTo, index);
      remove(this.activeRank, index);
      this.minActive = findMinIndex(this.active, this.activeTo);
    }
  }, {
    key: "addActive",
    value: function addActive(trackOpen) {
      var i = 0,
        _this$cursor = this.cursor,
        value = _this$cursor.value,
        to = _this$cursor.to,
        rank = _this$cursor.rank;
      while (i < this.activeRank.length && this.activeRank[i] <= rank) i++;
      insert(this.active, i, value);
      insert(this.activeTo, i, to);
      insert(this.activeRank, i, rank);
      if (trackOpen) insert(trackOpen, i, this.cursor.from);
      this.minActive = findMinIndex(this.active, this.activeTo);
    }
    // After calling this, if `this.point` != null, the next range is a
    // point. Otherwise, it's a regular range, covered by `this.active`.
  }, {
    key: "next",
    value: function next() {
      var from = this.to,
        wasPoint = this.point;
      this.point = null;
      var trackOpen = this.openStart < 0 ? [] : null;
      for (;;) {
        var a = this.minActive;
        if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
          if (this.activeTo[a] > from) {
            this.to = this.activeTo[a];
            this.endSide = this.active[a].endSide;
            break;
          }
          this.removeActive(a);
          if (trackOpen) remove(trackOpen, a);
        } else if (!this.cursor.value) {
          this.to = this.endSide = 1000000000 /* C.Far */;
          break;
        } else if (this.cursor.from > from) {
          this.to = this.cursor.from;
          this.endSide = this.cursor.startSide;
          break;
        } else {
          var nextVal = this.cursor.value;
          if (!nextVal.point) {
            // Opening a range
            this.addActive(trackOpen);
            this.cursor.next();
          } else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
            // Ignore any non-empty points that end precisely at the end of the prev point
            this.cursor.next();
          } else {
            // New point
            this.point = nextVal;
            this.pointFrom = this.cursor.from;
            this.pointRank = this.cursor.rank;
            this.to = this.cursor.to;
            this.endSide = nextVal.endSide;
            this.cursor.next();
            this.forward(this.to, this.endSide);
            break;
          }
        }
      }
      if (trackOpen) {
        this.openStart = 0;
        for (var _i39 = trackOpen.length - 1; _i39 >= 0 && trackOpen[_i39] < from; _i39--) this.openStart++;
      }
    }
  }, {
    key: "activeForPoint",
    value: function activeForPoint(to) {
      if (!this.active.length) return this.active;
      var active = [];
      for (var _i40 = this.active.length - 1; _i40 >= 0; _i40--) {
        if (this.activeRank[_i40] < this.pointRank) break;
        if (this.activeTo[_i40] > to || this.activeTo[_i40] == to && this.active[_i40].endSide >= this.point.endSide) active.push(this.active[_i40]);
      }
      return active.reverse();
    }
  }, {
    key: "openEnd",
    value: function openEnd(to) {
      var open = 0;
      for (var _i41 = this.activeTo.length - 1; _i41 >= 0 && this.activeTo[_i41] > to; _i41--) open++;
      return open;
    }
  }]);
  return SpanCursor;
}();
function _compare(a, startA, b, startB, length, comparator) {
  a["goto"](startA);
  b["goto"](startB);
  var endB = startB + length;
  var pos = startB,
    dPos = startB - startA;
  for (;;) {
    var diff = a.to + dPos - b.to || a.endSide - b.endSide;
    var end = diff < 0 ? a.to + dPos : b.to,
      clipEnd = Math.min(end, endB);
    if (a.point || b.point) {
      if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) && sameValues(a.activeForPoint(a.to), b.activeForPoint(b.to)))) comparator.comparePoint(pos, clipEnd, a.point, b.point);
    } else {
      if (clipEnd > pos && !sameValues(a.active, b.active)) comparator.compareRange(pos, clipEnd, a.active, b.active);
    }
    if (end > endB) break;
    pos = end;
    if (diff <= 0) a.next();
    if (diff >= 0) b.next();
  }
}
function sameValues(a, b) {
  if (a.length != b.length) return false;
  for (var _i42 = 0; _i42 < a.length; _i42++) if (a[_i42] != b[_i42] && !a[_i42].eq(b[_i42])) return false;
  return true;
}
function remove(array, index) {
  for (var _i43 = index, e = array.length - 1; _i43 < e; _i43++) array[_i43] = array[_i43 + 1];
  array.pop();
}
function insert(array, index, value) {
  for (var _i44 = array.length - 1; _i44 >= index; _i44--) array[_i44 + 1] = array[_i44];
  array[index] = value;
}
function findMinIndex(value, array) {
  var found = -1,
    foundPos = 1000000000 /* C.Far */;
  for (var _i45 = 0; _i45 < array.length; _i45++) if ((array[_i45] - foundPos || value[_i45].endSide - value[found].endSide) < 0) {
    found = _i45;
    foundPos = array[_i45];
  }
  return found;
}

/**
Count the column position at the given offset into the string,
taking extending characters and tab size into account.
*/
function countColumn(string, tabSize) {
  var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : string.length;
  var n = 0;
  for (var _i46 = 0; _i46 < to;) {
    if (string.charCodeAt(_i46) == 9) {
      n += tabSize - n % tabSize;
      _i46++;
    } else {
      n++;
      _i46 = findClusterBreak(string, _i46);
    }
  }
  return n;
}
/**
Find the offset that corresponds to the given column position in a
string, taking extending characters and tab size into account. By
default, the string length is returned when it is too short to
reach the column. Pass `strict` true to make it return -1 in that
situation.
*/
function findColumn(string, col, tabSize, strict) {
  for (var _i47 = 0, n = 0;;) {
    if (n >= col) return _i47;
    if (_i47 == string.length) break;
    n += string.charCodeAt(_i47) == 9 ? tabSize - n % tabSize : 1;
    _i47 = findClusterBreak(string, _i47);
  }
  return strict === true ? -1 : string.length;
}

var C = "\u037C";
var COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol["for"](C);
var SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
var top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};

// :: - Style modules encapsulate a set of CSS rules defined from
// JavaScript. Their definitions are only available in a given DOM
// root after it has been _mounted_ there with `StyleModule.mount`.
//
// Style modules should be created once and stored somewhere, as
// opposed to re-creating them every time you need them. The amount of
// CSS rules generated for a given DOM root is bounded by the amount
// of style modules that were used. So to avoid leaking rules, don't
// create these dynamically, but treat them as one-time allocations.
var StyleModule = /*#__PURE__*/function () {
  // :: (Object<Style>, ?{finish: ?(string) → string})
  // Create a style module from the given spec.
  //
  // When `finish` is given, it is called on regular (non-`@`)
  // selectors (after `&` expansion) to compute the final selector.
  function StyleModule(spec, options) {
    _classCallCheck(this, StyleModule);
    this.rules = [];
    var _ref = options || {},
      finish = _ref.finish;
    function splitSelector(selector) {
      return /^@/.test(selector) ? [selector] : selector.split(/,\s*/);
    }
    function render(selectors, spec, target, isKeyframes) {
      var local = [],
        isAt = /^@(\w+)\b/.exec(selectors[0]),
        keyframes = isAt && isAt[1] == "keyframes";
      if (isAt && spec == null) return target.push(selectors[0] + ";");
      for (var prop in spec) {
        var value = spec[prop];
        if (/&/.test(prop)) {
          render(prop.split(/,\s*/).map(function (part) {
            return selectors.map(function (sel) {
              return part.replace(/&/, sel);
            });
          }).reduce(function (a, b) {
            return a.concat(b);
          }), value, target);
        } else if (value && _typeof(value) == "object") {
          if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.");
          render(splitSelector(prop), value, local, keyframes);
        } else if (value != null) {
          local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, function (l) {
            return "-" + l.toLowerCase();
          }) + ": " + value + ";");
        }
      }
      if (local.length || keyframes) {
        target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") + " {" + local.join(" ") + "}");
      }
    }
    for (var prop in spec) render(splitSelector(prop), spec[prop], this.rules);
  }

  // :: () → string
  // Returns a string containing the module's CSS rules.
  _createClass(StyleModule, [{
    key: "getRules",
    value: function getRules() {
      return this.rules.join("\n");
    }

    // :: () → string
    // Generate a new unique CSS class name.
  }], [{
    key: "newName",
    value: function newName() {
      var id = top[COUNT] || 1;
      top[COUNT] = id + 1;
      return C + id.toString(36);
    }

    // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)
    //
    // Mount the given set of modules in the given DOM root, which ensures
    // that the CSS rules defined by the module are available in that
    // context.
    //
    // Rules are only added to the document once per root.
    //
    // Rule order will follow the order of the modules, so that rules from
    // modules later in the array take precedence of those from earlier
    // modules. If you call this function multiple times for the same root
    // in a way that changes the order of already mounted modules, the old
    // order will be changed.
  }, {
    key: "mount",
    value: function mount(root, modules) {
      (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules]);
    }
  }]);
  return StyleModule;
}();
var adoptedSet = new Map(); //<Document, StyleSet>
var StyleSet = /*#__PURE__*/function () {
  function StyleSet(root) {
    _classCallCheck(this, StyleSet);
    var doc = root.ownerDocument || root,
      win = doc.defaultView;
    if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {
      var adopted = adoptedSet.get(doc);
      if (adopted) {
        root.adoptedStyleSheets = [adopted.sheet].concat(_toConsumableArray(root.adoptedStyleSheets));
        return root[SET] = adopted;
      }
      this.sheet = new win.CSSStyleSheet();
      root.adoptedStyleSheets = [this.sheet].concat(_toConsumableArray(root.adoptedStyleSheets));
      adoptedSet.set(doc, this);
    } else {
      this.styleTag = doc.createElement("style");
      var target = root.head || root;
      target.insertBefore(this.styleTag, target.firstChild);
    }
    this.modules = [];
    root[SET] = this;
  }
  _createClass(StyleSet, [{
    key: "mount",
    value: function mount(modules) {
      var sheet = this.sheet;
      var pos = 0 /* Current rule offset */,
        j = 0; /* Index into this.modules */
      for (var i = 0; i < modules.length; i++) {
        var mod = modules[i],
          index = this.modules.indexOf(mod);
        if (index < j && index > -1) {
          // Ordering conflict
          this.modules.splice(index, 1);
          j--;
          index = -1;
        }
        if (index == -1) {
          this.modules.splice(j++, 0, mod);
          if (sheet) for (var k = 0; k < mod.rules.length; k++) sheet.insertRule(mod.rules[k], pos++);
        } else {
          while (j < index) pos += this.modules[j++].rules.length;
          pos += mod.rules.length;
          j++;
        }
      }
      if (!sheet) {
        var text = "";
        for (var _i = 0; _i < this.modules.length; _i++) text += this.modules[_i].getRules() + "\n";
        this.styleTag.textContent = text;
      }
    }
  }]);
  return StyleSet;
}(); // Style::Object<union<Style,string>>
//
// A style is an object that, in the simple case, maps CSS property
// names to strings holding their values, as in `{color: "red",
// fontWeight: "bold"}`. The property names can be given in
// camel-case—the library will insert a dash before capital letters
// when converting them to CSS.
//
// If you include an underscore in a property name, it and everything
// after it will be removed from the output, which can be useful when
// providing a property multiple times, for browser compatibility
// reasons.
//
// A property in a style object can also be a sub-selector, which
// extends the current context to add a pseudo-selector or a child
// selector. Such a property should contain a `&` character, which
// will be replaced by the current selector. For example `{"&:before":
// {content: '"hi"'}}`. Sub-selectors and regular properties can
// freely be mixed in a given object. Any property containing a `&` is
// assumed to be a sub-selector.
//
// Finally, a property can specify an @-block to be wrapped around the
// styles defined inside the object that's the property's value. For
// example to create a media query you can do `{"@media screen and
// (min-width: 400px)": {...}}`.

var base = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
};
var shift = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: "\""
};
var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
var ie$1 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);

// Fill in the digit keys
for (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i);

// The function keys
for (var i = 1; i <= 24; i++) base[i + 111] = "F" + i;

// And the alphabetic keys
for (var i = 65; i <= 90; i++) {
  base[i] = String.fromCharCode(i + 32);
  shift[i] = String.fromCharCode(i);
}

// For each code that doesn't have a shift-equivalent, copy the base name
for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];
function keyName(event) {
  // On macOS, keys held with Shift and Cmd don't reflect the effect of Shift in `.key`.
  // On IE, shift effect is never included in `.key`.
  var ignoreKey = mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey || ie$1 && event.shiftKey && event.key && event.key.length == 1 || event.key == "Unidentified";
  var name = !ignoreKey && event.key || (event.shiftKey ? shift : base)[event.keyCode] || event.key || "Unidentified";
  // Edge sometimes produces wrong names (Issue #3)
  if (name == "Esc") name = "Escape";
  if (name == "Del") name = "Delete";
  // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
  if (name == "Left") name = "ArrowLeft";
  if (name == "Up") name = "ArrowUp";
  if (name == "Right") name = "ArrowRight";
  if (name == "Down") name = "ArrowDown";
  return name;
}

function getSelection(root) {
  var target;
  // Browsers differ on whether shadow roots have a getSelection
  // method. If it exists, use that, otherwise, call it on the
  // document.
  if (root.nodeType == 11) {
    // Shadow root
    target = root.getSelection ? root : root.ownerDocument;
  } else {
    target = root;
  }
  return target.getSelection();
}
function contains(dom, node) {
  return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
}
function deepActiveElement(doc) {
  var elt = doc.activeElement;
  while (elt && elt.shadowRoot) elt = elt.shadowRoot.activeElement;
  return elt;
}
function hasSelection(dom, selection) {
  if (!selection.anchorNode) return false;
  try {
    // Firefox will raise 'permission denied' errors when accessing
    // properties of `sel.anchorNode` when it's in a generated CSS
    // element.
    return contains(dom, selection.anchorNode);
  } catch (_) {
    return false;
  }
}
function clientRectsFor(dom) {
  if (dom.nodeType == 3) return textRange(dom, 0, dom.nodeValue.length).getClientRects();else if (dom.nodeType == 1) return dom.getClientRects();else return [];
}
// Scans forward and backward through DOM positions equivalent to the
// given one to see if the two are in the same place (i.e. after a
// text node vs at the end of that text node)
function isEquivalentPosition(node, off, targetNode, targetOff) {
  return targetNode ? scanFor(node, off, targetNode, targetOff, -1) || scanFor(node, off, targetNode, targetOff, 1) : false;
}
function domIndex(node) {
  for (var index = 0;; index++) {
    node = node.previousSibling;
    if (!node) return index;
  }
}
function scanFor(node, off, targetNode, targetOff, dir) {
  for (;;) {
    if (node == targetNode && off == targetOff) return true;
    if (off == (dir < 0 ? 0 : maxOffset(node))) {
      if (node.nodeName == "DIV") return false;
      var parent = node.parentNode;
      if (!parent || parent.nodeType != 1) return false;
      off = domIndex(node) + (dir < 0 ? 0 : 1);
      node = parent;
    } else if (node.nodeType == 1) {
      node = node.childNodes[off + (dir < 0 ? -1 : 0)];
      if (node.nodeType == 1 && node.contentEditable == "false") return false;
      off = dir < 0 ? maxOffset(node) : 0;
    } else {
      return false;
    }
  }
}
function maxOffset(node) {
  return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
}
function flattenRect(rect, left) {
  var x = left ? rect.left : rect.right;
  return {
    left: x,
    right: x,
    top: rect.top,
    bottom: rect.bottom
  };
}
function windowRect(win) {
  return {
    left: 0,
    right: win.innerWidth,
    top: 0,
    bottom: win.innerHeight
  };
}
function scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {
  var doc = dom.ownerDocument,
    win = doc.defaultView || window;
  for (var cur = dom; cur;) {
    if (cur.nodeType == 1) {
      // Element
      var bounding = void 0,
        top = cur == doc.body;
      if (top) {
        bounding = windowRect(win);
      } else {
        if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
          cur = cur.assignedSlot || cur.parentNode;
          continue;
        }
        var _rect = cur.getBoundingClientRect();
        // Make sure scrollbar width isn't included in the rectangle
        bounding = {
          left: _rect.left,
          right: _rect.left + cur.clientWidth,
          top: _rect.top,
          bottom: _rect.top + cur.clientHeight
        };
      }
      var moveX = 0,
        moveY = 0;
      if (y == "nearest") {
        if (rect.top < bounding.top) {
          moveY = -(bounding.top - rect.top + yMargin);
          if (side > 0 && rect.bottom > bounding.bottom + moveY) moveY = rect.bottom - bounding.bottom + moveY + yMargin;
        } else if (rect.bottom > bounding.bottom) {
          moveY = rect.bottom - bounding.bottom + yMargin;
          if (side < 0 && rect.top - moveY < bounding.top) moveY = -(bounding.top + moveY - rect.top + yMargin);
        }
      } else {
        var rectHeight = rect.bottom - rect.top,
          boundingHeight = bounding.bottom - bounding.top;
        var targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 : y == "start" || y == "center" && side < 0 ? rect.top - yMargin : rect.bottom - boundingHeight + yMargin;
        moveY = targetTop - bounding.top;
      }
      if (x == "nearest") {
        if (rect.left < bounding.left) {
          moveX = -(bounding.left - rect.left + xMargin);
          if (side > 0 && rect.right > bounding.right + moveX) moveX = rect.right - bounding.right + moveX + xMargin;
        } else if (rect.right > bounding.right) {
          moveX = rect.right - bounding.right + xMargin;
          if (side < 0 && rect.left < bounding.left + moveX) moveX = -(bounding.left + moveX - rect.left + xMargin);
        }
      } else {
        var targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 : x == "start" == ltr ? rect.left - xMargin : rect.right - (bounding.right - bounding.left) + xMargin;
        moveX = targetLeft - bounding.left;
      }
      if (moveX || moveY) {
        if (top) {
          win.scrollBy(moveX, moveY);
        } else {
          var movedX = 0,
            movedY = 0;
          if (moveY) {
            var start = cur.scrollTop;
            cur.scrollTop += moveY;
            movedY = cur.scrollTop - start;
          }
          if (moveX) {
            var _start = cur.scrollLeft;
            cur.scrollLeft += moveX;
            movedX = cur.scrollLeft - _start;
          }
          rect = {
            left: rect.left - movedX,
            top: rect.top - movedY,
            right: rect.right - movedX,
            bottom: rect.bottom - movedY
          };
          if (movedX && Math.abs(movedX - moveX) < 1) x = "nearest";
          if (movedY && Math.abs(movedY - moveY) < 1) y = "nearest";
        }
      }
      if (top) break;
      cur = cur.assignedSlot || cur.parentNode;
    } else if (cur.nodeType == 11) {
      // A shadow root
      cur = cur.host;
    } else {
      break;
    }
  }
}
function scrollableParent(dom) {
  var doc = dom.ownerDocument;
  for (var cur = dom.parentNode; cur;) {
    if (cur == doc.body) {
      break;
    } else if (cur.nodeType == 1) {
      if (cur.scrollHeight > cur.clientHeight || cur.scrollWidth > cur.clientWidth) return cur;
      cur = cur.assignedSlot || cur.parentNode;
    } else if (cur.nodeType == 11) {
      cur = cur.host;
    } else {
      break;
    }
  }
  return null;
}
var DOMSelectionState = /*#__PURE__*/function () {
  function DOMSelectionState() {
    _classCallCheck(this, DOMSelectionState);
    this.anchorNode = null;
    this.anchorOffset = 0;
    this.focusNode = null;
    this.focusOffset = 0;
  }
  _createClass(DOMSelectionState, [{
    key: "eq",
    value: function eq(domSel) {
      return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset && this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
    }
  }, {
    key: "setRange",
    value: function setRange(range) {
      var anchorNode = range.anchorNode,
        focusNode = range.focusNode;
      // Clip offsets to node size to avoid crashes when Safari reports bogus offsets (#1152)
      this.set(anchorNode, Math.min(range.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range.focusOffset, focusNode ? maxOffset(focusNode) : 0));
    }
  }, {
    key: "set",
    value: function set(anchorNode, anchorOffset, focusNode, focusOffset) {
      this.anchorNode = anchorNode;
      this.anchorOffset = anchorOffset;
      this.focusNode = focusNode;
      this.focusOffset = focusOffset;
    }
  }]);
  return DOMSelectionState;
}();
var preventScrollSupported = null;
// Feature-detects support for .focus({preventScroll: true}), and uses
// a fallback kludge when not supported.
function focusPreventScroll(dom) {
  if (dom.setActive) return dom.setActive(); // in IE
  if (preventScrollSupported) return dom.focus(preventScrollSupported);
  var stack = [];
  for (var cur = dom; cur; cur = cur.parentNode) {
    stack.push(cur, cur.scrollTop, cur.scrollLeft);
    if (cur == cur.ownerDocument) break;
  }
  dom.focus(preventScrollSupported == null ? {
    get preventScroll() {
      preventScrollSupported = {
        preventScroll: true
      };
      return true;
    }
  } : undefined);
  if (!preventScrollSupported) {
    preventScrollSupported = false;
    for (var i = 0; i < stack.length;) {
      var elt = stack[i++],
        top = stack[i++],
        left = stack[i++];
      if (elt.scrollTop != top) elt.scrollTop = top;
      if (elt.scrollLeft != left) elt.scrollLeft = left;
    }
  }
}
var scratchRange;
function textRange(node, from) {
  var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : from;
  var range = scratchRange || (scratchRange = document.createRange());
  range.setEnd(node, to);
  range.setStart(node, from);
  return range;
}
function dispatchKey(elt, name, code) {
  var options = {
    key: name,
    code: name,
    keyCode: code,
    which: code,
    cancelable: true
  };
  var down = new KeyboardEvent("keydown", options);
  down.synthetic = true;
  elt.dispatchEvent(down);
  var up = new KeyboardEvent("keyup", options);
  up.synthetic = true;
  elt.dispatchEvent(up);
  return down.defaultPrevented || up.defaultPrevented;
}
function getRoot(node) {
  while (node) {
    if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host)) return node;
    node = node.assignedSlot || node.parentNode;
  }
  return null;
}
function clearAttributes(node) {
  while (node.attributes.length) node.removeAttributeNode(node.attributes[0]);
}
function atElementStart(doc, selection) {
  var node = selection.focusNode,
    offset = selection.focusOffset;
  if (!node || selection.anchorNode != node || selection.anchorOffset != offset) return false;
  // Safari can report bogus offsets (#1152)
  offset = Math.min(offset, maxOffset(node));
  for (;;) {
    if (offset) {
      if (node.nodeType != 1) return false;
      var prev = node.childNodes[offset - 1];
      if (prev.contentEditable == "false") offset--;else {
        node = prev;
        offset = maxOffset(node);
      }
    } else if (node == doc) {
      return true;
    } else {
      offset = domIndex(node);
      node = node.parentNode;
    }
  }
}
var DOMPos = /*#__PURE__*/function () {
  function DOMPos(node, offset) {
    var precise = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    _classCallCheck(this, DOMPos);
    this.node = node;
    this.offset = offset;
    this.precise = precise;
  }
  _createClass(DOMPos, null, [{
    key: "before",
    value: function before(dom, precise) {
      return new DOMPos(dom.parentNode, domIndex(dom), precise);
    }
  }, {
    key: "after",
    value: function after(dom, precise) {
      return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise);
    }
  }]);
  return DOMPos;
}();
var noChildren = [];
var ContentView = /*#__PURE__*/function () {
  function ContentView() {
    _classCallCheck(this, ContentView);
    this.parent = null;
    this.dom = null;
    this.dirty = 2 /* Node */;
  }
  _createClass(ContentView, [{
    key: "overrideDOMText",
    get: function get() {
      return null;
    }
  }, {
    key: "posAtStart",
    get: function get() {
      return this.parent ? this.parent.posBefore(this) : 0;
    }
  }, {
    key: "posAtEnd",
    get: function get() {
      return this.posAtStart + this.length;
    }
  }, {
    key: "posBefore",
    value: function posBefore(view) {
      var pos = this.posAtStart;
      var _iterator = _createForOfIteratorHelper(this.children),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var child = _step.value;
          if (child == view) return pos;
          pos += child.length + child.breakAfter;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      throw new RangeError("Invalid child in posBefore");
    }
  }, {
    key: "posAfter",
    value: function posAfter(view) {
      return this.posBefore(view) + view.length;
    }
  }, {
    key: "sync",
    value: function sync(view, track) {
      if (this.dirty & 2 /* Node */) {
        var parent = this.dom;
        var prev = null,
          next;
        var _iterator2 = _createForOfIteratorHelper(this.children),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var child = _step2.value;
            if (child.dirty) {
              if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
                var contentView = ContentView.get(next);
                if (!contentView || !contentView.parent && contentView.canReuseDOM(child)) child.reuseDOM(next);
              }
              child.sync(view, track);
              child.dirty = 0 /* Not */;
            }

            next = prev ? prev.nextSibling : parent.firstChild;
            if (track && !track.written && track.node == parent && next != child.dom) track.written = true;
            if (child.dom.parentNode == parent) {
              while (next && next != child.dom) next = rm$1(next);
            } else {
              parent.insertBefore(child.dom, next);
            }
            prev = child.dom;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        next = prev ? prev.nextSibling : parent.firstChild;
        if (next && track && track.node == parent) track.written = true;
        while (next) next = rm$1(next);
      } else if (this.dirty & 1 /* Child */) {
        var _iterator3 = _createForOfIteratorHelper(this.children),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _child = _step3.value;
            if (_child.dirty) {
              _child.sync(view, track);
              _child.dirty = 0 /* Not */;
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
    }
  }, {
    key: "reuseDOM",
    value: function reuseDOM(_dom) {}
  }, {
    key: "localPosFromDOM",
    value: function localPosFromDOM(node, offset) {
      var after;
      if (node == this.dom) {
        after = this.dom.childNodes[offset];
      } else {
        var bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
        for (;;) {
          var parent = node.parentNode;
          if (parent == this.dom) break;
          if (bias == 0 && parent.firstChild != parent.lastChild) {
            if (node == parent.firstChild) bias = -1;else bias = 1;
          }
          node = parent;
        }
        if (bias < 0) after = node;else after = node.nextSibling;
      }
      if (after == this.dom.firstChild) return 0;
      while (after && !ContentView.get(after)) after = after.nextSibling;
      if (!after) return this.length;
      for (var i = 0, pos = 0;; i++) {
        var child = this.children[i];
        if (child.dom == after) return pos;
        pos += child.length + child.breakAfter;
      }
    }
  }, {
    key: "domBoundsAround",
    value: function domBoundsAround(from, to) {
      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var fromI = -1,
        fromStart = -1,
        toI = -1,
        toEnd = -1;
      for (var i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
        var child = this.children[i],
          end = pos + child.length;
        if (pos < from && end > to) return child.domBoundsAround(from, to, pos);
        if (end >= from && fromI == -1) {
          fromI = i;
          fromStart = pos;
        }
        if (pos > to && child.dom.parentNode == this.dom) {
          toI = i;
          toEnd = prevEnd;
          break;
        }
        prevEnd = end;
        pos = end + child.breakAfter;
      }
      return {
        from: fromStart,
        to: toEnd < 0 ? offset + this.length : toEnd,
        startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
        endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null
      };
    }
  }, {
    key: "markDirty",
    value: function markDirty() {
      var andParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      this.dirty |= 2 /* Node */;
      this.markParentsDirty(andParent);
    }
  }, {
    key: "markParentsDirty",
    value: function markParentsDirty(childList) {
      for (var parent = this.parent; parent; parent = parent.parent) {
        if (childList) parent.dirty |= 2 /* Node */;
        if (parent.dirty & 1 /* Child */) return;
        parent.dirty |= 1 /* Child */;
        childList = false;
      }
    }
  }, {
    key: "setParent",
    value: function setParent(parent) {
      if (this.parent != parent) {
        this.parent = parent;
        if (this.dirty) this.markParentsDirty(true);
      }
    }
  }, {
    key: "setDOM",
    value: function setDOM(dom) {
      if (this.dom) this.dom.cmView = null;
      this.dom = dom;
      dom.cmView = this;
    }
  }, {
    key: "rootView",
    get: function get() {
      for (var v = this;;) {
        var parent = v.parent;
        if (!parent) return v;
        v = parent;
      }
    }
  }, {
    key: "replaceChildren",
    value: function replaceChildren(from, to) {
      var _this$children;
      var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noChildren;
      this.markDirty();
      for (var i = from; i < to; i++) {
        var child = this.children[i];
        if (child.parent == this) child.destroy();
      }
      (_this$children = this.children).splice.apply(_this$children, [from, to - from].concat(_toConsumableArray(children)));
      for (var _i = 0; _i < children.length; _i++) children[_i].setParent(this);
    }
  }, {
    key: "ignoreMutation",
    value: function ignoreMutation(_rec) {
      return false;
    }
  }, {
    key: "ignoreEvent",
    value: function ignoreEvent(_event) {
      return false;
    }
  }, {
    key: "childCursor",
    value: function childCursor() {
      var pos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length;
      return new ChildCursor(this.children, pos, this.children.length);
    }
  }, {
    key: "childPos",
    value: function childPos(pos) {
      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      return this.childCursor().findPos(pos, bias);
    }
  }, {
    key: "toString",
    value: function toString() {
      var name = this.constructor.name.replace("View", "");
      return name + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
    }
  }, {
    key: "isEditable",
    get: function get() {
      return true;
    }
  }, {
    key: "isWidget",
    get: function get() {
      return false;
    }
  }, {
    key: "isHidden",
    get: function get() {
      return false;
    }
  }, {
    key: "merge",
    value: function merge(from, to, source, hasStart, openStart, openEnd) {
      return false;
    }
  }, {
    key: "become",
    value: function become(other) {
      return false;
    }
  }, {
    key: "canReuseDOM",
    value: function canReuseDOM(other) {
      return other.constructor == this.constructor;
    }
    // When this is a zero-length view with a side, this should return a
    // number <= 0 to indicate it is before its position, or a
    // number > 0 when after its position.
  }, {
    key: "getSide",
    value: function getSide() {
      return 0;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.parent = null;
    }
  }], [{
    key: "get",
    value: function get(node) {
      return node.cmView;
    }
  }]);
  return ContentView;
}();
ContentView.prototype.breakAfter = 0;
// Remove a DOM node and return its next sibling.
function rm$1(dom) {
  var next = dom.nextSibling;
  dom.parentNode.removeChild(dom);
  return next;
}
var ChildCursor = /*#__PURE__*/function () {
  function ChildCursor(children, pos, i) {
    _classCallCheck(this, ChildCursor);
    this.children = children;
    this.pos = pos;
    this.i = i;
    this.off = 0;
  }
  _createClass(ChildCursor, [{
    key: "findPos",
    value: function findPos(pos) {
      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      for (;;) {
        if (pos > this.pos || pos == this.pos && (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
          this.off = pos - this.pos;
          return this;
        }
        var next = this.children[--this.i];
        this.pos -= next.length + next.breakAfter;
      }
    }
  }]);
  return ChildCursor;
}();
function replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {
  var children = parent.children;
  var before = children.length ? children[fromI] : null;
  var last = insert.length ? insert[insert.length - 1] : null;
  var breakAtEnd = last ? last.breakAfter : breakAtStart;
  // Change within a single child
  if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 && before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd)) return;
  if (toI < children.length) {
    var after = children[toI];
    // Make sure the end of the child after the update is preserved in `after`
    if (after && toOff < after.length) {
      // If we're splitting a child, separate part of it to avoid that
      // being mangled when updating the child before the update.
      if (fromI == toI) {
        after = after.split(toOff);
        toOff = 0;
      }
      // If the element after the replacement should be merged with
      // the last replacing element, update `content`
      if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
        insert[insert.length - 1] = after;
      } else {
        // Remove the start of the after element, if necessary, and
        // add it to `content`.
        if (toOff) after.merge(0, toOff, null, false, 0, openEnd);
        insert.push(after);
      }
    } else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
      // The element at `toI` is entirely covered by this range.
      // Preserve its line break, if any.
      if (last) last.breakAfter = 1;else breakAtStart = 1;
    }
    // Since we've handled the next element from the current elements
    // now, make sure `toI` points after that.
    toI++;
  }
  if (before) {
    before.breakAfter = breakAtStart;
    if (fromOff > 0) {
      if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {
        before.breakAfter = insert.shift().breakAfter;
      } else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
        before.merge(fromOff, before.length, null, false, openStart, 0);
      }
      fromI++;
    }
  }
  // Try to merge widgets on the boundaries of the replacement
  while (fromI < toI && insert.length) {
    if (children[toI - 1].become(insert[insert.length - 1])) {
      toI--;
      insert.pop();
      openEnd = insert.length ? 0 : openStart;
    } else if (children[fromI].become(insert[0])) {
      fromI++;
      insert.shift();
      openStart = insert.length ? 0 : openEnd;
    } else {
      break;
    }
  }
  if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter && children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd)) fromI--;
  if (fromI < toI || insert.length) parent.replaceChildren(fromI, toI, insert);
}
function mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {
  var cur = parent.childCursor();
  var _cur$findPos = cur.findPos(to, 1),
    toI = _cur$findPos.i,
    toOff = _cur$findPos.off;
  var _cur$findPos2 = cur.findPos(from, -1),
    fromI = _cur$findPos2.i,
    fromOff = _cur$findPos2.off;
  var dLen = from - to;
  var _iterator4 = _createForOfIteratorHelper(insert),
    _step4;
  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var view = _step4.value;
      dLen += view.length;
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
  parent.length += dLen;
  replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);
}
var nav = typeof navigator != "undefined" ? navigator : {
  userAgent: "",
  vendor: "",
  platform: ""
};
var doc = typeof document != "undefined" ? document : {
  documentElement: {
    style: {}
  }
};
var ie_edge = /*@__PURE__*/ /Edge\/(\d+)/.exec(nav.userAgent);
var ie_upto10 = /*@__PURE__*/ /MSIE \d/.test(nav.userAgent);
var ie_11up = /*@__PURE__*/ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
var ie = !!(ie_upto10 || ie_11up || ie_edge);
var gecko = !ie && /*@__PURE__*/ /gecko\/(\d+)/i.test(nav.userAgent);
var chrome = !ie && /*@__PURE__*/ /Chrome\/(\d+)/.exec(nav.userAgent);
var webkit = ("webkitFontSmoothing" in doc.documentElement.style);
var safari = !ie && /*@__PURE__*/ /Apple Computer/.test(nav.vendor);
var ios = safari && ( /*@__PURE__*/ /Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
var browser = {
  mac: ios || /*@__PURE__*/ /Mac/.test(nav.platform),
  windows: /*@__PURE__*/ /Win/.test(nav.platform),
  linux: /*@__PURE__*/ /Linux|X11/.test(nav.platform),
  ie: ie,
  ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
  gecko: gecko,
  gecko_version: gecko ? +( /*@__PURE__*/ /Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
  chrome: !!chrome,
  chrome_version: chrome ? +chrome[1] : 0,
  ios: ios,
  android: /*@__PURE__*/ /Android\b/.test(nav.userAgent),
  webkit: webkit,
  safari: safari,
  webkit_version: webkit ? +( /*@__PURE__*/ /\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
  tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
};
var MaxJoinLen = 256;
var TextView = /*#__PURE__*/function (_ContentView) {
  _inherits(TextView, _ContentView);
  var _super = _createSuper(TextView);
  function TextView(text) {
    var _this;
    _classCallCheck(this, TextView);
    _this = _super.call(this);
    _this.text = text;
    return _this;
  }
  _createClass(TextView, [{
    key: "length",
    get: function get() {
      return this.text.length;
    }
  }, {
    key: "createDOM",
    value: function createDOM(textDOM) {
      this.setDOM(textDOM || document.createTextNode(this.text));
    }
  }, {
    key: "sync",
    value: function sync(view, track) {
      if (!this.dom) this.createDOM();
      if (this.dom.nodeValue != this.text) {
        if (track && track.node == this.dom) track.written = true;
        this.dom.nodeValue = this.text;
      }
    }
  }, {
    key: "reuseDOM",
    value: function reuseDOM(dom) {
      if (dom.nodeType == 3) this.createDOM(dom);
    }
  }, {
    key: "merge",
    value: function merge(from, to, source) {
      if (source && (!(source instanceof TextView) || this.length - (to - from) + source.length > MaxJoinLen)) return false;
      this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
      this.markDirty();
      return true;
    }
  }, {
    key: "split",
    value: function split(from) {
      var result = new TextView(this.text.slice(from));
      this.text = this.text.slice(0, from);
      this.markDirty();
      return result;
    }
  }, {
    key: "localPosFromDOM",
    value: function localPosFromDOM(node, offset) {
      return node == this.dom ? offset : offset ? this.text.length : 0;
    }
  }, {
    key: "domAtPos",
    value: function domAtPos(pos) {
      return new DOMPos(this.dom, pos);
    }
  }, {
    key: "domBoundsAround",
    value: function domBoundsAround(_from, _to, offset) {
      return {
        from: offset,
        to: offset + this.length,
        startDOM: this.dom,
        endDOM: this.dom.nextSibling
      };
    }
  }, {
    key: "coordsAt",
    value: function coordsAt(pos, side) {
      return textCoords(this.dom, pos, side);
    }
  }]);
  return TextView;
}(ContentView);
var MarkView = /*#__PURE__*/function (_ContentView2) {
  _inherits(MarkView, _ContentView2);
  var _super2 = _createSuper(MarkView);
  function MarkView(mark) {
    var _this2;
    var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    _classCallCheck(this, MarkView);
    _this2 = _super2.call(this);
    _this2.mark = mark;
    _this2.children = children;
    _this2.length = length;
    var _iterator5 = _createForOfIteratorHelper(children),
      _step5;
    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var ch = _step5.value;
        ch.setParent(_assertThisInitialized(_this2));
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
    return _this2;
  }
  _createClass(MarkView, [{
    key: "setAttrs",
    value: function setAttrs(dom) {
      clearAttributes(dom);
      if (this.mark["class"]) dom.className = this.mark["class"];
      if (this.mark.attrs) for (var name in this.mark.attrs) dom.setAttribute(name, this.mark.attrs[name]);
      return dom;
    }
  }, {
    key: "reuseDOM",
    value: function reuseDOM(node) {
      if (node.nodeName == this.mark.tagName.toUpperCase()) {
        this.setDOM(node);
        this.dirty |= 4 /* Attrs */ | 2 /* Node */;
      }
    }
  }, {
    key: "sync",
    value: function sync(view, track) {
      if (!this.dom) this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));else if (this.dirty & 4 /* Attrs */) this.setAttrs(this.dom);
      _get(_getPrototypeOf(MarkView.prototype), "sync", this).call(this, view, track);
    }
  }, {
    key: "merge",
    value: function merge(from, to, source, _hasStart, openStart, openEnd) {
      if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) || from && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
      mergeChildrenInto(this, from, to, source ? source.children : [], openStart - 1, openEnd - 1);
      this.markDirty();
      return true;
    }
  }, {
    key: "split",
    value: function split(from) {
      var result = [],
        off = 0,
        detachFrom = -1,
        i = 0;
      var _iterator6 = _createForOfIteratorHelper(this.children),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var elt = _step6.value;
          var end = off + elt.length;
          if (end > from) result.push(off < from ? elt.split(from - off) : elt);
          if (detachFrom < 0 && off >= from) detachFrom = i;
          off = end;
          i++;
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      var length = this.length - from;
      this.length = from;
      if (detachFrom > -1) {
        this.children.length = detachFrom;
        this.markDirty();
      }
      return new MarkView(this.mark, result, length);
    }
  }, {
    key: "domAtPos",
    value: function domAtPos(pos) {
      return inlineDOMAtPos(this, pos);
    }
  }, {
    key: "coordsAt",
    value: function coordsAt(pos, side) {
      return coordsInChildren(this, pos, side);
    }
  }]);
  return MarkView;
}(ContentView);
function textCoords(text, pos, side) {
  var length = text.nodeValue.length;
  if (pos > length) pos = length;
  var from = pos,
    to = pos,
    flatten = 0;
  if (pos == 0 && side < 0 || pos == length && side >= 0) {
    if (!(browser.chrome || browser.gecko)) {
      // These browsers reliably return valid rectangles for empty ranges
      if (pos) {
        from--;
        flatten = 1;
      } // FIXME this is wrong in RTL text
      else if (to < length) {
        to++;
        flatten = -1;
      }
    }
  } else {
    if (side < 0) from--;else if (to < length) to++;
  }
  var rects = textRange(text, from, to).getClientRects();
  if (!rects.length) return null;
  var rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
  if (browser.safari && !flatten && rect.width == 0) rect = Array.prototype.find.call(rects, function (r) {
    return r.width;
  }) || rect;
  return flatten ? flattenRect(rect, flatten < 0) : rect || null;
}
// Also used for collapsed ranges that don't have a placeholder widget!
var WidgetView = /*#__PURE__*/function (_ContentView3) {
  _inherits(WidgetView, _ContentView3);
  var _super3 = _createSuper(WidgetView);
  function WidgetView(widget, length, side) {
    var _this3;
    _classCallCheck(this, WidgetView);
    _this3 = _super3.call(this);
    _this3.widget = widget;
    _this3.length = length;
    _this3.side = side;
    _this3.prevWidget = null;
    return _this3;
  }
  _createClass(WidgetView, [{
    key: "split",
    value: function split(from) {
      var result = WidgetView.create(this.widget, this.length - from, this.side);
      this.length -= from;
      return result;
    }
  }, {
    key: "sync",
    value: function sync(view) {
      if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
        if (this.dom && this.prevWidget) this.prevWidget.destroy(this.dom);
        this.prevWidget = null;
        this.setDOM(this.widget.toDOM(view));
        this.dom.contentEditable = "false";
      }
    }
  }, {
    key: "getSide",
    value: function getSide() {
      return this.side;
    }
  }, {
    key: "merge",
    value: function merge(from, to, source, hasStart, openStart, openEnd) {
      if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
      this.length = from + (source ? source.length : 0) + (this.length - to);
      return true;
    }
  }, {
    key: "become",
    value: function become(other) {
      if (other instanceof WidgetView && other.side == this.side && this.widget.constructor == other.widget.constructor) {
        if (!this.widget.compare(other.widget)) this.markDirty(true);
        if (this.dom && !this.prevWidget) this.prevWidget = this.widget;
        this.widget = other.widget;
        this.length = other.length;
        return true;
      }
      return false;
    }
  }, {
    key: "ignoreMutation",
    value: function ignoreMutation() {
      return true;
    }
  }, {
    key: "ignoreEvent",
    value: function ignoreEvent(event) {
      return this.widget.ignoreEvent(event);
    }
  }, {
    key: "overrideDOMText",
    get: function get() {
      if (this.length == 0) return Text.empty;
      var top = this;
      while (top.parent) top = top.parent;
      var _top = top,
        view = _top.view,
        text = view && view.state.doc,
        start = this.posAtStart;
      return text ? text.slice(start, start + this.length) : Text.empty;
    }
  }, {
    key: "domAtPos",
    value: function domAtPos(pos) {
      return (this.length ? pos == 0 : this.side > 0) ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
    }
  }, {
    key: "domBoundsAround",
    value: function domBoundsAround() {
      return null;
    }
  }, {
    key: "coordsAt",
    value: function coordsAt(pos, side) {
      var custom = this.widget.coordsAt(this.dom, pos, side);
      if (custom) return custom;
      var rects = this.dom.getClientRects(),
        rect = null;
      if (!rects.length) return null;
      var fromBack = this.side ? this.side < 0 : pos > 0;
      for (var i = fromBack ? rects.length - 1 : 0;; i += fromBack ? -1 : 1) {
        rect = rects[i];
        if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom) break;
      }
      return this.length ? rect : flattenRect(rect, !fromBack);
    }
  }, {
    key: "isEditable",
    get: function get() {
      return false;
    }
  }, {
    key: "isWidget",
    get: function get() {
      return true;
    }
  }, {
    key: "isHidden",
    get: function get() {
      return this.widget.isHidden;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(WidgetView.prototype), "destroy", this).call(this);
      if (this.dom) this.widget.destroy(this.dom);
    }
  }], [{
    key: "create",
    value: function create(widget, length, side) {
      return new (widget.customView || WidgetView)(widget, length, side);
    }
  }]);
  return WidgetView;
}(ContentView);
var CompositionView = /*#__PURE__*/function (_WidgetView) {
  _inherits(CompositionView, _WidgetView);
  var _super4 = _createSuper(CompositionView);
  function CompositionView() {
    _classCallCheck(this, CompositionView);
    return _super4.apply(this, arguments);
  }
  _createClass(CompositionView, [{
    key: "domAtPos",
    value: function domAtPos(pos) {
      var _this$widget = this.widget,
        topView = _this$widget.topView,
        text = _this$widget.text;
      if (!topView) return new DOMPos(text, Math.min(pos, text.nodeValue.length));
      return scanCompositionTree(pos, 0, topView, text, this.length - topView.length, function (v, p) {
        return v.domAtPos(p);
      }, function (text, p) {
        return new DOMPos(text, Math.min(p, text.nodeValue.length));
      });
    }
  }, {
    key: "sync",
    value: function sync() {
      this.setDOM(this.widget.toDOM());
    }
  }, {
    key: "localPosFromDOM",
    value: function localPosFromDOM(node, offset) {
      var _this$widget2 = this.widget,
        topView = _this$widget2.topView,
        text = _this$widget2.text;
      if (!topView) return Math.min(offset, this.length);
      return posFromDOMInCompositionTree(node, offset, topView, text, this.length - topView.length);
    }
  }, {
    key: "ignoreMutation",
    value: function ignoreMutation() {
      return false;
    }
  }, {
    key: "overrideDOMText",
    get: function get() {
      return null;
    }
  }, {
    key: "coordsAt",
    value: function coordsAt(pos, side) {
      var _this$widget3 = this.widget,
        topView = _this$widget3.topView,
        text = _this$widget3.text;
      if (!topView) return textCoords(text, pos, side);
      return scanCompositionTree(pos, side, topView, text, this.length - topView.length, function (v, pos, side) {
        return v.coordsAt(pos, side);
      }, function (text, pos, side) {
        return textCoords(text, pos, side);
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _a;
      _get(_getPrototypeOf(CompositionView.prototype), "destroy", this).call(this);
      (_a = this.widget.topView) === null || _a === void 0 ? void 0 : _a.destroy();
    }
  }, {
    key: "isEditable",
    get: function get() {
      return true;
    }
  }, {
    key: "canReuseDOM",
    value: function canReuseDOM() {
      return true;
    }
  }]);
  return CompositionView;
}(WidgetView); // Uses the old structure of a chunk of content view frozen for
// composition to try and find a reasonable DOM location for the given
// offset.
function scanCompositionTree(pos, side, view, text, dLen, enterView, fromText) {
  if (view instanceof MarkView) {
    for (var child = view.dom.firstChild; child; child = child.nextSibling) {
      var desc = ContentView.get(child);
      if (!desc) {
        var inner = scanCompositionNode(pos, side, child, fromText);
        if (typeof inner != "number") return inner;
        pos = inner;
      } else {
        var hasComp = contains(child, text);
        var len = desc.length + (hasComp ? dLen : 0);
        if (pos < len || pos == len && desc.getSide() <= 0) return hasComp ? scanCompositionTree(pos, side, desc, text, dLen, enterView, fromText) : enterView(desc, pos, side);
        pos -= len;
      }
    }
    return enterView(view, view.length, -1);
  } else if (view.dom == text) {
    return fromText(text, pos, side);
  } else {
    return enterView(view, pos, side);
  }
}
function scanCompositionNode(pos, side, node, fromText) {
  if (node.nodeType == 3) {
    var len = node.nodeValue.length;
    if (pos <= len) return fromText(node, pos, side);
    pos -= len;
  } else if (node.nodeType == 1 && node.contentEditable != "false") {
    for (var child = node.firstChild; child; child = child.nextSibling) {
      var inner = scanCompositionNode(pos, side, child, fromText);
      if (typeof inner != "number") return inner;
      pos = inner;
    }
  }
  return pos;
}
function posFromDOMInCompositionTree(node, offset, view, text, dLen) {
  if (view instanceof MarkView) {
    var pos = 0;
    for (var child = view.dom.firstChild; child; child = child.nextSibling) {
      var childView = ContentView.get(child);
      if (childView) {
        var hasComp = contains(child, text);
        if (contains(child, node)) return pos + (hasComp ? posFromDOMInCompositionTree(node, offset, childView, text, dLen) : childView.localPosFromDOM(node, offset));
        pos += childView.length + (hasComp ? dLen : 0);
      } else {
        var inner = posFromDOMInOpaqueNode(node, offset, child);
        if (inner.result != null) return pos + inner.result;
        pos += inner.size;
      }
    }
  } else if (view.dom == text) {
    return Math.min(offset, text.nodeValue.length);
  }
  return view.localPosFromDOM(node, offset);
}
function posFromDOMInOpaqueNode(node, offset, target) {
  if (target.nodeType == 3) {
    return node == target ? {
      result: offset
    } : {
      size: target.nodeValue.length
    };
  } else if (target.nodeType == 1 && target.contentEditable != "false") {
    var pos = 0;
    for (var child = target.firstChild, i = 0;; child = child.nextSibling, i++) {
      if (node == target && i == offset) return {
        result: pos
      };
      if (!child) return {
        size: pos
      };
      var inner = posFromDOMInOpaqueNode(node, offset, child);
      if (inner.result != null) return {
        result: offset + inner.result
      };
      pos += inner.size;
    }
  } else {
    return target.contains(node) ? {
      result: 0
    } : {
      size: 0
    };
  }
}
// These are drawn around uneditable widgets to avoid a number of
// browser bugs that show up when the cursor is directly next to
// uneditable inline content.
var WidgetBufferView = /*#__PURE__*/function (_ContentView4) {
  _inherits(WidgetBufferView, _ContentView4);
  var _super5 = _createSuper(WidgetBufferView);
  function WidgetBufferView(side) {
    var _this4;
    _classCallCheck(this, WidgetBufferView);
    _this4 = _super5.call(this);
    _this4.side = side;
    return _this4;
  }
  _createClass(WidgetBufferView, [{
    key: "length",
    get: function get() {
      return 0;
    }
  }, {
    key: "merge",
    value: function merge() {
      return false;
    }
  }, {
    key: "become",
    value: function become(other) {
      return other instanceof WidgetBufferView && other.side == this.side;
    }
  }, {
    key: "split",
    value: function split() {
      return new WidgetBufferView(this.side);
    }
  }, {
    key: "sync",
    value: function sync() {
      if (!this.dom) {
        var dom = document.createElement("img");
        dom.className = "cm-widgetBuffer";
        dom.setAttribute("aria-hidden", "true");
        this.setDOM(dom);
      }
    }
  }, {
    key: "getSide",
    value: function getSide() {
      return this.side;
    }
  }, {
    key: "domAtPos",
    value: function domAtPos(pos) {
      return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom);
    }
  }, {
    key: "localPosFromDOM",
    value: function localPosFromDOM() {
      return 0;
    }
  }, {
    key: "domBoundsAround",
    value: function domBoundsAround() {
      return null;
    }
  }, {
    key: "coordsAt",
    value: function coordsAt(pos) {
      return this.dom.getBoundingClientRect();
    }
  }, {
    key: "overrideDOMText",
    get: function get() {
      return Text.empty;
    }
  }, {
    key: "isHidden",
    get: function get() {
      return true;
    }
  }]);
  return WidgetBufferView;
}(ContentView);
TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
function inlineDOMAtPos(parent, pos) {
  var dom = parent.dom,
    children = parent.children,
    i = 0;
  for (var off = 0; i < children.length; i++) {
    var child = children[i],
      end = off + child.length;
    if (end == off && child.getSide() <= 0) continue;
    if (pos > off && pos < end && child.dom.parentNode == dom) return child.domAtPos(pos - off);
    if (pos <= off) break;
    off = end;
  }
  for (var j = i; j > 0; j--) {
    var prev = children[j - 1];
    if (prev.dom.parentNode == dom) return prev.domAtPos(prev.length);
  }
  for (var _j = i; _j < children.length; _j++) {
    var next = children[_j];
    if (next.dom.parentNode == dom) return next.domAtPos(0);
  }
  return new DOMPos(dom, 0);
}
// Assumes `view`, if a mark view, has precisely 1 child.
function joinInlineInto(parent, view, open) {
  var last,
    children = parent.children;
  if (open > 0 && view instanceof MarkView && children.length && (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
    joinInlineInto(last, view.children[0], open - 1);
  } else {
    children.push(view);
    view.setParent(parent);
  }
  parent.length += view.length;
}
function coordsInChildren(view, pos, side) {
  var before = null,
    beforePos = -1,
    after = null,
    afterPos = -1;
  function scan(view, pos) {
    for (var i = 0, off = 0; i < view.children.length && off <= pos; i++) {
      var child = view.children[i],
        end = off + child.length;
      if (end >= pos) {
        if (child.children.length) {
          scan(child, pos - off);
        } else if ((!after || after.isHidden && side > 0) && (end > pos || off == end && child.getSide() > 0)) {
          after = child;
          afterPos = pos - off;
        } else if (off < pos || off == end && child.getSide() < 0 && !child.isHidden) {
          before = child;
          beforePos = pos - off;
        }
      }
      off = end;
    }
  }
  scan(view, pos);
  var target = (side < 0 ? before : after) || before || after;
  if (target) return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
  return fallbackRect(view);
}
function fallbackRect(view) {
  var last = view.dom.lastChild;
  if (!last) return view.dom.getBoundingClientRect();
  var rects = clientRectsFor(last);
  return rects[rects.length - 1] || null;
}
function combineAttrs(source, target) {
  for (var name in source) {
    if (name == "class" && target["class"]) target["class"] += " " + source["class"];else if (name == "style" && target.style) target.style += ";" + source.style;else target[name] = source[name];
  }
  return target;
}
function attrsEq(a, b) {
  if (a == b) return true;
  if (!a || !b) return false;
  var keysA = Object.keys(a),
    keysB = Object.keys(b);
  if (keysA.length != keysB.length) return false;
  for (var _i2 = 0, _keysA = keysA; _i2 < _keysA.length; _i2++) {
    var key = _keysA[_i2];
    if (keysB.indexOf(key) == -1 || a[key] !== b[key]) return false;
  }
  return true;
}
function _updateAttrs(dom, prev, attrs) {
  var changed = null;
  if (prev) for (var name in prev) if (!(attrs && name in attrs)) dom.removeAttribute(changed = name);
  if (attrs) for (var _name in attrs) if (!(prev && prev[_name] == attrs[_name])) dom.setAttribute(changed = _name, attrs[_name]);
  return !!changed;
}

/**
Widgets added to the content are described by subclasses of this
class. Using a description object like that makes it possible to
delay creating of the DOM structure for a widget until it is
needed, and to avoid redrawing widgets even if the decorations
that define them are recreated.
*/
var WidgetType = /*#__PURE__*/function () {
  function WidgetType() {
    _classCallCheck(this, WidgetType);
  }
  _createClass(WidgetType, [{
    key: "eq",
    value:
    /**
    Compare this instance to another instance of the same type.
    (TypeScript can't express this, but only instances of the same
    specific class will be passed to this method.) This is used to
    avoid redrawing widgets when they are replaced by a new
    decoration of the same type. The default implementation just
    returns `false`, which will cause new instances of the widget to
    always be redrawn.
    */
    function eq(widget) {
      return false;
    }
    /**
    Update a DOM element created by a widget of the same type (but
    different, non-`eq` content) to reflect this widget. May return
    true to indicate that it could update, false to indicate it
    couldn't (in which case the widget will be redrawn). The default
    implementation just returns false.
    */
  }, {
    key: "updateDOM",
    value: function updateDOM(dom, view) {
      return false;
    }
    /**
    @internal
    */
  }, {
    key: "compare",
    value: function compare(other) {
      return this == other || this.constructor == other.constructor && this.eq(other);
    }
    /**
    The estimated height this widget will have, to be used when
    estimating the height of content that hasn't been drawn. May
    return -1 to indicate you don't know. The default implementation
    returns -1.
    */
  }, {
    key: "estimatedHeight",
    get: function get() {
      return -1;
    }
    /**
    For inline widgets that are displayed inline (as opposed to
    `inline-block`) and introduce line breaks (through `<br>` tags
    or textual newlines), this must indicate the amount of line
    breaks they introduce. Defaults to 0.
    */
  }, {
    key: "lineBreaks",
    get: function get() {
      return 0;
    }
    /**
    Can be used to configure which kinds of events inside the widget
    should be ignored by the editor. The default is to ignore all
    events.
    */
  }, {
    key: "ignoreEvent",
    value: function ignoreEvent(event) {
      return true;
    }
    /**
    Override the way screen coordinates for positions at/in the
    widget are found. `pos` will be the offset into the widget, and
    `side` the side of the position that is being queried—less than
    zero for before, greater than zero for after, and zero for
    directly at that position.
    */
  }, {
    key: "coordsAt",
    value: function coordsAt(dom, pos, side) {
      return null;
    }
    /**
    @internal
    */
  }, {
    key: "customView",
    get: function get() {
      return null;
    }
    /**
    @internal
    */
  }, {
    key: "isHidden",
    get: function get() {
      return false;
    }
    /**
    This is called when the an instance of the widget is removed
    from the editor view.
    */
  }, {
    key: "destroy",
    value: function destroy(dom) {}
  }]);
  return WidgetType;
}();
/**
The different types of blocks that can occur in an editor view.
*/
var BlockType = /*@__PURE__*/function (BlockType) {
  /**
  A line of text.
  */
  BlockType[BlockType["Text"] = 0] = "Text";
  /**
  A block widget associated with the position after it.
  */
  BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
  /**
  A block widget associated with the position before it.
  */
  BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
  /**
  A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
  */
  BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
  return BlockType;
}(BlockType || (BlockType = {}));
/**
A decoration provides information on how to draw or style a piece
of content. You'll usually use it wrapped in a
[`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.
@nonabstract
*/
var Decoration = /*#__PURE__*/function (_RangeValue) {
  _inherits(Decoration, _RangeValue);
  var _super6 = _createSuper(Decoration);
  function Decoration(
  /**
  @internal
  */
  startSide,
  /**
  @internal
  */
  endSide,
  /**
  @internal
  */
  widget,
  /**
  The config object used to create this decoration. You can
  include additional properties in there to store metadata about
  your decoration.
  */
  spec) {
    var _this5;
    _classCallCheck(this, Decoration);
    _this5 = _super6.call(this);
    _this5.startSide = startSide;
    _this5.endSide = endSide;
    _this5.widget = widget;
    _this5.spec = spec;
    return _this5;
  }
  /**
  @internal
  */
  _createClass(Decoration, [{
    key: "heightRelevant",
    get: function get() {
      return false;
    }
    /**
    Create a mark decoration, which influences the styling of the
    content in its range. Nested mark decorations will cause nested
    DOM elements to be created. Nesting order is determined by
    precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
    the higher-precedence decorations creating the inner DOM nodes.
    Such elements are split on line boundaries and on the boundaries
    of lower-precedence decorations.
    */
  }, {
    key: "hasHeight",
    value:
    /**
    @internal
    */
    function hasHeight() {
      return this.widget ? this.widget.estimatedHeight > -1 : false;
    }
  }], [{
    key: "mark",
    value: function mark(spec) {
      return new MarkDecoration(spec);
    }
    /**
    Create a widget decoration, which displays a DOM element at the
    given position.
    */
  }, {
    key: "widget",
    value: function widget(spec) {
      var side = Math.max(-10000, Math.min(10000, spec.side || 0)),
        block = !!spec.block;
      side += block ? side > 0 ? 300000000 /* BlockAfter */ : -400000000 /* BlockBefore */ : side > 0 ? 100000000 /* InlineAfter */ : -100000000 /* InlineBefore */;
      return new PointDecoration(spec, side, side, block, spec.widget || null, false);
    }
    /**
    Create a replace decoration which replaces the given range with
    a widget, or simply hides it.
    */
  }, {
    key: "replace",
    value: function replace(spec) {
      var block = !!spec.block,
        startSide,
        endSide;
      if (spec.isBlockGap) {
        startSide = -500000000 /* GapStart */;
        endSide = 400000000 /* GapEnd */;
      } else {
        var _getInclusive = getInclusive(spec, block),
          start = _getInclusive.start,
          end = _getInclusive.end;
        startSide = (start ? block ? -300000000 /* BlockIncStart */ : -1 /* InlineIncStart */ : 500000000 /* NonIncStart */) - 1;
        endSide = (end ? block ? 200000000 /* BlockIncEnd */ : 1 /* InlineIncEnd */ : -600000000 /* NonIncEnd */) + 1;
      }
      return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
    }
    /**
    Create a line decoration, which can add DOM attributes to the
    line starting at the given position.
    */
  }, {
    key: "line",
    value: function line(spec) {
      return new LineDecoration(spec);
    }
    /**
    Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
    decorated range or ranges. If the ranges aren't already sorted,
    pass `true` for `sort` to make the library sort them for you.
    */
  }, {
    key: "set",
    value: function set(of) {
      var sort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return RangeSet.of(of, sort);
    }
  }]);
  return Decoration;
}(RangeValue);
/**
The empty set of decorations.
*/
Decoration.none = RangeSet.empty;
var MarkDecoration = /*#__PURE__*/function (_Decoration) {
  _inherits(MarkDecoration, _Decoration);
  var _super7 = _createSuper(MarkDecoration);
  function MarkDecoration(spec) {
    var _this6;
    _classCallCheck(this, MarkDecoration);
    var _getInclusive2 = getInclusive(spec),
      start = _getInclusive2.start,
      end = _getInclusive2.end;
    _this6 = _super7.call(this, start ? -1 /* InlineIncStart */ : 500000000 /* NonIncStart */, end ? 1 /* InlineIncEnd */ : -600000000 /* NonIncEnd */, null, spec);
    _this6.tagName = spec.tagName || "span";
    _this6["class"] = spec["class"] || "";
    _this6.attrs = spec.attributes || null;
    return _this6;
  }
  _createClass(MarkDecoration, [{
    key: "eq",
    value: function eq(other) {
      return this == other || other instanceof MarkDecoration && this.tagName == other.tagName && this["class"] == other["class"] && attrsEq(this.attrs, other.attrs);
    }
  }, {
    key: "range",
    value: function range(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
      if (from >= to) throw new RangeError("Mark decorations may not be empty");
      return _get(_getPrototypeOf(MarkDecoration.prototype), "range", this).call(this, from, to);
    }
  }]);
  return MarkDecoration;
}(Decoration);
MarkDecoration.prototype.point = false;
var LineDecoration = /*#__PURE__*/function (_Decoration2) {
  _inherits(LineDecoration, _Decoration2);
  var _super8 = _createSuper(LineDecoration);
  function LineDecoration(spec) {
    _classCallCheck(this, LineDecoration);
    return _super8.call(this, -200000000 /* Line */, -200000000 /* Line */, null, spec);
  }
  _createClass(LineDecoration, [{
    key: "eq",
    value: function eq(other) {
      return other instanceof LineDecoration && this.spec["class"] == other.spec["class"] && attrsEq(this.spec.attributes, other.spec.attributes);
    }
  }, {
    key: "range",
    value: function range(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
      if (to != from) throw new RangeError("Line decoration ranges must be zero-length");
      return _get(_getPrototypeOf(LineDecoration.prototype), "range", this).call(this, from, to);
    }
  }]);
  return LineDecoration;
}(Decoration);
LineDecoration.prototype.mapMode = MapMode.TrackBefore;
LineDecoration.prototype.point = true;
var PointDecoration = /*#__PURE__*/function (_Decoration3) {
  _inherits(PointDecoration, _Decoration3);
  var _super9 = _createSuper(PointDecoration);
  function PointDecoration(spec, startSide, endSide, block, widget, isReplace) {
    var _this7;
    _classCallCheck(this, PointDecoration);
    _this7 = _super9.call(this, startSide, endSide, widget, spec);
    _this7.block = block;
    _this7.isReplace = isReplace;
    _this7.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
    return _this7;
  }
  // Only relevant when this.block == true
  _createClass(PointDecoration, [{
    key: "type",
    get: function get() {
      return this.startSide < this.endSide ? BlockType.WidgetRange : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
    }
  }, {
    key: "heightRelevant",
    get: function get() {
      return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
    }
  }, {
    key: "eq",
    value: function eq(other) {
      return other instanceof PointDecoration && widgetsEq(this.widget, other.widget) && this.block == other.block && this.startSide == other.startSide && this.endSide == other.endSide;
    }
  }, {
    key: "range",
    value: function range(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
      if (this.isReplace && (from > to || from == to && this.startSide > 0 && this.endSide <= 0)) throw new RangeError("Invalid range for replacement decoration");
      if (!this.isReplace && to != from) throw new RangeError("Widget decorations can only have zero-length ranges");
      return _get(_getPrototypeOf(PointDecoration.prototype), "range", this).call(this, from, to);
    }
  }]);
  return PointDecoration;
}(Decoration);
PointDecoration.prototype.point = true;
function getInclusive(spec) {
  var block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var start = spec.inclusiveStart,
    end = spec.inclusiveEnd;
  if (start == null) start = spec.inclusive;
  if (end == null) end = spec.inclusive;
  return {
    start: start !== null && start !== void 0 ? start : block,
    end: end !== null && end !== void 0 ? end : block
  };
}
function widgetsEq(a, b) {
  return a == b || !!(a && b && a.compare(b));
}
function addRange(from, to, ranges) {
  var margin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var last = ranges.length - 1;
  if (last >= 0 && ranges[last] + margin >= from) ranges[last] = Math.max(ranges[last], to);else ranges.push(from, to);
}
var LineView = /*#__PURE__*/function (_ContentView5) {
  _inherits(LineView, _ContentView5);
  var _super10 = _createSuper(LineView);
  function LineView() {
    var _this8;
    _classCallCheck(this, LineView);
    _this8 = _super10.apply(this, arguments);
    _this8.children = [];
    _this8.length = 0;
    _this8.prevAttrs = undefined;
    _this8.attrs = null;
    _this8.breakAfter = 0;
    return _this8;
  }
  // Consumes source
  _createClass(LineView, [{
    key: "merge",
    value: function merge(from, to, source, hasStart, openStart, openEnd) {
      if (source) {
        if (!(source instanceof LineView)) return false;
        if (!this.dom) source.transferDOM(this); // Reuse source.dom when appropriate
      }

      if (hasStart) this.setDeco(source ? source.attrs : null);
      mergeChildrenInto(this, from, to, source ? source.children : [], openStart, openEnd);
      return true;
    }
  }, {
    key: "split",
    value: function split(at) {
      var end = new LineView();
      end.breakAfter = this.breakAfter;
      if (this.length == 0) return end;
      var _this$childPos = this.childPos(at),
        i = _this$childPos.i,
        off = _this$childPos.off;
      if (off) {
        end.append(this.children[i].split(off), 0);
        this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
        i++;
      }
      for (var j = i; j < this.children.length; j++) end.append(this.children[j], 0);
      while (i > 0 && this.children[i - 1].length == 0) this.children[--i].destroy();
      this.children.length = i;
      this.markDirty();
      this.length = at;
      return end;
    }
  }, {
    key: "transferDOM",
    value: function transferDOM(other) {
      if (!this.dom) return;
      this.markDirty();
      other.setDOM(this.dom);
      other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
      this.prevAttrs = undefined;
      this.dom = null;
    }
  }, {
    key: "setDeco",
    value: function setDeco(attrs) {
      if (!attrsEq(this.attrs, attrs)) {
        if (this.dom) {
          this.prevAttrs = this.attrs;
          this.markDirty();
        }
        this.attrs = attrs;
      }
    }
  }, {
    key: "append",
    value: function append(child, openStart) {
      joinInlineInto(this, child, openStart);
    }
    // Only called when building a line view in ContentBuilder
  }, {
    key: "addLineDeco",
    value: function addLineDeco(deco) {
      var attrs = deco.spec.attributes,
        cls = deco.spec["class"];
      if (attrs) this.attrs = combineAttrs(attrs, this.attrs || {});
      if (cls) this.attrs = combineAttrs({
        "class": cls
      }, this.attrs || {});
    }
  }, {
    key: "domAtPos",
    value: function domAtPos(pos) {
      return inlineDOMAtPos(this, pos);
    }
  }, {
    key: "reuseDOM",
    value: function reuseDOM(node) {
      if (node.nodeName == "DIV") {
        this.setDOM(node);
        this.dirty |= 4 /* Attrs */ | 2 /* Node */;
      }
    }
  }, {
    key: "sync",
    value: function sync(view, track) {
      var _a;
      if (!this.dom) {
        this.setDOM(document.createElement("div"));
        this.dom.className = "cm-line";
        this.prevAttrs = this.attrs ? null : undefined;
      } else if (this.dirty & 4 /* Attrs */) {
        clearAttributes(this.dom);
        this.dom.className = "cm-line";
        this.prevAttrs = this.attrs ? null : undefined;
      }
      if (this.prevAttrs !== undefined) {
        _updateAttrs(this.dom, this.prevAttrs, this.attrs);
        this.dom.classList.add("cm-line");
        this.prevAttrs = undefined;
      }
      _get(_getPrototypeOf(LineView.prototype), "sync", this).call(this, view, track);
      var last = this.dom.lastChild;
      while (last && ContentView.get(last) instanceof MarkView) last = last.lastChild;
      if (!last || !this.length || last.nodeName != "BR" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false && (!browser.ios || !this.children.some(function (ch) {
        return ch instanceof TextView;
      }))) {
        var hack = document.createElement("BR");
        hack.cmIgnore = true;
        this.dom.appendChild(hack);
      }
    }
  }, {
    key: "measureTextSize",
    value: function measureTextSize() {
      if (this.children.length == 0 || this.length > 20) return null;
      var totalWidth = 0,
        textHeight;
      var _iterator7 = _createForOfIteratorHelper(this.children),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var child = _step7.value;
          if (!(child instanceof TextView) || /[^ -~]/.test(child.text)) return null;
          var rects = clientRectsFor(child.dom);
          if (rects.length != 1) return null;
          totalWidth += rects[0].width;
          textHeight = rects[0].height;
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      return !totalWidth ? null : {
        lineHeight: this.dom.getBoundingClientRect().height,
        charWidth: totalWidth / this.length,
        textHeight: textHeight
      };
    }
  }, {
    key: "coordsAt",
    value: function coordsAt(pos, side) {
      var rect = coordsInChildren(this, pos, side);
      // Correct rectangle height for empty lines when the returned
      // height is larger than the text height.
      if (!this.children.length && rect && this.parent) {
        var heightOracle = this.parent.view.viewState.heightOracle,
          height = rect.bottom - rect.top;
        if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
          var dist = (height - heightOracle.textHeight) / 2;
          return {
            top: rect.top + dist,
            bottom: rect.bottom - dist,
            left: rect.left,
            right: rect.left
          };
        }
      }
      return rect;
    }
  }, {
    key: "become",
    value: function become(_other) {
      return false;
    }
  }, {
    key: "type",
    get: function get() {
      return BlockType.Text;
    }
  }], [{
    key: "find",
    value: function find(docView, pos) {
      for (var i = 0, off = 0; i < docView.children.length; i++) {
        var block = docView.children[i],
          end = off + block.length;
        if (end >= pos) {
          if (block instanceof LineView) return block;
          if (end > pos) break;
        }
        off = end + block.breakAfter;
      }
      return null;
    }
  }]);
  return LineView;
}(ContentView);
var BlockWidgetView = /*#__PURE__*/function (_ContentView6) {
  _inherits(BlockWidgetView, _ContentView6);
  var _super11 = _createSuper(BlockWidgetView);
  function BlockWidgetView(widget, length, type) {
    var _this9;
    _classCallCheck(this, BlockWidgetView);
    _this9 = _super11.call(this);
    _this9.widget = widget;
    _this9.length = length;
    _this9.type = type;
    _this9.breakAfter = 0;
    _this9.prevWidget = null;
    return _this9;
  }
  _createClass(BlockWidgetView, [{
    key: "merge",
    value: function merge(from, to, source, _takeDeco, openStart, openEnd) {
      if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
      this.length = from + (source ? source.length : 0) + (this.length - to);
      return true;
    }
  }, {
    key: "domAtPos",
    value: function domAtPos(pos) {
      return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
    }
  }, {
    key: "split",
    value: function split(at) {
      var len = this.length - at;
      this.length = at;
      var end = new BlockWidgetView(this.widget, len, this.type);
      end.breakAfter = this.breakAfter;
      return end;
    }
  }, {
    key: "children",
    get: function get() {
      return noChildren;
    }
  }, {
    key: "sync",
    value: function sync(view) {
      if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
        if (this.dom && this.prevWidget) this.prevWidget.destroy(this.dom);
        this.prevWidget = null;
        this.setDOM(this.widget.toDOM(view));
        this.dom.contentEditable = "false";
      }
    }
  }, {
    key: "overrideDOMText",
    get: function get() {
      return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
    }
  }, {
    key: "domBoundsAround",
    value: function domBoundsAround() {
      return null;
    }
  }, {
    key: "become",
    value: function become(other) {
      if (other instanceof BlockWidgetView && other.widget.constructor == this.widget.constructor) {
        if (!other.widget.compare(this.widget)) this.markDirty(true);
        if (this.dom && !this.prevWidget) this.prevWidget = this.widget;
        this.widget = other.widget;
        this.length = other.length;
        this.type = other.type;
        this.breakAfter = other.breakAfter;
        return true;
      }
      return false;
    }
  }, {
    key: "ignoreMutation",
    value: function ignoreMutation() {
      return true;
    }
  }, {
    key: "ignoreEvent",
    value: function ignoreEvent(event) {
      return this.widget.ignoreEvent(event);
    }
  }, {
    key: "isEditable",
    get: function get() {
      return false;
    }
  }, {
    key: "isWidget",
    get: function get() {
      return true;
    }
  }, {
    key: "coordsAt",
    value: function coordsAt(pos, side) {
      return this.widget.coordsAt(this.dom, pos, side);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(BlockWidgetView.prototype), "destroy", this).call(this);
      if (this.dom) this.widget.destroy(this.dom);
    }
  }]);
  return BlockWidgetView;
}(ContentView);
var ContentBuilder = /*#__PURE__*/function () {
  function ContentBuilder(doc, pos, end, disallowBlockEffectsFor) {
    _classCallCheck(this, ContentBuilder);
    this.doc = doc;
    this.pos = pos;
    this.end = end;
    this.disallowBlockEffectsFor = disallowBlockEffectsFor;
    this.content = [];
    this.curLine = null;
    this.breakAtStart = 0;
    this.pendingBuffer = 0 /* No */;
    this.bufferMarks = [];
    // Set to false directly after a widget that covers the position after it
    this.atCursorPos = true;
    this.openStart = -1;
    this.openEnd = -1;
    this.text = "";
    this.textOff = 0;
    this.cursor = doc.iter();
    this.skip = pos;
  }
  _createClass(ContentBuilder, [{
    key: "posCovered",
    value: function posCovered() {
      if (this.content.length == 0) return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
      var last = this.content[this.content.length - 1];
      return !last.breakAfter && !(last instanceof BlockWidgetView && last.type == BlockType.WidgetBefore);
    }
  }, {
    key: "getLine",
    value: function getLine() {
      if (!this.curLine) {
        this.content.push(this.curLine = new LineView());
        this.atCursorPos = true;
      }
      return this.curLine;
    }
  }, {
    key: "flushBuffer",
    value: function flushBuffer() {
      var active = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.bufferMarks;
      if (this.pendingBuffer) {
        this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
        this.pendingBuffer = 0 /* No */;
      }
    }
  }, {
    key: "addBlockWidget",
    value: function addBlockWidget(view) {
      this.flushBuffer();
      this.curLine = null;
      this.content.push(view);
    }
  }, {
    key: "finish",
    value: function finish(openEnd) {
      if (this.pendingBuffer && openEnd <= this.bufferMarks.length) this.flushBuffer();else this.pendingBuffer = 0 /* No */;
      if (!this.posCovered()) this.getLine();
    }
  }, {
    key: "buildText",
    value: function buildText(length, active, openStart) {
      while (length > 0) {
        if (this.textOff == this.text.length) {
          var _this$cursor$next = this.cursor.next(this.skip),
            value = _this$cursor$next.value,
            lineBreak = _this$cursor$next.lineBreak,
            done = _this$cursor$next.done;
          this.skip = 0;
          if (done) throw new Error("Ran out of text content when drawing inline views");
          if (lineBreak) {
            if (!this.posCovered()) this.getLine();
            if (this.content.length) this.content[this.content.length - 1].breakAfter = 1;else this.breakAtStart = 1;
            this.flushBuffer();
            this.curLine = null;
            this.atCursorPos = true;
            length--;
            continue;
          } else {
            this.text = value;
            this.textOff = 0;
          }
        }
        var take = Math.min(this.text.length - this.textOff, length, 512 /* Chunk */);
        this.flushBuffer(active.slice(active.length - openStart));
        this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
        this.atCursorPos = true;
        this.textOff += take;
        length -= take;
        openStart = 0;
      }
    }
  }, {
    key: "span",
    value: function span(from, to, active, openStart) {
      this.buildText(to - from, active, openStart);
      this.pos = to;
      if (this.openStart < 0) this.openStart = openStart;
    }
  }, {
    key: "point",
    value: function point(from, to, deco, active, openStart, index) {
      if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
        if (deco.block) throw new RangeError("Block decorations may not be specified via plugins");
        if (to > this.doc.lineAt(this.pos).to) throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
      }
      var len = to - from;
      if (deco instanceof PointDecoration) {
        if (deco.block) {
          var type = deco.type;
          if (type == BlockType.WidgetAfter && !this.posCovered()) this.getLine();
          this.addBlockWidget(new BlockWidgetView(deco.widget || new NullWidget("div"), len, type));
        } else {
          var view = WidgetView.create(deco.widget || new NullWidget("span"), len, len ? 0 : deco.startSide);
          var cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length && (from < to || deco.startSide > 0);
          var cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);
          var line = this.getLine();
          if (this.pendingBuffer == 2 /* IfCursor */ && !cursorBefore && !view.isEditable) this.pendingBuffer = 0 /* No */;
          this.flushBuffer(active);
          if (cursorBefore) {
            line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
            openStart = active.length + Math.max(0, openStart - active.length);
          }
          line.append(wrapMarks(view, active), openStart);
          this.atCursorPos = cursorAfter;
          this.pendingBuffer = !cursorAfter ? 0 /* No */ : from < to || openStart > active.length ? 1 /* Yes */ : 2 /* IfCursor */;
          if (this.pendingBuffer) this.bufferMarks = active.slice();
        }
      } else if (this.doc.lineAt(this.pos).from == this.pos) {
        // Line decoration
        this.getLine().addLineDeco(deco);
      }
      if (len) {
        // Advance the iterator past the replaced content
        if (this.textOff + len <= this.text.length) {
          this.textOff += len;
        } else {
          this.skip += len - (this.text.length - this.textOff);
          this.text = "";
          this.textOff = 0;
        }
        this.pos = to;
      }
      if (this.openStart < 0) this.openStart = openStart;
    }
  }], [{
    key: "build",
    value: function build(text, from, to, decorations, dynamicDecorationMap) {
      var builder = new ContentBuilder(text, from, to, dynamicDecorationMap);
      builder.openEnd = RangeSet.spans(decorations, from, to, builder);
      if (builder.openStart < 0) builder.openStart = builder.openEnd;
      builder.finish(builder.openEnd);
      return builder;
    }
  }]);
  return ContentBuilder;
}();
function wrapMarks(view, active) {
  var _iterator8 = _createForOfIteratorHelper(active),
    _step8;
  try {
    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
      var mark = _step8.value;
      view = new MarkView(mark, [view], view.length);
    }
  } catch (err) {
    _iterator8.e(err);
  } finally {
    _iterator8.f();
  }
  return view;
}
var NullWidget = /*#__PURE__*/function (_WidgetType) {
  _inherits(NullWidget, _WidgetType);
  var _super12 = _createSuper(NullWidget);
  function NullWidget(tag) {
    var _this10;
    _classCallCheck(this, NullWidget);
    _this10 = _super12.call(this);
    _this10.tag = tag;
    return _this10;
  }
  _createClass(NullWidget, [{
    key: "eq",
    value: function eq(other) {
      return other.tag == this.tag;
    }
  }, {
    key: "toDOM",
    value: function toDOM() {
      return document.createElement(this.tag);
    }
  }, {
    key: "updateDOM",
    value: function updateDOM(elt) {
      return elt.nodeName.toLowerCase() == this.tag;
    }
  }, {
    key: "isHidden",
    get: function get() {
      return true;
    }
  }]);
  return NullWidget;
}(WidgetType);
var clickAddsSelectionRange = /*@__PURE__*/Facet.define();
var dragMovesSelection$1 = /*@__PURE__*/Facet.define();
var mouseSelectionStyle = /*@__PURE__*/Facet.define();
var exceptionSink = /*@__PURE__*/Facet.define();
var updateListener = /*@__PURE__*/Facet.define();
var inputHandler$1 = /*@__PURE__*/Facet.define();
var focusChangeEffect = /*@__PURE__*/Facet.define();
var perLineTextDirection = /*@__PURE__*/Facet.define({
  combine: function combine(values) {
    return values.some(function (x) {
      return x;
    });
  }
});
var nativeSelectionHidden = /*@__PURE__*/Facet.define({
  combine: function combine(values) {
    return values.some(function (x) {
      return x;
    });
  }
});
var ScrollTarget = /*#__PURE__*/function () {
  function ScrollTarget(range) {
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "nearest";
    var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "nearest";
    var yMargin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 5;
    var xMargin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 5;
    _classCallCheck(this, ScrollTarget);
    this.range = range;
    this.y = y;
    this.x = x;
    this.yMargin = yMargin;
    this.xMargin = xMargin;
  }
  _createClass(ScrollTarget, [{
    key: "map",
    value: function map(changes) {
      return changes.empty ? this : new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin);
    }
  }]);
  return ScrollTarget;
}();
var _scrollIntoView2 = /*@__PURE__*/StateEffect.define({
  map: function map(t, ch) {
    return t.map(ch);
  }
});
/**
Log or report an unhandled exception in client code. Should
probably only be used by extension code that allows client code to
provide functions, and calls those functions in a context where an
exception can't be propagated to calling code in a reasonable way
(for example when in an event handler).

Either calls a handler registered with
[`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
`window.onerror`, if defined, or `console.error` (in which case
it'll pass `context`, when given, as first argument).
*/
function logException(state, exception, context) {
  var handler = state.facet(exceptionSink);
  if (handler.length) handler[0](exception);else if (window.onerror) window.onerror(String(exception), context, undefined, undefined, exception);else if (context) console.error(context + ":", exception);else console.error(exception);
}
var editable = /*@__PURE__*/Facet.define({
  combine: function combine(values) {
    return values.length ? values[0] : true;
  }
});
var nextPluginID = 0;
var viewPlugin = /*@__PURE__*/Facet.define();
/**
View plugins associate stateful values with a view. They can
influence the way the content is drawn, and are notified of things
that happen in the view.
*/
var ViewPlugin = /*#__PURE__*/function () {
  function ViewPlugin(
  /**
  @internal
  */
  id,
  /**
  @internal
  */
  create,
  /**
  @internal
  */
  domEventHandlers, buildExtensions) {
    _classCallCheck(this, ViewPlugin);
    this.id = id;
    this.create = create;
    this.domEventHandlers = domEventHandlers;
    this.extension = buildExtensions(this);
  }
  /**
  Define a plugin from a constructor function that creates the
  plugin's value, given an editor view.
  */
  _createClass(ViewPlugin, null, [{
    key: "define",
    value: function define(create, spec) {
      var _ref = spec || {},
        eventHandlers = _ref.eventHandlers,
        provide = _ref.provide,
        deco = _ref.decorations;
      return new ViewPlugin(nextPluginID++, create, eventHandlers, function (plugin) {
        var ext = [viewPlugin.of(plugin)];
        if (deco) ext.push(decorations.of(function (view) {
          var pluginInst = view.plugin(plugin);
          return pluginInst ? deco(pluginInst) : Decoration.none;
        }));
        if (provide) ext.push(provide(plugin));
        return ext;
      });
    }
    /**
    Create a plugin for a class whose constructor takes a single
    editor view as argument.
    */
  }, {
    key: "fromClass",
    value: function fromClass(cls, spec) {
      return ViewPlugin.define(function (view) {
        return new cls(view);
      }, spec);
    }
  }]);
  return ViewPlugin;
}();
var PluginInstance = /*#__PURE__*/function () {
  function PluginInstance(spec) {
    _classCallCheck(this, PluginInstance);
    this.spec = spec;
    // When starting an update, all plugins have this field set to the
    // update object, indicating they need to be updated. When finished
    // updating, it is set to `false`. Retrieving a plugin that needs to
    // be updated with `view.plugin` forces an eager update.
    this.mustUpdate = null;
    // This is null when the plugin is initially created, but
    // initialized on the first update.
    this.value = null;
  }
  _createClass(PluginInstance, [{
    key: "update",
    value: function update(view) {
      if (!this.value) {
        if (this.spec) {
          try {
            this.value = this.spec.create(view);
          } catch (e) {
            logException(view.state, e, "CodeMirror plugin crashed");
            this.deactivate();
          }
        }
      } else if (this.mustUpdate) {
        var update = this.mustUpdate;
        this.mustUpdate = null;
        if (this.value.update) {
          try {
            this.value.update(update);
          } catch (e) {
            logException(update.state, e, "CodeMirror plugin crashed");
            if (this.value.destroy) try {
              this.value.destroy();
            } catch (_) {}
            this.deactivate();
          }
        }
      }
      return this;
    }
  }, {
    key: "destroy",
    value: function destroy(view) {
      var _a;
      if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
        try {
          this.value.destroy();
        } catch (e) {
          logException(view.state, e, "CodeMirror plugin crashed");
        }
      }
    }
  }, {
    key: "deactivate",
    value: function deactivate() {
      this.spec = this.value = null;
    }
  }]);
  return PluginInstance;
}();
var editorAttributes = /*@__PURE__*/Facet.define();
var contentAttributes = /*@__PURE__*/Facet.define();
// Provide decorations
var decorations = /*@__PURE__*/Facet.define();
var atomicRanges = /*@__PURE__*/Facet.define();
var scrollMargins = /*@__PURE__*/Facet.define();
function getScrollMargins(view) {
  var left = 0,
    right = 0,
    top = 0,
    bottom = 0;
  var _iterator9 = _createForOfIteratorHelper(view.state.facet(scrollMargins)),
    _step9;
  try {
    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
      var source = _step9.value;
      var m = source(view);
      if (m) {
        if (m.left != null) left = Math.max(left, m.left);
        if (m.right != null) right = Math.max(right, m.right);
        if (m.top != null) top = Math.max(top, m.top);
        if (m.bottom != null) bottom = Math.max(bottom, m.bottom);
      }
    }
  } catch (err) {
    _iterator9.e(err);
  } finally {
    _iterator9.f();
  }
  return {
    left: left,
    right: right,
    top: top,
    bottom: bottom
  };
}
var styleModule = /*@__PURE__*/Facet.define();
var ChangedRange = /*#__PURE__*/function () {
  function ChangedRange(fromA, toA, fromB, toB) {
    _classCallCheck(this, ChangedRange);
    this.fromA = fromA;
    this.toA = toA;
    this.fromB = fromB;
    this.toB = toB;
  }
  _createClass(ChangedRange, [{
    key: "join",
    value: function join(other) {
      return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
    }
  }, {
    key: "addToSet",
    value: function addToSet(set) {
      var i = set.length,
        me = this;
      for (; i > 0; i--) {
        var range = set[i - 1];
        if (range.fromA > me.toA) continue;
        if (range.toA < me.fromA) break;
        me = me.join(range);
        set.splice(i - 1, 1);
      }
      set.splice(i, 0, me);
      return set;
    }
  }], [{
    key: "extendWithRanges",
    value: function extendWithRanges(diff, ranges) {
      if (ranges.length == 0) return diff;
      var result = [];
      for (var dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
        var next = dI == diff.length ? null : diff[dI],
          off = posA - posB;
        var end = next ? next.fromB : 1e9;
        while (rI < ranges.length && ranges[rI] < end) {
          var from = ranges[rI],
            to = ranges[rI + 1];
          var fromB = Math.max(posB, from),
            toB = Math.min(end, to);
          if (fromB <= toB) new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
          if (to > end) break;else rI += 2;
        }
        if (!next) return result;
        new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
        posA = next.toA;
        posB = next.toB;
      }
    }
  }]);
  return ChangedRange;
}();
/**
View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
class, which describe what happened, whenever the view is updated.
*/
var ViewUpdate = /*#__PURE__*/function () {
  function ViewUpdate(
  /**
  The editor view that the update is associated with.
  */
  view,
  /**
  The new editor state.
  */
  state,
  /**
  The transactions involved in the update. May be empty.
  */
  transactions) {
    _classCallCheck(this, ViewUpdate);
    this.view = view;
    this.state = state;
    this.transactions = transactions;
    /**
    @internal
    */
    this.flags = 0;
    this.startState = view.state;
    this.changes = ChangeSet.empty(this.startState.doc.length);
    var _iterator10 = _createForOfIteratorHelper(transactions),
      _step10;
    try {
      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
        var tr = _step10.value;
        this.changes = this.changes.compose(tr.changes);
      }
    } catch (err) {
      _iterator10.e(err);
    } finally {
      _iterator10.f();
    }
    var changedRanges = [];
    this.changes.iterChangedRanges(function (fromA, toA, fromB, toB) {
      return changedRanges.push(new ChangedRange(fromA, toA, fromB, toB));
    });
    this.changedRanges = changedRanges;
  }
  /**
  @internal
  */
  _createClass(ViewUpdate, [{
    key: "viewportChanged",
    get:
    /**
    Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
    [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
    update.
    */
    function get() {
      return (this.flags & 4 /* Viewport */) > 0;
    }
    /**
    Indicates whether the height of a block element in the editor
    changed in this update.
    */
  }, {
    key: "heightChanged",
    get: function get() {
      return (this.flags & 2 /* Height */) > 0;
    }
    /**
    Returns true when the document was modified or the size of the
    editor, or elements within the editor, changed.
    */
  }, {
    key: "geometryChanged",
    get: function get() {
      return this.docChanged || (this.flags & (8 /* Geometry */ | 2 /* Height */)) > 0;
    }
    /**
    True when this update indicates a focus change.
    */
  }, {
    key: "focusChanged",
    get: function get() {
      return (this.flags & 1 /* Focus */) > 0;
    }
    /**
    Whether the document changed in this update.
    */
  }, {
    key: "docChanged",
    get: function get() {
      return !this.changes.empty;
    }
    /**
    Whether the selection was explicitly set in this update.
    */
  }, {
    key: "selectionSet",
    get: function get() {
      return this.transactions.some(function (tr) {
        return tr.selection;
      });
    }
    /**
    @internal
    */
  }, {
    key: "empty",
    get: function get() {
      return this.flags == 0 && this.transactions.length == 0;
    }
  }], [{
    key: "create",
    value: function create(view, state, transactions) {
      return new ViewUpdate(view, state, transactions);
    }
  }]);
  return ViewUpdate;
}();
/**
Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
*/
var Direction = /*@__PURE__*/function (Direction) {
  // (These are chosen to match the base levels, in bidi algorithm
  // terms, of spans in that direction.)
  /**
  Left-to-right.
  */
  Direction[Direction["LTR"] = 0] = "LTR";
  /**
  Right-to-left.
  */
  Direction[Direction["RTL"] = 1] = "RTL";
  return Direction;
}(Direction || (Direction = {}));
var LTR = Direction.LTR,
  RTL = Direction.RTL;
// Decode a string with each type encoded as log2(type)
function dec(str) {
  var result = [];
  for (var i = 0; i < str.length; i++) result.push(1 << +str[i]);
  return result;
}
// Character types for codepoints 0 to 0xf8
var LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
// Character types for codepoints 0x600 to 0x6f9
var ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
var Brackets = /*@__PURE__*/Object.create(null),
  BracketStack = [];
// There's a lot more in
// https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
// which are left out to keep code size down.
for (var _i3 = 0, _arr$1 = ["()", "[]", "{}"]; _i3 < _arr$1.length; _i3++) {
  var p = _arr$1[_i3];
  var l = /*@__PURE__*/p.charCodeAt(0),
    r = /*@__PURE__*/p.charCodeAt(1);
  Brackets[l] = r;
  Brackets[r] = -l;
}
function charType(ch) {
  return ch <= 0xf7 ? LowTypes[ch] : 0x590 <= ch && ch <= 0x5f4 ? 2 /* R */ : 0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] : 0x6ee <= ch && ch <= 0x8ac ? 4 /* AL */ : 0x2000 <= ch && ch <= 0x200b ? 256 /* NI */ : 0xfb50 <= ch && ch <= 0xfdff ? 4 /* AL */ : ch == 0x200c ? 256 /* NI */ : 1 /* L */;
}

var BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
/**
Represents a contiguous range of text that has a single direction
(as in left-to-right or right-to-left).
*/
var BidiSpan = /*#__PURE__*/function () {
  /**
  @internal
  */
  function BidiSpan(
  /**
  The start of the span (relative to the start of the line).
  */
  from,
  /**
  The end of the span.
  */
  to,
  /**
  The ["bidi
  level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
  of the span (in this context, 0 means
  left-to-right, 1 means right-to-left, 2 means left-to-right
  number inside right-to-left text).
  */
  level) {
    _classCallCheck(this, BidiSpan);
    this.from = from;
    this.to = to;
    this.level = level;
  }
  /**
  The direction of this span.
  */
  _createClass(BidiSpan, [{
    key: "dir",
    get: function get() {
      return this.level % 2 ? RTL : LTR;
    }
    /**
    @internal
    */
  }, {
    key: "side",
    value: function side(end, dir) {
      return this.dir == dir == end ? this.to : this.from;
    }
    /**
    @internal
    */
  }], [{
    key: "find",
    value: function find(order, index, level, assoc) {
      var maybe = -1;
      for (var i = 0; i < order.length; i++) {
        var span = order[i];
        if (span.from <= index && span.to >= index) {
          if (span.level == level) return i;
          // When multiple spans match, if assoc != 0, take the one that
          // covers that side, otherwise take the one with the minimum
          // level.
          if (maybe < 0 || (assoc != 0 ? assoc < 0 ? span.from < index : span.to > index : order[maybe].level > span.level)) maybe = i;
        }
      }
      if (maybe < 0) throw new RangeError("Index out of range");
      return maybe;
    }
  }]);
  return BidiSpan;
}(); // Reused array of character types
var types = [];
function computeOrder(line, direction) {
  var len = line.length,
    outerType = direction == LTR ? 1 /* L */ : 2 /* R */,
    oppositeType = direction == LTR ? 2 /* R */ : 1 /* L */;
  if (!line || outerType == 1 /* L */ && !BidiRE.test(line)) return trivialOrder(len);
  // W1. Examine each non-spacing mark (NSM) in the level run, and
  // change the type of the NSM to the type of the previous
  // character. If the NSM is at the start of the level run, it will
  // get the type of sor.
  // W2. Search backwards from each instance of a European number
  // until the first strong type (R, L, AL, or sor) is found. If an
  // AL is found, change the type of the European number to Arabic
  // number.
  // W3. Change all ALs to R.
  // (Left after this: L, R, EN, AN, ET, CS, NI)
  for (var i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
    var type = charType(line.charCodeAt(i));
    if (type == 512 /* NSM */) type = prev;else if (type == 8 /* EN */ && prevStrong == 4 /* AL */) type = 16 /* AN */;
    types[i] = type == 4 /* AL */ ? 2 /* R */ : type;
    if (type & 7 /* Strong */) prevStrong = type;
    prev = type;
  }
  // W5. A sequence of European terminators adjacent to European
  // numbers changes to all European numbers.
  // W6. Otherwise, separators and terminators change to Other
  // Neutral.
  // W7. Search backwards from each instance of a European number
  // until the first strong type (R, L, or sor) is found. If an L is
  // found, then change the type of the European number to L.
  // (Left after this: L, R, EN+AN, NI)
  for (var _i4 = 0, _prev = outerType, _prevStrong = outerType; _i4 < len; _i4++) {
    var _type2 = types[_i4];
    if (_type2 == 128 /* CS */) {
      if (_i4 < len - 1 && _prev == types[_i4 + 1] && _prev & 24 /* Num */) _type2 = types[_i4] = _prev;else types[_i4] = 256 /* NI */;
    } else if (_type2 == 64 /* ET */) {
      var end = _i4 + 1;
      while (end < len && types[end] == 64 /* ET */) end++;
      var replace = _i4 && _prev == 8 /* EN */ || end < len && types[end] == 8 /* EN */ ? _prevStrong == 1 /* L */ ? 1 /* L */ : 8 /* EN */ : 256 /* NI */;
      for (var j = _i4; j < end; j++) types[j] = replace;
      _i4 = end - 1;
    } else if (_type2 == 8 /* EN */ && _prevStrong == 1 /* L */) {
      types[_i4] = 1 /* L */;
    }

    _prev = _type2;
    if (_type2 & 7 /* Strong */) _prevStrong = _type2;
  }
  // N0. Process bracket pairs in an isolating run sequence
  // sequentially in the logical order of the text positions of the
  // opening paired brackets using the logic given below. Within this
  // scope, bidirectional types EN and AN are treated as R.
  for (var _i5 = 0, sI = 0, context = 0, ch, br, _type3; _i5 < len; _i5++) {
    // Keeps [startIndex, type, strongSeen] triples for each open
    // bracket on BracketStack.
    if (br = Brackets[ch = line.charCodeAt(_i5)]) {
      if (br < 0) {
        // Closing bracket
        for (var sJ = sI - 3; sJ >= 0; sJ -= 3) {
          if (BracketStack[sJ + 1] == -br) {
            var flags = BracketStack[sJ + 2];
            var _type4 = flags & 2 /* EmbedInside */ ? outerType : !(flags & 4 /* OppositeInside */) ? 0 : flags & 1 /* OppositeBefore */ ? oppositeType : outerType;
            if (_type4) types[_i5] = types[BracketStack[sJ]] = _type4;
            sI = sJ;
            break;
          }
        }
      } else if (BracketStack.length == 189 /* MaxDepth */) {
        break;
      } else {
        BracketStack[sI++] = _i5;
        BracketStack[sI++] = ch;
        BracketStack[sI++] = context;
      }
    } else if ((_type3 = types[_i5]) == 2 /* R */ || _type3 == 1 /* L */) {
      var embed = _type3 == outerType;
      context = embed ? 0 : 1 /* OppositeBefore */;
      for (var _sJ = sI - 3; _sJ >= 0; _sJ -= 3) {
        var cur = BracketStack[_sJ + 2];
        if (cur & 2 /* EmbedInside */) break;
        if (embed) {
          BracketStack[_sJ + 2] |= 2 /* EmbedInside */;
        } else {
          if (cur & 4 /* OppositeInside */) break;
          BracketStack[_sJ + 2] |= 4 /* OppositeInside */;
        }
      }
    }
  }
  // N1. A sequence of neutrals takes the direction of the
  // surrounding strong text if the text on both sides has the same
  // direction. European and Arabic numbers act as if they were R in
  // terms of their influence on neutrals. Start-of-level-run (sor)
  // and end-of-level-run (eor) are used at level run boundaries.
  // N2. Any remaining neutrals take the embedding direction.
  // (Left after this: L, R, EN+AN)
  for (var _i6 = 0; _i6 < len; _i6++) {
    if (types[_i6] == 256 /* NI */) {
      var _end = _i6 + 1;
      while (_end < len && types[_end] == 256 /* NI */) _end++;
      var beforeL = (_i6 ? types[_i6 - 1] : outerType) == 1 /* L */;
      var afterL = (_end < len ? types[_end] : outerType) == 1 /* L */;
      var _replace = beforeL == afterL ? beforeL ? 1 /* L */ : 2 /* R */ : outerType;
      for (var _j2 = _i6; _j2 < _end; _j2++) types[_j2] = _replace;
      _i6 = _end - 1;
    }
  }
  // Here we depart from the documented algorithm, in order to avoid
  // building up an actual levels array. Since there are only three
  // levels (0, 1, 2) in an implementation that doesn't take
  // explicit embedding into account, we can build up the order on
  // the fly, without following the level-based algorithm.
  var order = [];
  if (outerType == 1 /* L */) {
    for (var _i7 = 0; _i7 < len;) {
      var start = _i7,
        rtl = types[_i7++] != 1 /* L */;
      while (_i7 < len && rtl == (types[_i7] != 1 /* L */)) _i7++;
      if (rtl) {
        for (var _j3 = _i7; _j3 > start;) {
          var _end2 = _j3,
            _l = types[--_j3] != 2 /* R */;
          while (_j3 > start && _l == (types[_j3 - 1] != 2 /* R */)) _j3--;
          order.push(new BidiSpan(_j3, _end2, _l ? 2 : 1));
        }
      } else {
        order.push(new BidiSpan(start, _i7, 0));
      }
    }
  } else {
    for (var _i8 = 0; _i8 < len;) {
      var _start2 = _i8,
        _rtl = types[_i8++] == 2 /* R */;
      while (_i8 < len && _rtl == (types[_i8] == 2 /* R */)) _i8++;
      order.push(new BidiSpan(_start2, _i8, _rtl ? 1 : 2));
    }
  }
  return order;
}
function trivialOrder(length) {
  return [new BidiSpan(0, length, 0)];
}
var movedOver = "";
function moveVisually(line, order, dir, start, forward) {
  var _a;
  var startIndex = start.head - line.from,
    spanI = -1;
  if (startIndex == 0) {
    if (!forward || !line.length) return null;
    if (order[0].level != dir) {
      startIndex = order[0].side(false, dir);
      spanI = 0;
    }
  } else if (startIndex == line.length) {
    if (forward) return null;
    var last = order[order.length - 1];
    if (last.level != dir) {
      startIndex = last.side(true, dir);
      spanI = order.length - 1;
    }
  }
  if (spanI < 0) spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
  var span = order[spanI];
  // End of span. (But not end of line--that was checked for above.)
  if (startIndex == span.side(forward, dir)) {
    span = order[spanI += forward ? 1 : -1];
    startIndex = span.side(!forward, dir);
  }
  var indexForward = forward == (span.dir == dir);
  var nextIndex = findClusterBreak(line.text, startIndex, indexForward);
  movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
  if (nextIndex != span.side(forward, dir)) return EditorSelection.cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);
  var nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
  if (!nextSpan && span.level != dir) return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);
  if (nextSpan && nextSpan.level < span.level) return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, forward ? 1 : -1, nextSpan.level);
  return EditorSelection.cursor(nextIndex + line.from, forward ? -1 : 1, span.level);
}
var LineBreakPlaceholder = "\uFFFF";
var DOMReader = /*#__PURE__*/function () {
  function DOMReader(points, state) {
    _classCallCheck(this, DOMReader);
    this.points = points;
    this.text = "";
    this.lineSeparator = state.facet(EditorState.lineSeparator);
  }
  _createClass(DOMReader, [{
    key: "append",
    value: function append(text) {
      this.text += text;
    }
  }, {
    key: "lineBreak",
    value: function lineBreak() {
      this.text += LineBreakPlaceholder;
    }
  }, {
    key: "readRange",
    value: function readRange(start, end) {
      if (!start) return this;
      var parent = start.parentNode;
      for (var cur = start;;) {
        this.findPointBefore(parent, cur);
        var oldLen = this.text.length;
        this.readNode(cur);
        var next = cur.nextSibling;
        if (next == end) break;
        var view = ContentView.get(cur),
          nextView = ContentView.get(next);
        if (view && nextView ? view.breakAfter : (view ? view.breakAfter : isBlockElement(cur)) || isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore) && this.text.length > oldLen) this.lineBreak();
        cur = next;
      }
      this.findPointBefore(parent, end);
      return this;
    }
  }, {
    key: "readTextNode",
    value: function readTextNode(node) {
      var text = node.nodeValue;
      var _iterator11 = _createForOfIteratorHelper(this.points),
        _step11;
      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var _point = _step11.value;
          if (_point.node == node) _point.pos = this.text.length + Math.min(_point.offset, text.length);
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }
      for (var off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g;;) {
        var nextBreak = -1,
          breakSize = 1,
          m = void 0;
        if (this.lineSeparator) {
          nextBreak = text.indexOf(this.lineSeparator, off);
          breakSize = this.lineSeparator.length;
        } else if (m = re.exec(text)) {
          nextBreak = m.index;
          breakSize = m[0].length;
        }
        this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
        if (nextBreak < 0) break;
        this.lineBreak();
        if (breakSize > 1) {
          var _iterator12 = _createForOfIteratorHelper(this.points),
            _step12;
          try {
            for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
              var point = _step12.value;
              if (point.node == node && point.pos > this.text.length) point.pos -= breakSize - 1;
            }
          } catch (err) {
            _iterator12.e(err);
          } finally {
            _iterator12.f();
          }
        }
        off = nextBreak + breakSize;
      }
    }
  }, {
    key: "readNode",
    value: function readNode(node) {
      if (node.cmIgnore) return;
      var view = ContentView.get(node);
      var fromView = view && view.overrideDOMText;
      if (fromView != null) {
        this.findPointInside(node, fromView.length);
        for (var i = fromView.iter(); !i.next().done;) {
          if (i.lineBreak) this.lineBreak();else this.append(i.value);
        }
      } else if (node.nodeType == 3) {
        this.readTextNode(node);
      } else if (node.nodeName == "BR") {
        if (node.nextSibling) this.lineBreak();
      } else if (node.nodeType == 1) {
        this.readRange(node.firstChild, null);
      }
    }
  }, {
    key: "findPointBefore",
    value: function findPointBefore(node, next) {
      var _iterator13 = _createForOfIteratorHelper(this.points),
        _step13;
      try {
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          var point = _step13.value;
          if (point.node == node && node.childNodes[point.offset] == next) point.pos = this.text.length;
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }
    }
  }, {
    key: "findPointInside",
    value: function findPointInside(node, maxLen) {
      var _iterator14 = _createForOfIteratorHelper(this.points),
        _step14;
      try {
        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
          var point = _step14.value;
          if (node.nodeType == 3 ? point.node == node : node.contains(point.node)) point.pos = this.text.length + Math.min(maxLen, point.offset);
        }
      } catch (err) {
        _iterator14.e(err);
      } finally {
        _iterator14.f();
      }
    }
  }]);
  return DOMReader;
}();
function isBlockElement(node) {
  return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
}
var DOMPoint = /*#__PURE__*/_createClass(function DOMPoint(node, offset) {
  _classCallCheck(this, DOMPoint);
  this.node = node;
  this.offset = offset;
  this.pos = -1;
});
var DocView = /*#__PURE__*/function (_ContentView7) {
  _inherits(DocView, _ContentView7);
  var _super13 = _createSuper(DocView);
  function DocView(view) {
    var _this11;
    _classCallCheck(this, DocView);
    _this11 = _super13.call(this);
    _this11.view = view;
    _this11.compositionDeco = Decoration.none;
    _this11.decorations = [];
    _this11.dynamicDecorationMap = [];
    // Track a minimum width for the editor. When measuring sizes in
    // measureVisibleLineHeights, this is updated to point at the width
    // of a given element and its extent in the document. When a change
    // happens in that range, these are reset. That way, once we've seen
    // a line/element of a given length, we keep the editor wide enough
    // to fit at least that element, until it is changed, at which point
    // we forget it again.
    _this11.minWidth = 0;
    _this11.minWidthFrom = 0;
    _this11.minWidthTo = 0;
    // Track whether the DOM selection was set in a lossy way, so that
    // we don't mess it up when reading it back it
    _this11.impreciseAnchor = null;
    _this11.impreciseHead = null;
    _this11.forceSelection = false;
    // Used by the resize observer to ignore resizes that we caused
    // ourselves
    _this11.lastUpdate = Date.now();
    _this11.setDOM(view.contentDOM);
    _this11.children = [new LineView()];
    _this11.children[0].setParent(_assertThisInitialized(_this11));
    _this11.updateDeco();
    _this11.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0);
    return _this11;
  }
  _createClass(DocView, [{
    key: "length",
    get: function get() {
      return this.view.state.doc.length;
    }
    // Update the document view to a given state.
  }, {
    key: "update",
    value: function update(_update) {
      var _this12 = this;
      var changedRanges = _update.changedRanges;
      if (this.minWidth > 0 && changedRanges.length) {
        if (!changedRanges.every(function (_ref2) {
          var fromA = _ref2.fromA,
            toA = _ref2.toA;
          return toA < _this12.minWidthFrom || fromA > _this12.minWidthTo;
        })) {
          this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
        } else {
          this.minWidthFrom = _update.changes.mapPos(this.minWidthFrom, 1);
          this.minWidthTo = _update.changes.mapPos(this.minWidthTo, 1);
        }
      }
      if (this.view.inputState.composing < 0) this.compositionDeco = Decoration.none;else if (_update.transactions.length || this.dirty) this.compositionDeco = computeCompositionDeco(this.view, _update.changes);
      // When the DOM nodes around the selection are moved to another
      // parent, Chrome sometimes reports a different selection through
      // getSelection than the one that it actually shows to the user.
      // This forces a selection update when lines are joined to work
      // around that. Issue #54
      if ((browser.ie || browser.chrome) && !this.compositionDeco.size && _update && _update.state.doc.lines != _update.startState.doc.lines) this.forceSelection = true;
      var prevDeco = this.decorations,
        deco = this.updateDeco();
      var decoDiff = findChangedDeco(prevDeco, deco, _update.changes);
      changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
      if (this.dirty == 0 /* Not */ && changedRanges.length == 0) {
        return false;
      } else {
        this.updateInner(changedRanges, _update.startState.doc.length);
        if (_update.transactions.length) this.lastUpdate = Date.now();
        return true;
      }
    }
    // Used by update and the constructor do perform the actual DOM
    // update
  }, {
    key: "updateInner",
    value: function updateInner(changes, oldLength) {
      var _this13 = this;
      this.view.viewState.mustMeasureContent = true;
      this.updateChildren(changes, oldLength);
      var observer = this.view.observer;
      observer.ignore(function () {
        // Lock the height during redrawing, since Chrome sometimes
        // messes with the scroll position during DOM mutation (though
        // no relayout is triggered and I cannot imagine how it can
        // recompute the scroll position without a layout)
        _this13.dom.style.height = _this13.view.viewState.contentHeight + "px";
        _this13.dom.style.flexBasis = _this13.minWidth ? _this13.minWidth + "px" : "";
        // Chrome will sometimes, when DOM mutations occur directly
        // around the selection, get confused and report a different
        // selection from the one it displays (issue #218). This tries
        // to detect that situation.
        var track = browser.chrome || browser.ios ? {
          node: observer.selectionRange.focusNode,
          written: false
        } : undefined;
        _this13.sync(_this13.view, track);
        _this13.dirty = 0 /* Not */;
        if (track && (track.written || observer.selectionRange.focusNode != track.node)) _this13.forceSelection = true;
        _this13.dom.style.height = "";
      });
      var gaps = [];
      if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length) {
        var _iterator15 = _createForOfIteratorHelper(this.children),
          _step15;
        try {
          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
            var child = _step15.value;
            if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget) gaps.push(child.dom);
          }
        } catch (err) {
          _iterator15.e(err);
        } finally {
          _iterator15.f();
        }
      }
      observer.updateGaps(gaps);
    }
  }, {
    key: "updateChildren",
    value: function updateChildren(changes, oldLength) {
      var cursor = this.childCursor(oldLength);
      for (var i = changes.length - 1;; i--) {
        var next = i >= 0 ? changes[i] : null;
        if (!next) break;
        var fromA = next.fromA,
          toA = next.toA,
          fromB = next.fromB,
          toB = next.toB;
        var _ContentBuilder$build = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap),
          content = _ContentBuilder$build.content,
          breakAtStart = _ContentBuilder$build.breakAtStart,
          openStart = _ContentBuilder$build.openStart,
          openEnd = _ContentBuilder$build.openEnd;
        var _cursor$findPos = cursor.findPos(toA, 1),
          toI = _cursor$findPos.i,
          toOff = _cursor$findPos.off;
        var _cursor$findPos2 = cursor.findPos(fromA, -1),
          fromI = _cursor$findPos2.i,
          fromOff = _cursor$findPos2.off;
        replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
      }
    }
    // Sync the DOM selection to this.state.selection
  }, {
    key: "updateSelection",
    value: function updateSelection() {
      var _this14 = this;
      var mustRead = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var fromPointer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      if (mustRead || !this.view.observer.selectionRange.focusNode) this.view.observer.readSelectionRange();
      var activeElt = this.view.root.activeElement,
        focused = activeElt == this.dom;
      var selectionNotFocus = !focused && hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
      if (!(focused || fromPointer || selectionNotFocus)) return;
      var force = this.forceSelection;
      this.forceSelection = false;
      var main = this.view.state.selection.main;
      // FIXME need to handle the case where the selection falls inside a block range
      var anchor = this.domAtPos(main.anchor);
      var head = main.empty ? anchor : this.domAtPos(main.head);
      // Always reset on Firefox when next to an uneditable node to
      // avoid invisible cursor bugs (#111)
      if (browser.gecko && main.empty && !this.compositionDeco.size && betweenUneditable(anchor)) {
        var dummy = document.createTextNode("");
        this.view.observer.ignore(function () {
          return anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null);
        });
        anchor = head = new DOMPos(dummy, 0);
        force = true;
      }
      var domSel = this.view.observer.selectionRange;
      // If the selection is already here, or in an equivalent position, don't touch it
      if (force || !domSel.focusNode || !isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) || !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {
        this.view.observer.ignore(function () {
          // Chrome Android will hide the virtual keyboard when tapping
          // inside an uneditable node, and not bring it back when we
          // move the cursor to its proper position. This tries to
          // restore the keyboard by cycling focus.
          if (browser.android && browser.chrome && _this14.dom.contains(domSel.focusNode) && inUneditable(domSel.focusNode, _this14.dom)) {
            _this14.dom.blur();
            _this14.dom.focus({
              preventScroll: true
            });
          }
          var rawSel = getSelection(_this14.view.root);
          if (!rawSel) ;else if (main.empty) {
            // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
            if (browser.gecko) {
              var nextTo = nextToUneditable(anchor.node, anchor.offset);
              if (nextTo && nextTo != (1 /* Before */ | 2 /* After */)) {
                var text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1 /* Before */ ? 1 : -1);
                if (text) anchor = new DOMPos(text, nextTo == 1 /* Before */ ? 0 : text.nodeValue.length);
              }
            }
            rawSel.collapse(anchor.node, anchor.offset);
            if (main.bidiLevel != null && domSel.cursorBidiLevel != null) domSel.cursorBidiLevel = main.bidiLevel;
          } else if (rawSel.extend) {
            // Selection.extend can be used to create an 'inverted' selection
            // (one where the focus is before the anchor), but not all
            // browsers support it yet.
            rawSel.collapse(anchor.node, anchor.offset);
            // Safari will ignore the call above when the editor is
            // hidden, and then raise an error on the call to extend
            // (#940).
            try {
              rawSel.extend(head.node, head.offset);
            } catch (_) {}
          } else {
            // Primitive (IE) way
            var range = document.createRange();
            if (main.anchor > main.head) {
              var _ref3 = [head, anchor];
              anchor = _ref3[0];
              head = _ref3[1];
            }
            range.setEnd(head.node, head.offset);
            range.setStart(anchor.node, anchor.offset);
            rawSel.removeAllRanges();
            rawSel.addRange(range);
          }
          if (selectionNotFocus && _this14.view.root.activeElement == _this14.dom) {
            _this14.dom.blur();
            if (activeElt) activeElt.focus();
          }
        });
        this.view.observer.setSelectionRange(anchor, head);
      }
      this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
      this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
    }
  }, {
    key: "enforceCursorAssoc",
    value: function enforceCursorAssoc() {
      if (this.compositionDeco.size) return;
      var view = this.view,
        cursor = view.state.selection.main;
      var sel = getSelection(view.root);
      var _view$observer$select = view.observer.selectionRange,
        anchorNode = _view$observer$select.anchorNode,
        anchorOffset = _view$observer$select.anchorOffset;
      if (!sel || !cursor.empty || !cursor.assoc || !sel.modify) return;
      var line = LineView.find(this, cursor.head);
      if (!line) return;
      var lineStart = line.posAtStart;
      if (cursor.head == lineStart || cursor.head == lineStart + line.length) return;
      var before = this.coordsAt(cursor.head, -1),
        after = this.coordsAt(cursor.head, 1);
      if (!before || !after || before.bottom > after.top) return;
      var dom = this.domAtPos(cursor.head + cursor.assoc);
      sel.collapse(dom.node, dom.offset);
      sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
      // This can go wrong in corner cases like single-character lines,
      // so check and reset if necessary.
      view.observer.readSelectionRange();
      var newRange = view.observer.selectionRange;
      if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from) sel.collapse(anchorNode, anchorOffset);
    }
  }, {
    key: "nearest",
    value: function nearest(dom) {
      for (var cur = dom; cur;) {
        var domView = ContentView.get(cur);
        if (domView && domView.rootView == this) return domView;
        cur = cur.parentNode;
      }
      return null;
    }
  }, {
    key: "posFromDOM",
    value: function posFromDOM(node, offset) {
      var view = this.nearest(node);
      if (!view) throw new RangeError("Trying to find position for a DOM position outside of the document");
      return view.localPosFromDOM(node, offset) + view.posAtStart;
    }
  }, {
    key: "domAtPos",
    value: function domAtPos(pos) {
      var _this$childCursor$fin = this.childCursor().findPos(pos, -1),
        i = _this$childCursor$fin.i,
        off = _this$childCursor$fin.off;
      for (; i < this.children.length - 1;) {
        var child = this.children[i];
        if (off < child.length || child instanceof LineView) break;
        i++;
        off = 0;
      }
      return this.children[i].domAtPos(off);
    }
  }, {
    key: "coordsAt",
    value: function coordsAt(pos, side) {
      for (var off = this.length, i = this.children.length - 1;; i--) {
        var child = this.children[i],
          start = off - child.breakAfter - child.length;
        if (pos > start || pos == start && child.type != BlockType.WidgetBefore && child.type != BlockType.WidgetAfter && (!i || side == 2 || this.children[i - 1].breakAfter || this.children[i - 1].type == BlockType.WidgetBefore && side > -2)) return child.coordsAt(pos - start, side);
        off = start;
      }
    }
  }, {
    key: "measureVisibleLineHeights",
    value: function measureVisibleLineHeights(viewport) {
      var result = [],
        from = viewport.from,
        to = viewport.to;
      var contentWidth = this.view.contentDOM.clientWidth;
      var isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
      var widest = -1,
        ltr = this.view.textDirection == Direction.LTR;
      for (var pos = 0, i = 0; i < this.children.length; i++) {
        var child = this.children[i],
          end = pos + child.length;
        if (end > to) break;
        if (pos >= from) {
          var childRect = child.dom.getBoundingClientRect();
          result.push(childRect.height);
          if (isWider) {
            var last = child.dom.lastChild;
            var rects = last ? clientRectsFor(last) : [];
            if (rects.length) {
              var rect = rects[rects.length - 1];
              var width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
              if (width > widest) {
                widest = width;
                this.minWidth = contentWidth;
                this.minWidthFrom = pos;
                this.minWidthTo = end;
              }
            }
          }
        }
        pos = end + child.breakAfter;
      }
      return result;
    }
  }, {
    key: "textDirectionAt",
    value: function textDirectionAt(pos) {
      var _this$childPos2 = this.childPos(pos, 1),
        i = _this$childPos2.i;
      return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
    }
  }, {
    key: "measureTextSize",
    value: function measureTextSize() {
      var _this15 = this;
      var _iterator16 = _createForOfIteratorHelper(this.children),
        _step16;
      try {
        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
          var child = _step16.value;
          if (child instanceof LineView) {
            var measure = child.measureTextSize();
            if (measure) return measure;
          }
        }
        // If no workable line exists, force a layout of a measurable element
      } catch (err) {
        _iterator16.e(err);
      } finally {
        _iterator16.f();
      }
      var dummy = document.createElement("div"),
        lineHeight,
        charWidth,
        textHeight;
      dummy.className = "cm-line";
      dummy.style.width = "99999px";
      dummy.textContent = "abc def ghi jkl mno pqr stu";
      this.view.observer.ignore(function () {
        _this15.dom.appendChild(dummy);
        var rect = clientRectsFor(dummy.firstChild)[0];
        lineHeight = dummy.getBoundingClientRect().height;
        charWidth = rect ? rect.width / 27 : 7;
        textHeight = rect ? rect.height : lineHeight;
        dummy.remove();
      });
      return {
        lineHeight: lineHeight,
        charWidth: charWidth,
        textHeight: textHeight
      };
    }
  }, {
    key: "childCursor",
    value: function childCursor() {
      var pos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length;
      // Move back to start of last element when possible, so that
      // `ChildCursor.findPos` doesn't have to deal with the edge case
      // of being after the last element.
      var i = this.children.length;
      if (i) pos -= this.children[--i].length;
      return new ChildCursor(this.children, pos, i);
    }
  }, {
    key: "computeBlockGapDeco",
    value: function computeBlockGapDeco() {
      var deco = [],
        vs = this.view.viewState;
      for (var pos = 0, i = 0;; i++) {
        var next = i == vs.viewports.length ? null : vs.viewports[i];
        var end = next ? next.from - 1 : this.length;
        if (end > pos) {
          var height = vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top;
          deco.push(Decoration.replace({
            widget: new BlockGapWidget(height),
            block: true,
            inclusive: true,
            isBlockGap: true
          }).range(pos, end));
        }
        if (!next) break;
        pos = next.to + 1;
      }
      return Decoration.set(deco);
    }
  }, {
    key: "updateDeco",
    value: function updateDeco() {
      var _this16 = this;
      var allDeco = this.view.state.facet(decorations).map(function (d, i) {
        var dynamic = _this16.dynamicDecorationMap[i] = typeof d == "function";
        return dynamic ? d(_this16.view) : d;
      });
      for (var i = allDeco.length; i < allDeco.length + 3; i++) this.dynamicDecorationMap[i] = false;
      return this.decorations = [].concat(_toConsumableArray(allDeco), [this.compositionDeco, this.computeBlockGapDeco(), this.view.viewState.lineGapDeco]);
    }
  }, {
    key: "scrollIntoView",
    value: function scrollIntoView(target) {
      var range = target.range;
      var rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1),
        other;
      if (!rect) return;
      if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1))) rect = {
        left: Math.min(rect.left, other.left),
        top: Math.min(rect.top, other.top),
        right: Math.max(rect.right, other.right),
        bottom: Math.max(rect.bottom, other.bottom)
      };
      var margins = getScrollMargins(this.view);
      var targetRect = {
        left: rect.left - margins.left,
        top: rect.top - margins.top,
        right: rect.right + margins.right,
        bottom: rect.bottom + margins.bottom
      };
      scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, target.xMargin, target.yMargin, this.view.textDirection == Direction.LTR);
    }
  }]);
  return DocView;
}(ContentView);
function betweenUneditable(pos) {
  return pos.node.nodeType == 1 && pos.node.firstChild && (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") && (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
}
var BlockGapWidget = /*#__PURE__*/function (_WidgetType2) {
  _inherits(BlockGapWidget, _WidgetType2);
  var _super14 = _createSuper(BlockGapWidget);
  function BlockGapWidget(height) {
    var _this17;
    _classCallCheck(this, BlockGapWidget);
    _this17 = _super14.call(this);
    _this17.height = height;
    return _this17;
  }
  _createClass(BlockGapWidget, [{
    key: "toDOM",
    value: function toDOM() {
      var elt = document.createElement("div");
      this.updateDOM(elt);
      return elt;
    }
  }, {
    key: "eq",
    value: function eq(other) {
      return other.height == this.height;
    }
  }, {
    key: "updateDOM",
    value: function updateDOM(elt) {
      elt.style.height = this.height + "px";
      return true;
    }
  }, {
    key: "estimatedHeight",
    get: function get() {
      return this.height;
    }
  }]);
  return BlockGapWidget;
}(WidgetType);
function compositionSurroundingNode(view) {
  var sel = view.observer.selectionRange;
  var textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);
  if (!textNode) return null;
  var cView = view.docView.nearest(textNode);
  if (!cView) return null;
  if (cView instanceof LineView) {
    var topNode = textNode;
    while (topNode.parentNode != cView.dom) topNode = topNode.parentNode;
    var prev = topNode.previousSibling;
    while (prev && !ContentView.get(prev)) prev = prev.previousSibling;
    var pos = prev ? ContentView.get(prev).posAtEnd : cView.posAtStart;
    return {
      from: pos,
      to: pos,
      node: topNode,
      text: textNode
    };
  } else {
    for (;;) {
      var _cView = cView,
        parent = _cView.parent;
      if (!parent) return null;
      if (parent instanceof LineView) break;
      cView = parent;
    }
    var from = cView.posAtStart;
    return {
      from: from,
      to: from + cView.length,
      node: cView.dom,
      text: textNode
    };
  }
}
function computeCompositionDeco(view, changes) {
  var surrounding = compositionSurroundingNode(view);
  if (!surrounding) return Decoration.none;
  var from = surrounding.from,
    to = surrounding.to,
    node = surrounding.node,
    textNode = surrounding.text;
  var newFrom = changes.mapPos(from, 1),
    newTo = Math.max(newFrom, changes.mapPos(to, -1));
  var state = view.state,
    reader = new DOMReader([], state);
  if (node.nodeType == 3) reader.readTextNode(node);else reader.readRange(node.firstChild, null);
  var text = reader.text;
  if (text.indexOf(LineBreakPlaceholder) > -1) return Decoration.none; // Don't try to preserve multi-line compositions
  if (newTo - newFrom < text.length) {
    if (state.doc.sliceString(newFrom, Math.min(state.doc.length, newFrom + text.length)) == text) newTo = newFrom + text.length;else if (state.doc.sliceString(Math.max(0, newTo - text.length), newTo) == text) newFrom = newTo - text.length;else return Decoration.none;
  } else if (state.doc.sliceString(newFrom, newTo) != text) {
    return Decoration.none;
  }
  var topView = ContentView.get(node);
  if (topView instanceof CompositionView) topView = topView.widget.topView;else if (topView) topView.parent = null;
  return Decoration.set(Decoration.replace({
    widget: new CompositionWidget(node, textNode, topView),
    inclusive: true
  }).range(newFrom, newTo));
}
var CompositionWidget = /*#__PURE__*/function (_WidgetType3) {
  _inherits(CompositionWidget, _WidgetType3);
  var _super15 = _createSuper(CompositionWidget);
  function CompositionWidget(top, text, topView) {
    var _this18;
    _classCallCheck(this, CompositionWidget);
    _this18 = _super15.call(this);
    _this18.top = top;
    _this18.text = text;
    _this18.topView = topView;
    return _this18;
  }
  _createClass(CompositionWidget, [{
    key: "eq",
    value: function eq(other) {
      return this.top == other.top && this.text == other.text;
    }
  }, {
    key: "toDOM",
    value: function toDOM() {
      return this.top;
    }
  }, {
    key: "ignoreEvent",
    value: function ignoreEvent() {
      return false;
    }
  }, {
    key: "customView",
    get: function get() {
      return CompositionView;
    }
  }]);
  return CompositionWidget;
}(WidgetType);
function nearbyTextNode(startNode, startOffset, side) {
  if (side <= 0) for (var node = startNode, offset = startOffset;;) {
    if (node.nodeType == 3) return node;
    if (node.nodeType == 1 && offset > 0) {
      node = node.childNodes[offset - 1];
      offset = maxOffset(node);
    } else {
      break;
    }
  }
  if (side >= 0) for (var _node = startNode, _offset = startOffset;;) {
    if (_node.nodeType == 3) return _node;
    if (_node.nodeType == 1 && _offset < _node.childNodes.length && side >= 0) {
      _node = _node.childNodes[_offset];
      _offset = 0;
    } else {
      break;
    }
  }
  return null;
}
function nextToUneditable(node, offset) {
  if (node.nodeType != 1) return 0;
  return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* Before */ : 0) | (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* After */ : 0);
}
var DecorationComparator$1 = /*#__PURE__*/function () {
  function DecorationComparator$1() {
    _classCallCheck(this, DecorationComparator$1);
    this.changes = [];
  }
  _createClass(DecorationComparator$1, [{
    key: "compareRange",
    value: function compareRange(from, to) {
      addRange(from, to, this.changes);
    }
  }, {
    key: "comparePoint",
    value: function comparePoint(from, to) {
      addRange(from, to, this.changes);
    }
  }]);
  return DecorationComparator$1;
}();
function findChangedDeco(a, b, diff) {
  var comp = new DecorationComparator$1();
  RangeSet.compare(a, b, diff, comp);
  return comp.changes;
}
function inUneditable(node, inside) {
  for (var cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {
    if (cur.nodeType == 1 && cur.contentEditable == 'false') {
      return true;
    }
  }
  return false;
}
function groupAt(state, pos) {
  var bias = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  var categorize = state.charCategorizer(pos);
  var line = state.doc.lineAt(pos),
    linePos = pos - line.from;
  if (line.length == 0) return EditorSelection.cursor(pos);
  if (linePos == 0) bias = 1;else if (linePos == line.length) bias = -1;
  var from = linePos,
    to = linePos;
  if (bias < 0) from = findClusterBreak(line.text, linePos, false);else to = findClusterBreak(line.text, linePos);
  var cat = categorize(line.text.slice(from, to));
  while (from > 0) {
    var prev = findClusterBreak(line.text, from, false);
    if (categorize(line.text.slice(prev, from)) != cat) break;
    from = prev;
  }
  while (to < line.length) {
    var next = findClusterBreak(line.text, to);
    if (categorize(line.text.slice(to, next)) != cat) break;
    to = next;
  }
  return EditorSelection.range(from + line.from, to + line.from);
}
// Search the DOM for the {node, offset} position closest to the given
// coordinates. Very inefficient and crude, but can usually be avoided
// by calling caret(Position|Range)FromPoint instead.
function getdx(x, rect) {
  return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
}
function getdy(y, rect) {
  return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
}
function yOverlap(a, b) {
  return a.top < b.bottom - 1 && a.bottom > b.top + 1;
}
function upTop(rect, top) {
  return top < rect.top ? {
    top: top,
    left: rect.left,
    right: rect.right,
    bottom: rect.bottom
  } : rect;
}
function upBot(rect, bottom) {
  return bottom > rect.bottom ? {
    top: rect.top,
    left: rect.left,
    right: rect.right,
    bottom: bottom
  } : rect;
}
function domPosAtCoords(parent, x, y) {
  var closest,
    closestRect,
    closestX,
    closestY,
    closestOverlap = false;
  var above, below, aboveRect, belowRect;
  for (var child = parent.firstChild; child; child = child.nextSibling) {
    var rects = clientRectsFor(child);
    for (var i = 0; i < rects.length; i++) {
      var rect = rects[i];
      if (closestRect && yOverlap(closestRect, rect)) rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
      var dx = getdx(x, rect),
        dy = getdy(y, rect);
      if (dx == 0 && dy == 0) return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
      if (!closest || closestY > dy || closestY == dy && closestX > dx) {
        closest = child;
        closestRect = rect;
        closestX = dx;
        closestY = dy;
        var side = dy ? y < rect.top ? -1 : 1 : dx ? x < rect.left ? -1 : 1 : 0;
        closestOverlap = !side || (side > 0 ? i < rects.length - 1 : i > 0);
      }
      if (dx == 0) {
        if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
          above = child;
          aboveRect = rect;
        } else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
          below = child;
          belowRect = rect;
        }
      } else if (aboveRect && yOverlap(aboveRect, rect)) {
        aboveRect = upBot(aboveRect, rect.bottom);
      } else if (belowRect && yOverlap(belowRect, rect)) {
        belowRect = upTop(belowRect, rect.top);
      }
    }
  }
  if (aboveRect && aboveRect.bottom >= y) {
    closest = above;
    closestRect = aboveRect;
  } else if (belowRect && belowRect.top <= y) {
    closest = below;
    closestRect = belowRect;
  }
  if (!closest) return {
    node: parent,
    offset: 0
  };
  var clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
  if (closest.nodeType == 3) return domPosInText(closest, clipX, y);
  if (closestOverlap && closest.contentEditable != "false") return domPosAtCoords(closest, clipX, y);
  var offset = Array.prototype.indexOf.call(parent.childNodes, closest) + (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
  return {
    node: parent,
    offset: offset
  };
}
function domPosInText(node, x, y) {
  var len = node.nodeValue.length;
  var closestOffset = -1,
    closestDY = 1e9,
    generalSide = 0;
  for (var i = 0; i < len; i++) {
    var rects = textRange(node, i, i + 1).getClientRects();
    for (var j = 0; j < rects.length; j++) {
      var rect = rects[j];
      if (rect.top == rect.bottom) continue;
      if (!generalSide) generalSide = x - rect.left;
      var dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
      if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
        var right = x >= (rect.left + rect.right) / 2,
          after = right;
        if (browser.chrome || browser.gecko) {
          // Check for RTL on browsers that support getting client
          // rects for empty ranges.
          var rectBefore = textRange(node, i).getBoundingClientRect();
          if (rectBefore.left == rect.right) after = !right;
        }
        if (dy <= 0) return {
          node: node,
          offset: i + (after ? 1 : 0)
        };
        closestOffset = i + (after ? 1 : 0);
        closestDY = dy;
      }
    }
  }
  return {
    node: node,
    offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0
  };
}
function _posAtCoords(view, coords, precise) {
  var bias = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;
  var _a, _b;
  var content = view.contentDOM.getBoundingClientRect(),
    docTop = content.top + view.viewState.paddingTop;
  var block,
    docHeight = view.viewState.docHeight;
  var x = coords.x,
    y = coords.y,
    yOffset = y - docTop;
  if (yOffset < 0) return 0;
  if (yOffset > docHeight) return view.state.doc.length;
  // Scan for a text block near the queried y position
  for (var halfLine = view.defaultLineHeight / 2, bounced = false;;) {
    block = view.elementAtHeight(yOffset);
    if (block.type == BlockType.Text) break;
    for (;;) {
      // Move the y position out of this block
      yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
      if (yOffset >= 0 && yOffset <= docHeight) break;
      // If the document consists entirely of replaced widgets, we
      // won't find a text block, so return 0
      if (bounced) return precise ? null : 0;
      bounced = true;
      bias = -bias;
    }
  }
  y = docTop + yOffset;
  var lineStart = block.from;
  // If this is outside of the rendered viewport, we can't determine a position
  if (lineStart < view.viewport.from) return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
  if (lineStart > view.viewport.to) return view.viewport.to == view.state.doc.length ? view.state.doc.length : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
  // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not
  var doc = view.dom.ownerDocument;
  var root = view.root.elementFromPoint ? view.root : doc;
  var element = root.elementFromPoint(x, y);
  if (element && !view.contentDOM.contains(element)) element = null;
  // If the element is unexpected, clip x at the sides of the content area and try again
  if (!element) {
    x = Math.max(content.left + 1, Math.min(content.right - 1, x));
    element = root.elementFromPoint(x, y);
    if (element && !view.contentDOM.contains(element)) element = null;
  }
  // There's visible editor content under the point, so we can try
  // using caret(Position|Range)FromPoint as a shortcut
  var node,
    offset = -1;
  if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {
    if (doc.caretPositionFromPoint) {
      var pos = doc.caretPositionFromPoint(x, y);
      if (pos) {
        node = pos.offsetNode;
        offset = pos.offset;
      }
    } else if (doc.caretRangeFromPoint) {
      var range = doc.caretRangeFromPoint(x, y);
      if (range) {
        node = range.startContainer;
        offset = range.startOffset;
        if (!view.contentDOM.contains(node) || browser.safari && isSuspiciousSafariCaretResult(node, offset, x) || browser.chrome && isSuspiciousChromeCaretResult(node, offset, x)) node = undefined;
      }
    }
  }
  // No luck, do our own (potentially expensive) search
  if (!node || !view.docView.dom.contains(node)) {
    var line = LineView.find(view.docView, lineStart);
    if (!line) return yOffset > block.top + block.height / 2 ? block.to : block.from;
    var _domPosAtCoords = domPosAtCoords(line.dom, x, y);
    node = _domPosAtCoords.node;
    offset = _domPosAtCoords.offset;
  }
  var nearest = view.docView.nearest(node);
  if (!nearest) return null;
  if (nearest.isWidget && ((_b = nearest.dom) === null || _b === void 0 ? void 0 : _b.nodeType) == 1) {
    var rect = nearest.dom.getBoundingClientRect();
    return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2 ? nearest.posAtStart : nearest.posAtEnd;
  } else {
    return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;
  }
}
function posAtCoordsImprecise(view, contentRect, block, x, y) {
  var into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
  if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
    var line = Math.floor((y - block.top) / view.defaultLineHeight);
    into += line * view.viewState.heightOracle.lineLength;
  }
  var content = view.state.sliceDoc(block.from, block.to);
  return block.from + findColumn(content, into, view.state.tabSize);
}
// In case of a high line height, Safari's caretRangeFromPoint treats
// the space between lines as belonging to the last character of the
// line before. This is used to detect such a result so that it can be
// ignored (issue #401).
function isSuspiciousSafariCaretResult(node, offset, x) {
  var len;
  if (node.nodeType != 3 || offset != (len = node.nodeValue.length)) return false;
  for (var next = node.nextSibling; next; next = next.nextSibling) if (next.nodeType != 1 || next.nodeName != "BR") return false;
  return textRange(node, len - 1, len).getBoundingClientRect().left > x;
}
// Chrome will move positions between lines to the start of the next line
function isSuspiciousChromeCaretResult(node, offset, x) {
  if (offset != 0) return false;
  for (var cur = node;;) {
    var parent = cur.parentNode;
    if (!parent || parent.nodeType != 1 || parent.firstChild != cur) return false;
    if (parent.classList.contains("cm-line")) break;
    cur = parent;
  }
  var rect = node.nodeType == 1 ? node.getBoundingClientRect() : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
  return x - rect.left > 5;
}
function blockAt(view, pos) {
  var line = view.lineBlockAt(pos);
  if (Array.isArray(line.type)) {
    var _iterator17 = _createForOfIteratorHelper(line.type),
      _step17;
    try {
      for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
        var _l2 = _step17.value;
        if (_l2.to > pos || _l2.to == pos && (_l2.to == line.to || _l2.type == BlockType.Text)) return _l2;
      }
    } catch (err) {
      _iterator17.e(err);
    } finally {
      _iterator17.f();
    }
  }
  return line;
}
function _moveToLineBoundary(view, start, forward, includeWrap) {
  var line = blockAt(view, start.head);
  var coords = !includeWrap || line.type != BlockType.Text || !(view.lineWrapping || line.widgetLineBreaks) ? null : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
  if (coords) {
    var editorRect = view.dom.getBoundingClientRect();
    var direction = view.textDirectionAt(line.from);
    var pos = view.posAtCoords({
      x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
      y: (coords.top + coords.bottom) / 2
    });
    if (pos != null) return EditorSelection.cursor(pos, forward ? -1 : 1);
  }
  return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1);
}
function _moveByChar(view, start, forward, by) {
  var line = view.state.doc.lineAt(start.head),
    spans = view.bidiSpans(line);
  var direction = view.textDirectionAt(line.from);
  for (var cur = start, check = null;;) {
    var next = moveVisually(line, spans, direction, cur, forward),
      _char = movedOver;
    if (!next) {
      if (line.number == (forward ? view.state.doc.lines : 1)) return cur;
      _char = "\n";
      line = view.state.doc.line(line.number + (forward ? 1 : -1));
      spans = view.bidiSpans(line);
      next = EditorSelection.cursor(forward ? line.from : line.to);
    }
    if (!check) {
      if (!by) return next;
      check = by(_char);
    } else if (!check(_char)) {
      return cur;
    }
    cur = next;
  }
}
function byGroup(view, pos, start) {
  var categorize = view.state.charCategorizer(pos);
  var cat = categorize(start);
  return function (next) {
    var nextCat = categorize(next);
    if (cat == CharCategory.Space) cat = nextCat;
    return cat == nextCat;
  };
}
function _moveVertically(view, start, forward, distance) {
  var startPos = start.head,
    dir = forward ? 1 : -1;
  if (startPos == (forward ? view.state.doc.length : 0)) return EditorSelection.cursor(startPos, start.assoc);
  var goal = start.goalColumn,
    startY;
  var rect = view.contentDOM.getBoundingClientRect();
  var startCoords = view.coordsAtPos(startPos),
    docTop = view.documentTop;
  if (startCoords) {
    if (goal == null) goal = startCoords.left - rect.left;
    startY = dir < 0 ? startCoords.top : startCoords.bottom;
  } else {
    var line = view.viewState.lineBlockAt(startPos);
    if (goal == null) goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
    startY = (dir < 0 ? line.top : line.bottom) + docTop;
  }
  var resolvedGoal = rect.left + goal;
  var dist = distance !== null && distance !== void 0 ? distance : view.defaultLineHeight >> 1;
  for (var extra = 0;; extra += 10) {
    var curY = startY + (dist + extra) * dir;
    var pos = _posAtCoords(view, {
      x: resolvedGoal,
      y: curY
    }, false, dir);
    if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) return EditorSelection.cursor(pos, start.assoc, undefined, goal);
  }
}
function skipAtomicRanges(atoms, pos, bias) {
  var _loop = function _loop() {
    var moved = 0;
    var _iterator18 = _createForOfIteratorHelper(atoms),
      _step18;
    try {
      for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
        var set = _step18.value;
        set.between(pos - 1, pos + 1, function (from, to, value) {
          if (pos > from && pos < to) {
            var side = moved || bias || (pos - from < to - pos ? -1 : 1);
            pos = side < 0 ? from : to;
            moved = side;
          }
        });
      }
    } catch (err) {
      _iterator18.e(err);
    } finally {
      _iterator18.f();
    }
    if (!moved) return {
      v: pos
    };
  };
  for (;;) {
    var _ret = _loop();
    if (_typeof(_ret) === "object") return _ret.v;
  }
}
function skipAtoms(view, oldPos, pos) {
  var newPos = skipAtomicRanges(view.state.facet(atomicRanges).map(function (f) {
    return f(view);
  }), pos.from, oldPos.head > pos.from ? -1 : 1);
  return newPos == pos.from ? pos : EditorSelection.cursor(newPos, newPos < pos.from ? 1 : -1);
}

// This will also be where dragging info and such goes
var InputState = /*#__PURE__*/function () {
  function InputState(view) {
    var _this19 = this;
    _classCallCheck(this, InputState);
    this.lastKeyCode = 0;
    this.lastKeyTime = 0;
    this.lastTouchTime = 0;
    this.lastFocusTime = 0;
    this.lastScrollTop = 0;
    this.lastScrollLeft = 0;
    this.chromeScrollHack = -1;
    // On iOS, some keys need to have their default behavior happen
    // (after which we retroactively handle them and reset the DOM) to
    // avoid messing up the virtual keyboard state.
    this.pendingIOSKey = undefined;
    this.lastSelectionOrigin = null;
    this.lastSelectionTime = 0;
    this.lastEscPress = 0;
    this.lastContextMenu = 0;
    this.scrollHandlers = [];
    this.registeredEvents = [];
    this.customHandlers = [];
    // -1 means not in a composition. Otherwise, this counts the number
    // of changes made during the composition. The count is used to
    // avoid treating the start state of the composition, before any
    // changes have been made, as part of the composition.
    this.composing = -1;
    // Tracks whether the next change should be marked as starting the
    // composition (null means no composition, true means next is the
    // first, false means first has already been marked for this
    // composition)
    this.compositionFirstChange = null;
    // End time of the previous composition
    this.compositionEndedAt = 0;
    // Used in a kludge to detect when an Enter keypress should be
    // considered part of the composition on Safari, which fires events
    // in the wrong order
    this.compositionPendingKey = false;
    // Used to categorize changes as part of a composition, even when
    // the mutation events fire shortly after the compositionend event
    this.compositionPendingChange = false;
    this.mouseSelection = null;
    var handleEvent = function handleEvent(handler, event) {
      if (_this19.ignoreDuringComposition(event)) return;
      if (event.type == "keydown" && _this19.keydown(view, event)) return;
      if (_this19.mustFlushObserver(event)) view.observer.forceFlush();
      if (_this19.runCustomHandlers(event.type, view, event)) event.preventDefault();else handler(view, event);
    };
    var _loop2 = function _loop2() {
      var handler = handlers[type];
      view.contentDOM.addEventListener(type, function (event) {
        if (eventBelongsToEditor(view, event)) handleEvent(handler, event);
      }, handlerOptions[type]);
      _this19.registeredEvents.push(type);
    };
    for (var type in handlers) {
      _loop2();
    }
    view.scrollDOM.addEventListener("mousedown", function (event) {
      if (event.target == view.scrollDOM && event.clientY > view.contentDOM.getBoundingClientRect().bottom) {
        handleEvent(handlers.mousedown, event);
        if (!event.defaultPrevented && event.button == 2) {
          // Make sure the content covers the entire scroller height, in order
          // to catch a native context menu click below it
          var start = view.contentDOM.style.minHeight;
          view.contentDOM.style.minHeight = "100%";
          setTimeout(function () {
            return view.contentDOM.style.minHeight = start;
          }, 200);
        }
      }
    });
    view.scrollDOM.addEventListener("drop", function (event) {
      if (event.target == view.scrollDOM && event.clientY > view.contentDOM.getBoundingClientRect().bottom) handleEvent(handlers.drop, event);
    });
    if (browser.chrome && browser.chrome_version == 102) {
      // FIXME remove at some point
      // On Chrome 102, viewport updates somehow stop wheel-based
      // scrolling. Turning off pointer events during the scroll seems
      // to avoid the issue.
      view.scrollDOM.addEventListener("wheel", function () {
        if (_this19.chromeScrollHack < 0) view.contentDOM.style.pointerEvents = "none";else window.clearTimeout(_this19.chromeScrollHack);
        _this19.chromeScrollHack = setTimeout(function () {
          _this19.chromeScrollHack = -1;
          view.contentDOM.style.pointerEvents = "";
        }, 100);
      }, {
        passive: true
      });
    }
    this.notifiedFocused = view.hasFocus;
    // On Safari adding an input event handler somehow prevents an
    // issue where the composition vanishes when you press enter.
    if (browser.safari) view.contentDOM.addEventListener("input", function () {
      return null;
    });
  }
  _createClass(InputState, [{
    key: "setSelectionOrigin",
    value: function setSelectionOrigin(origin) {
      this.lastSelectionOrigin = origin;
      this.lastSelectionTime = Date.now();
    }
  }, {
    key: "ensureHandlers",
    value: function ensureHandlers(view, plugins) {
      var _this20 = this;
      var _a;
      var handlers;
      this.customHandlers = [];
      var _iterator19 = _createForOfIteratorHelper(plugins),
        _step19;
      try {
        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
          var _plugin2 = _step19.value;
          if (handlers = (_a = _plugin2.update(view).spec) === null || _a === void 0 ? void 0 : _a.domEventHandlers) {
            this.customHandlers.push({
              plugin: _plugin2.value,
              handlers: handlers
            });
            var _loop3 = function _loop3(type) {
              if (_this20.registeredEvents.indexOf(type) < 0 && type != "scroll") {
                _this20.registeredEvents.push(type);
                view.contentDOM.addEventListener(type, function (event) {
                  if (!eventBelongsToEditor(view, event)) return;
                  if (_this20.runCustomHandlers(type, view, event)) event.preventDefault();
                });
              }
            };
            for (var type in handlers) {
              _loop3(type);
            }
          }
        }
      } catch (err) {
        _iterator19.e(err);
      } finally {
        _iterator19.f();
      }
    }
  }, {
    key: "runCustomHandlers",
    value: function runCustomHandlers(type, view, event) {
      var _iterator20 = _createForOfIteratorHelper(this.customHandlers),
        _step20;
      try {
        for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
          var set = _step20.value;
          var handler = set.handlers[type];
          if (handler) {
            try {
              if (handler.call(set.plugin, event, view) || event.defaultPrevented) return true;
            } catch (e) {
              logException(view.state, e);
            }
          }
        }
      } catch (err) {
        _iterator20.e(err);
      } finally {
        _iterator20.f();
      }
      return false;
    }
  }, {
    key: "runScrollHandlers",
    value: function runScrollHandlers(view, event) {
      this.lastScrollTop = view.scrollDOM.scrollTop;
      this.lastScrollLeft = view.scrollDOM.scrollLeft;
      var _iterator21 = _createForOfIteratorHelper(this.customHandlers),
        _step21;
      try {
        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
          var set = _step21.value;
          var handler = set.handlers.scroll;
          if (handler) {
            try {
              handler.call(set.plugin, event, view);
            } catch (e) {
              logException(view.state, e);
            }
          }
        }
      } catch (err) {
        _iterator21.e(err);
      } finally {
        _iterator21.f();
      }
    }
  }, {
    key: "keydown",
    value: function keydown(view, event) {
      var _this21 = this;
      // Must always run, even if a custom handler handled the event
      this.lastKeyCode = event.keyCode;
      this.lastKeyTime = Date.now();
      if (event.keyCode == 9 && Date.now() < this.lastEscPress + 2000) return true;
      if (event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0) view.inputState.lastEscPress = 0;
      // Chrome for Android usually doesn't fire proper key events, but
      // occasionally does, usually surrounded by a bunch of complicated
      // composition changes. When an enter or backspace key event is
      // seen, hold off on handling DOM events for a bit, and then
      // dispatch it.
      if (browser.android && browser.chrome && !event.synthetic && (event.keyCode == 13 || event.keyCode == 8)) {
        view.observer.delayAndroidKey(event.key, event.keyCode);
        return true;
      }
      // Prevent the default behavior of Enter on iOS makes the
      // virtual keyboard get stuck in the wrong (lowercase)
      // state. So we let it go through, and then, in
      // applyDOMChange, notify key handlers of it and reset to
      // the state they produce.
      var pending;
      if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey && ((pending = PendingKeys.find(function (key) {
        return key.keyCode == event.keyCode;
      })) && !event.ctrlKey || EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
        this.pendingIOSKey = pending || event;
        setTimeout(function () {
          return _this21.flushIOSKey(view);
        }, 250);
        return true;
      }
      return false;
    }
  }, {
    key: "flushIOSKey",
    value: function flushIOSKey(view) {
      var key = this.pendingIOSKey;
      if (!key) return false;
      this.pendingIOSKey = undefined;
      return dispatchKey(view.contentDOM, key.key, key.keyCode);
    }
  }, {
    key: "ignoreDuringComposition",
    value: function ignoreDuringComposition(event) {
      if (!/^key/.test(event.type)) return false;
      if (this.composing > 0) return true;
      // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
      // On some input method editors (IMEs), the Enter key is used to
      // confirm character selection. On Safari, when Enter is pressed,
      // compositionend and keydown events are sometimes emitted in the
      // wrong order. The key event should still be ignored, even when
      // it happens after the compositionend event.
      if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
        this.compositionPendingKey = false;
        return true;
      }
      return false;
    }
  }, {
    key: "mustFlushObserver",
    value: function mustFlushObserver(event) {
      return event.type == "keydown" && event.keyCode != 229;
    }
  }, {
    key: "startMouseSelection",
    value: function startMouseSelection(mouseSelection) {
      if (this.mouseSelection) this.mouseSelection.destroy();
      this.mouseSelection = mouseSelection;
    }
  }, {
    key: "update",
    value: function update(_update2) {
      if (this.mouseSelection) this.mouseSelection.update(_update2);
      if (_update2.transactions.length) this.lastKeyCode = this.lastSelectionTime = 0;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.mouseSelection) this.mouseSelection.destroy();
    }
  }]);
  return InputState;
}();
var PendingKeys = [{
  key: "Backspace",
  keyCode: 8,
  inputType: "deleteContentBackward"
}, {
  key: "Enter",
  keyCode: 13,
  inputType: "insertParagraph"
}, {
  key: "Delete",
  keyCode: 46,
  inputType: "deleteContentForward"
}];
var EmacsyPendingKeys = "dthko";
// Key codes for modifier keys
var modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
var dragScrollMargin = 6;
function dragScrollSpeed(dist) {
  return Math.max(0, dist) * 0.7 + 8;
}
var MouseSelection = /*#__PURE__*/function () {
  function MouseSelection(view, startEvent, style, mustSelect) {
    _classCallCheck(this, MouseSelection);
    this.view = view;
    this.style = style;
    this.mustSelect = mustSelect;
    this.scrollSpeed = {
      x: 0,
      y: 0
    };
    this.scrolling = -1;
    this.lastEvent = startEvent;
    this.scrollParent = scrollableParent(view.contentDOM);
    this.atoms = view.state.facet(atomicRanges).map(function (f) {
      return f(view);
    });
    var doc = view.contentDOM.ownerDocument;
    doc.addEventListener("mousemove", this.move = this.move.bind(this));
    doc.addEventListener("mouseup", this.up = this.up.bind(this));
    this.extend = startEvent.shiftKey;
    this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
    this.dragMove = dragMovesSelection(view, startEvent);
    this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
  }
  _createClass(MouseSelection, [{
    key: "start",
    value: function start(event) {
      // When clicking outside of the selection, immediately apply the
      // effect of starting the selection
      if (this.dragging === false) {
        event.preventDefault();
        this.select(event);
      }
    }
  }, {
    key: "move",
    value: function move(event) {
      var _a;
      if (event.buttons == 0) return this.destroy();
      if (this.dragging !== false) return;
      this.select(this.lastEvent = event);
      var sx = 0,
        sy = 0;
      var rect = ((_a = this.scrollParent) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) || {
        left: 0,
        top: 0,
        right: this.view.win.innerWidth,
        bottom: this.view.win.innerHeight
      };
      var margins = getScrollMargins(this.view);
      if (event.clientX - margins.left <= rect.left + dragScrollMargin) sx = -dragScrollSpeed(rect.left - event.clientX);else if (event.clientX + margins.right >= rect.right - dragScrollMargin) sx = dragScrollSpeed(event.clientX - rect.right);
      if (event.clientY - margins.top <= rect.top + dragScrollMargin) sy = -dragScrollSpeed(rect.top - event.clientY);else if (event.clientY + margins.bottom >= rect.bottom - dragScrollMargin) sy = dragScrollSpeed(event.clientY - rect.bottom);
      this.setScrollSpeed(sx, sy);
    }
  }, {
    key: "up",
    value: function up(event) {
      if (this.dragging == null) this.select(this.lastEvent);
      if (!this.dragging) event.preventDefault();
      this.destroy();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.setScrollSpeed(0, 0);
      var doc = this.view.contentDOM.ownerDocument;
      doc.removeEventListener("mousemove", this.move);
      doc.removeEventListener("mouseup", this.up);
      this.view.inputState.mouseSelection = null;
    }
  }, {
    key: "setScrollSpeed",
    value: function setScrollSpeed(sx, sy) {
      var _this22 = this;
      this.scrollSpeed = {
        x: sx,
        y: sy
      };
      if (sx || sy) {
        if (this.scrolling < 0) this.scrolling = setInterval(function () {
          return _this22.scroll();
        }, 50);
      } else if (this.scrolling > -1) {
        clearInterval(this.scrolling);
        this.scrolling = -1;
      }
    }
  }, {
    key: "scroll",
    value: function scroll() {
      if (this.scrollParent) {
        this.scrollParent.scrollLeft += this.scrollSpeed.x;
        this.scrollParent.scrollTop += this.scrollSpeed.y;
      } else {
        this.view.win.scrollBy(this.scrollSpeed.x, this.scrollSpeed.y);
      }
      if (this.dragging === false) this.select(this.lastEvent);
    }
  }, {
    key: "skipAtoms",
    value: function skipAtoms(sel) {
      var ranges = null;
      for (var i = 0; i < sel.ranges.length; i++) {
        var range = sel.ranges[i],
          updated = null;
        if (range.empty) {
          var pos = skipAtomicRanges(this.atoms, range.from, 0);
          if (pos != range.from) updated = EditorSelection.cursor(pos, -1);
        } else {
          var from = skipAtomicRanges(this.atoms, range.from, -1);
          var to = skipAtomicRanges(this.atoms, range.to, 1);
          if (from != range.from || to != range.to) updated = EditorSelection.range(range.from == range.anchor ? from : to, range.from == range.head ? from : to);
        }
        if (updated) {
          if (!ranges) ranges = sel.ranges.slice();
          ranges[i] = updated;
        }
      }
      return ranges ? EditorSelection.create(ranges, sel.mainIndex) : sel;
    }
  }, {
    key: "select",
    value: function select(event) {
      var view = this.view,
        selection = this.skipAtoms(this.style.get(event, this.extend, this.multiple));
      if (this.mustSelect || !selection.eq(view.state.selection) || selection.main.assoc != view.state.selection.main.assoc) this.view.dispatch({
        selection: selection,
        userEvent: "select.pointer"
      });
      this.mustSelect = false;
    }
  }, {
    key: "update",
    value: function update(_update3) {
      var _this23 = this;
      if (_update3.docChanged && this.dragging) this.dragging = this.dragging.map(_update3.changes);
      if (this.style.update(_update3)) setTimeout(function () {
        return _this23.select(_this23.lastEvent);
      }, 20);
    }
  }]);
  return MouseSelection;
}();
function addsSelectionRange(view, event) {
  var facet = view.state.facet(clickAddsSelectionRange);
  return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
}
function dragMovesSelection(view, event) {
  var facet = view.state.facet(dragMovesSelection$1);
  return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
}
function isInPrimarySelection(view, event) {
  var main = view.state.selection.main;
  if (main.empty) return false;
  // On boundary clicks, check whether the coordinates are inside the
  // selection's client rectangles
  var sel = getSelection(view.root);
  if (!sel || sel.rangeCount == 0) return true;
  var rects = sel.getRangeAt(0).getClientRects();
  for (var i = 0; i < rects.length; i++) {
    var rect = rects[i];
    if (rect.left <= event.clientX && rect.right >= event.clientX && rect.top <= event.clientY && rect.bottom >= event.clientY) return true;
  }
  return false;
}
function eventBelongsToEditor(view, event) {
  if (!event.bubbles) return true;
  if (event.defaultPrevented) return false;
  for (var node = event.target, cView; node != view.contentDOM; node = node.parentNode) if (!node || node.nodeType == 11 || (cView = ContentView.get(node)) && cView.ignoreEvent(event)) return false;
  return true;
}
var handlers = /*@__PURE__*/Object.create(null);
var handlerOptions = /*@__PURE__*/Object.create(null);
// This is very crude, but unfortunately both these browsers _pretend_
// that they have a clipboard API—all the objects and methods are
// there, they just don't work, and they are hard to test.
var brokenClipboardAPI = browser.ie && browser.ie_version < 15 || browser.ios && browser.webkit_version < 604;
function capturePaste(view) {
  var parent = view.dom.parentNode;
  if (!parent) return;
  var target = parent.appendChild(document.createElement("textarea"));
  target.style.cssText = "position: fixed; left: -10000px; top: 10px";
  target.focus();
  setTimeout(function () {
    view.focus();
    target.remove();
    doPaste(view, target.value);
  }, 50);
}
function doPaste(view, input) {
  var state = view.state,
    changes,
    i = 1,
    text = state.toText(input);
  var byLine = text.lines == state.selection.ranges.length;
  var linewise = lastLinewiseCopy != null && state.selection.ranges.every(function (r) {
    return r.empty;
  }) && lastLinewiseCopy == text.toString();
  if (linewise) {
    var lastLine = -1;
    changes = state.changeByRange(function (range) {
      var line = state.doc.lineAt(range.from);
      if (line.from == lastLine) return {
        range: range
      };
      lastLine = line.from;
      var insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
      return {
        changes: {
          from: line.from,
          insert: insert
        },
        range: EditorSelection.cursor(range.from + insert.length)
      };
    });
  } else if (byLine) {
    changes = state.changeByRange(function (range) {
      var line = text.line(i++);
      return {
        changes: {
          from: range.from,
          to: range.to,
          insert: line.text
        },
        range: EditorSelection.cursor(range.from + line.length)
      };
    });
  } else {
    changes = state.replaceSelection(text);
  }
  view.dispatch(changes, {
    userEvent: "input.paste",
    scrollIntoView: true
  });
}
handlers.keydown = function (view, event) {
  view.inputState.setSelectionOrigin("select");
  if (event.keyCode == 27) view.inputState.lastEscPress = Date.now();
};
handlers.touchstart = function (view, e) {
  view.inputState.lastTouchTime = Date.now();
  view.inputState.setSelectionOrigin("select.pointer");
};
handlers.touchmove = function (view) {
  view.inputState.setSelectionOrigin("select.pointer");
};
handlerOptions.touchstart = handlerOptions.touchmove = {
  passive: true
};
handlers.mousedown = function (view, event) {
  view.observer.flush();
  if (view.inputState.lastTouchTime > Date.now() - 2000) return; // Ignore touch interaction
  var style = null;
  var _iterator22 = _createForOfIteratorHelper(view.state.facet(mouseSelectionStyle)),
    _step22;
  try {
    for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
      var makeStyle = _step22.value;
      style = makeStyle(view, event);
      if (style) break;
    }
  } catch (err) {
    _iterator22.e(err);
  } finally {
    _iterator22.f();
  }
  if (!style && event.button == 0) style = basicMouseSelection(view, event);
  if (style) {
    var mustFocus = view.root.activeElement != view.contentDOM;
    view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
    if (mustFocus) view.observer.ignore(function () {
      return focusPreventScroll(view.contentDOM);
    });
    if (view.inputState.mouseSelection) view.inputState.mouseSelection.start(event);
  }
};
function rangeForClick(view, pos, bias, type) {
  if (type == 1) {
    // Single click
    return EditorSelection.cursor(pos, bias);
  } else if (type == 2) {
    // Double click
    return groupAt(view.state, pos, bias);
  } else {
    // Triple click
    var visual = LineView.find(view.docView, pos),
      line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
    var from = visual ? visual.posAtStart : line.from,
      to = visual ? visual.posAtEnd : line.to;
    if (to < view.state.doc.length && to == line.to) to++;
    return EditorSelection.range(from, to);
  }
}
var insideY = function insideY(y, rect) {
  return y >= rect.top && y <= rect.bottom;
};
var inside = function inside(x, y, rect) {
  return insideY(y, rect) && x >= rect.left && x <= rect.right;
};
// Try to determine, for the given coordinates, associated with the
// given position, whether they are related to the element before or
// the element after the position.
function findPositionSide(view, pos, x, y) {
  var line = LineView.find(view.docView, pos);
  if (!line) return 1;
  var off = pos - line.posAtStart;
  // Line boundaries point into the line
  if (off == 0) return 1;
  if (off == line.length) return -1;
  // Positions on top of an element point at that element
  var before = line.coordsAt(off, -1);
  if (before && inside(x, y, before)) return -1;
  var after = line.coordsAt(off, 1);
  if (after && inside(x, y, after)) return 1;
  // This is probably a line wrap point. Pick before if the point is
  // beside it.
  return before && insideY(y, before) ? -1 : 1;
}
function queryPos(view, event) {
  var pos = view.posAtCoords({
    x: event.clientX,
    y: event.clientY
  }, false);
  return {
    pos: pos,
    bias: findPositionSide(view, pos, event.clientX, event.clientY)
  };
}
var BadMouseDetail = browser.ie && browser.ie_version <= 11;
var lastMouseDown = null,
  lastMouseDownCount = 0,
  lastMouseDownTime = 0;
function getClickType(event) {
  if (!BadMouseDetail) return event.detail;
  var last = lastMouseDown,
    lastTime = lastMouseDownTime;
  lastMouseDown = event;
  lastMouseDownTime = Date.now();
  return lastMouseDownCount = !last || lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 && Math.abs(last.clientY - event.clientY) < 2 ? (lastMouseDownCount + 1) % 3 : 1;
}
function basicMouseSelection(view, event) {
  var start = queryPos(view, event),
    type = getClickType(event);
  var startSel = view.state.selection;
  return {
    update: function update(_update4) {
      if (_update4.docChanged) {
        start.pos = _update4.changes.mapPos(start.pos);
        startSel = startSel.map(_update4.changes);
      }
    },
    get: function get(event, extend, multiple) {
      var cur = queryPos(view, event),
        removed;
      var range = rangeForClick(view, cur.pos, cur.bias, type);
      if (start.pos != cur.pos && !extend) {
        var startRange = rangeForClick(view, start.pos, start.bias, type);
        var from = Math.min(startRange.from, range.from),
          to = Math.max(startRange.to, range.to);
        range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
      }
      if (extend) return startSel.replaceRange(startSel.main.extend(range.from, range.to));else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur.pos))) return removed;else if (multiple) return startSel.addRange(range);else return EditorSelection.create([range]);
    }
  };
}
function removeRangeAround(sel, pos) {
  for (var i = 0; i < sel.ranges.length; i++) {
    var _sel$ranges$i = sel.ranges[i],
      from = _sel$ranges$i.from,
      to = _sel$ranges$i.to;
    if (from <= pos && to >= pos) return EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));
  }
  return null;
}
handlers.dragstart = function (view, event) {
  var main = view.state.selection.main;
  var mouseSelection = view.inputState.mouseSelection;
  if (mouseSelection) mouseSelection.dragging = main;
  if (event.dataTransfer) {
    event.dataTransfer.setData("Text", view.state.sliceDoc(main.from, main.to));
    event.dataTransfer.effectAllowed = "copyMove";
  }
};
function dropText(view, event, text, direct) {
  if (!text) return;
  var dropPos = view.posAtCoords({
    x: event.clientX,
    y: event.clientY
  }, false);
  event.preventDefault();
  var mouseSelection = view.inputState.mouseSelection;
  var del = direct && mouseSelection && mouseSelection.dragging && mouseSelection.dragMove ? {
    from: mouseSelection.dragging.from,
    to: mouseSelection.dragging.to
  } : null;
  var ins = {
    from: dropPos,
    insert: text
  };
  var changes = view.state.changes(del ? [del, ins] : ins);
  view.focus();
  view.dispatch({
    changes: changes,
    selection: {
      anchor: changes.mapPos(dropPos, -1),
      head: changes.mapPos(dropPos, 1)
    },
    userEvent: del ? "move.drop" : "input.drop"
  });
}
handlers.drop = function (view, event) {
  if (!event.dataTransfer) return;
  if (view.state.readOnly) return event.preventDefault();
  var files = event.dataTransfer.files;
  if (files && files.length) {
    // For a file drop, read the file's text.
    event.preventDefault();
    var text = Array(files.length),
      read = 0;
    var finishFile = function finishFile() {
      if (++read == files.length) dropText(view, event, text.filter(function (s) {
        return s != null;
      }).join(view.state.lineBreak), false);
    };
    var _loop4 = function _loop4(i) {
      var reader = new FileReader();
      reader.onerror = finishFile;
      reader.onload = function () {
        if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result)) text[i] = reader.result;
        finishFile();
      };
      reader.readAsText(files[i]);
    };
    for (var i = 0; i < files.length; i++) {
      _loop4(i);
    }
  } else {
    dropText(view, event, event.dataTransfer.getData("Text"), true);
  }
};
handlers.paste = function (view, event) {
  if (view.state.readOnly) return event.preventDefault();
  view.observer.flush();
  var data = brokenClipboardAPI ? null : event.clipboardData;
  if (data) {
    doPaste(view, data.getData("text/plain") || data.getData("text/uri-text"));
    event.preventDefault();
  } else {
    capturePaste(view);
  }
};
function captureCopy(view, text) {
  // The extra wrapper is somehow necessary on IE/Edge to prevent the
  // content from being mangled when it is put onto the clipboard
  var parent = view.dom.parentNode;
  if (!parent) return;
  var target = parent.appendChild(document.createElement("textarea"));
  target.style.cssText = "position: fixed; left: -10000px; top: 10px";
  target.value = text;
  target.focus();
  target.selectionEnd = text.length;
  target.selectionStart = 0;
  setTimeout(function () {
    target.remove();
    view.focus();
  }, 50);
}
function copiedRange(state) {
  var content = [],
    ranges = [],
    linewise = false;
  var _iterator23 = _createForOfIteratorHelper(state.selection.ranges),
    _step23;
  try {
    for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
      var range = _step23.value;
      if (!range.empty) {
        content.push(state.sliceDoc(range.from, range.to));
        ranges.push(range);
      }
    }
  } catch (err) {
    _iterator23.e(err);
  } finally {
    _iterator23.f();
  }
  if (!content.length) {
    // Nothing selected, do a line-wise copy
    var upto = -1;
    var _iterator24 = _createForOfIteratorHelper(state.selection.ranges),
      _step24;
    try {
      for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
        var from = _step24.value.from;
        var line = state.doc.lineAt(from);
        if (line.number > upto) {
          content.push(line.text);
          ranges.push({
            from: line.from,
            to: Math.min(state.doc.length, line.to + 1)
          });
        }
        upto = line.number;
      }
    } catch (err) {
      _iterator24.e(err);
    } finally {
      _iterator24.f();
    }
    linewise = true;
  }
  return {
    text: content.join(state.lineBreak),
    ranges: ranges,
    linewise: linewise
  };
}
var lastLinewiseCopy = null;
handlers.copy = handlers.cut = function (view, event) {
  var _copiedRange = copiedRange(view.state),
    text = _copiedRange.text,
    ranges = _copiedRange.ranges,
    linewise = _copiedRange.linewise;
  if (!text && !linewise) return;
  lastLinewiseCopy = linewise ? text : null;
  var data = brokenClipboardAPI ? null : event.clipboardData;
  if (data) {
    event.preventDefault();
    data.clearData();
    data.setData("text/plain", text);
  } else {
    captureCopy(view, text);
  }
  if (event.type == "cut" && !view.state.readOnly) view.dispatch({
    changes: ranges,
    scrollIntoView: true,
    userEvent: "delete.cut"
  });
};
var isFocusChange = /*@__PURE__*/Annotation.define();
function focusChangeTransaction(state, focus) {
  var effects = [];
  var _iterator25 = _createForOfIteratorHelper(state.facet(focusChangeEffect)),
    _step25;
  try {
    for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
      var getEffect = _step25.value;
      var effect = getEffect(state, focus);
      if (effect) effects.push(effect);
    }
  } catch (err) {
    _iterator25.e(err);
  } finally {
    _iterator25.f();
  }
  return effects ? state.update({
    effects: effects,
    annotations: isFocusChange.of(true)
  }) : null;
}
function updateForFocusChange(view) {
  setTimeout(function () {
    var focus = view.hasFocus;
    if (focus != view.inputState.notifiedFocused) {
      var tr = focusChangeTransaction(view.state, focus);
      if (tr) view.dispatch(tr);else view.update([]);
    }
  }, 10);
}
handlers.focus = function (view) {
  view.inputState.lastFocusTime = Date.now();
  // When focusing reset the scroll position, move it back to where it was
  if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
    view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
    view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
  }
  updateForFocusChange(view);
};
handlers.blur = function (view) {
  view.observer.clearSelectionRange();
  updateForFocusChange(view);
};
handlers.compositionstart = handlers.compositionupdate = function (view) {
  if (view.inputState.compositionFirstChange == null) view.inputState.compositionFirstChange = true;
  if (view.inputState.composing < 0) {
    // FIXME possibly set a timeout to clear it again on Android
    view.inputState.composing = 0;
  }
};
handlers.compositionend = function (view) {
  view.inputState.composing = -1;
  view.inputState.compositionEndedAt = Date.now();
  view.inputState.compositionPendingKey = true;
  view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;
  view.inputState.compositionFirstChange = null;
  if (browser.chrome && browser.android) {
    // Delay flushing for a bit on Android because it'll often fire a
    // bunch of contradictory changes in a row at end of compositon
    view.observer.flushSoon();
  } else if (view.inputState.compositionPendingChange) {
    // If we found pending records, schedule a flush.
    Promise.resolve().then(function () {
      return view.observer.flush();
    });
  } else {
    // Otherwise, make sure that, if no changes come in soon, the
    // composition view is cleared.
    setTimeout(function () {
      if (view.inputState.composing < 0 && view.docView.compositionDeco.size) view.update([]);
    }, 50);
  }
};
handlers.contextmenu = function (view) {
  view.inputState.lastContextMenu = Date.now();
};
handlers.beforeinput = function (view, event) {
  var _a;
  // Because Chrome Android doesn't fire useful key events, use
  // beforeinput to detect backspace (and possibly enter and delete,
  // but those usually don't even seem to fire beforeinput events at
  // the moment) and fake a key event for it.
  //
  // (preventDefault on beforeinput, though supported in the spec,
  // seems to do nothing at all on Chrome).
  var pending;
  if (browser.chrome && browser.android && (pending = PendingKeys.find(function (key) {
    return key.inputType == event.inputType;
  }))) {
    view.observer.delayAndroidKey(pending.key, pending.keyCode);
    if (pending.key == "Backspace" || pending.key == "Delete") {
      var startViewHeight = ((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0;
      setTimeout(function () {
        var _a;
        // Backspacing near uneditable nodes on Chrome Android sometimes
        // closes the virtual keyboard. This tries to crudely detect
        // that and refocus to get it back.
        if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {
          view.contentDOM.blur();
          view.focus();
        }
      }, 100);
    }
  }
};
var wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
var HeightOracle = /*#__PURE__*/function () {
  function HeightOracle(lineWrapping) {
    _classCallCheck(this, HeightOracle);
    this.lineWrapping = lineWrapping;
    this.doc = Text.empty;
    this.heightSamples = {};
    this.lineHeight = 14; // The height of an entire line (line-height)
    this.charWidth = 7;
    this.textHeight = 14; // The height of the actual font (font-size)
    this.lineLength = 30;
    // Used to track, during updateHeight, if any actual heights changed
    this.heightChanged = false;
  }
  _createClass(HeightOracle, [{
    key: "heightForGap",
    value: function heightForGap(from, to) {
      var lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
      if (this.lineWrapping) lines += Math.max(0, Math.ceil((to - from - lines * this.lineLength * 0.5) / this.lineLength));
      return this.lineHeight * lines;
    }
  }, {
    key: "heightForLine",
    value: function heightForLine(length) {
      if (!this.lineWrapping) return this.lineHeight;
      var lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
      return lines * this.lineHeight;
    }
  }, {
    key: "setDoc",
    value: function setDoc(doc) {
      this.doc = doc;
      return this;
    }
  }, {
    key: "mustRefreshForWrapping",
    value: function mustRefreshForWrapping(whiteSpace) {
      return wrappingWhiteSpace.indexOf(whiteSpace) > -1 != this.lineWrapping;
    }
  }, {
    key: "mustRefreshForHeights",
    value: function mustRefreshForHeights(lineHeights) {
      var newHeight = false;
      for (var i = 0; i < lineHeights.length; i++) {
        var h = lineHeights[i];
        if (h < 0) {
          i++;
        } else if (!this.heightSamples[Math.floor(h * 10)]) {
          // Round to .1 pixels
          newHeight = true;
          this.heightSamples[Math.floor(h * 10)] = true;
        }
      }
      return newHeight;
    }
  }, {
    key: "refresh",
    value: function refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
      var lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
      var changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
      this.lineWrapping = lineWrapping;
      this.lineHeight = lineHeight;
      this.charWidth = charWidth;
      this.textHeight = textHeight;
      this.lineLength = lineLength;
      if (changed) {
        this.heightSamples = {};
        for (var i = 0; i < knownHeights.length; i++) {
          var h = knownHeights[i];
          if (h < 0) i++;else this.heightSamples[Math.floor(h * 10)] = true;
        }
      }
      return changed;
    }
  }]);
  return HeightOracle;
}(); // This object is used by `updateHeight` to make DOM measurements
// arrive at the right nides. The `heights` array is a sequence of
// block heights, starting from position `from`.
var MeasuredHeights = /*#__PURE__*/function () {
  function MeasuredHeights(from, heights) {
    _classCallCheck(this, MeasuredHeights);
    this.from = from;
    this.heights = heights;
    this.index = 0;
  }
  _createClass(MeasuredHeights, [{
    key: "more",
    get: function get() {
      return this.index < this.heights.length;
    }
  }]);
  return MeasuredHeights;
}();
/**
Record used to represent information about a block-level element
in the editor view.
*/
var BlockInfo = /*#__PURE__*/function () {
  /**
  @internal
  */
  function BlockInfo(
  /**
  The start of the element in the document.
  */
  from,
  /**
  The length of the element.
  */
  length,
  /**
  The top position of the element (relative to the top of the
  document).
  */
  top,
  /**
  Its height.
  */
  height,
  /**
  @internal Weird packed field that holds an array of children
  for composite blocks, a decoration for block widgets, and a
  number indicating the amount of widget-create line breaks for
  text blocks.
  */
  _content) {
    _classCallCheck(this, BlockInfo);
    this.from = from;
    this.length = length;
    this.top = top;
    this.height = height;
    this._content = _content;
  }
  /**
  The type of element this is. When querying lines, this may be
  an array of all the blocks that make up the line.
  */
  _createClass(BlockInfo, [{
    key: "type",
    get: function get() {
      return typeof this._content == "number" ? BlockType.Text : Array.isArray(this._content) ? this._content : this._content.type;
    }
    /**
    The end of the element as a document position.
    */
  }, {
    key: "to",
    get: function get() {
      return this.from + this.length;
    }
    /**
    The bottom position of the element.
    */
  }, {
    key: "bottom",
    get: function get() {
      return this.top + this.height;
    }
    /**
    If this is a widget block, this will return the widget
    associated with it.
    */
  }, {
    key: "widget",
    get: function get() {
      return this._content instanceof PointDecoration ? this._content.widget : null;
    }
    /**
    If this is a textblock, this holds the number of line breaks
    that appear in widgets inside the block.
    */
  }, {
    key: "widgetLineBreaks",
    get: function get() {
      return typeof this._content == "number" ? this._content : 0;
    }
    /**
    @internal
    */
  }, {
    key: "join",
    value: function join(other) {
      var content = (Array.isArray(this._content) ? this._content : [this]).concat(Array.isArray(other._content) ? other._content : [other]);
      return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, content);
    }
  }]);
  return BlockInfo;
}();
var QueryType$1 = /*@__PURE__*/function (QueryType) {
  QueryType[QueryType["ByPos"] = 0] = "ByPos";
  QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
  QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
  return QueryType;
}(QueryType$1 || (QueryType$1 = {}));
var Epsilon = 1e-3;
var HeightMap = /*#__PURE__*/function () {
  function HeightMap(length,
  // The number of characters covered
  height) {
    var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;
    _classCallCheck(this, HeightMap);
    this.length = length;
    this.height = height;
    this.flags = flags;
  }
  _createClass(HeightMap, [{
    key: "outdated",
    get: function get() {
      return (this.flags & 2 /* Outdated */) > 0;
    },
    set: function set(value) {
      this.flags = (value ? 2 /* Outdated */ : 0) | this.flags & ~2 /* Outdated */;
    }
  }, {
    key: "setHeight",
    value: function setHeight(oracle, height) {
      if (this.height != height) {
        if (Math.abs(this.height - height) > Epsilon) oracle.heightChanged = true;
        this.height = height;
      }
    }
    // Base case is to replace a leaf node, which simply builds a tree
    // from the new nodes and returns that (HeightMapBranch and
    // HeightMapGap override this to actually use from/to)
  }, {
    key: "replace",
    value: function replace(_from, _to, nodes) {
      return HeightMap.of(nodes);
    }
    // Again, these are base cases, and are overridden for branch and gap nodes.
  }, {
    key: "decomposeLeft",
    value: function decomposeLeft(_to, result) {
      result.push(this);
    }
  }, {
    key: "decomposeRight",
    value: function decomposeRight(_from, result) {
      result.push(this);
    }
  }, {
    key: "applyChanges",
    value: function applyChanges(decorations, oldDoc, oracle, changes) {
      var me = this,
        doc = oracle.doc;
      for (var i = changes.length - 1; i >= 0; i--) {
        var _changes$i = changes[i],
          fromA = _changes$i.fromA,
          toA = _changes$i.toA,
          fromB = _changes$i.fromB,
          toB = _changes$i.toB;
        var start = me.lineAt(fromA, QueryType$1.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
        var end = start.to >= toA ? start : me.lineAt(toA, QueryType$1.ByPosNoHeight, oracle, 0, 0);
        toB += end.to - toA;
        toA = end.to;
        while (i > 0 && start.from <= changes[i - 1].toA) {
          fromA = changes[i - 1].fromA;
          fromB = changes[i - 1].fromB;
          i--;
          if (fromA < start.from) start = me.lineAt(fromA, QueryType$1.ByPosNoHeight, oracle, 0, 0);
        }
        fromB += start.from - fromA;
        fromA = start.from;
        var nodes = NodeBuilder.build(oracle.setDoc(doc), decorations, fromB, toB);
        me = me.replace(fromA, toA, nodes);
      }
      return me.updateHeight(oracle, 0);
    }
  }], [{
    key: "empty",
    value: function empty() {
      return new HeightMapText(0, 0);
    }
    // nodes uses null values to indicate the position of line breaks.
    // There are never line breaks at the start or end of the array, or
    // two line breaks next to each other, and the array isn't allowed
    // to be empty (same restrictions as return value from the builder).
  }, {
    key: "of",
    value: function of(nodes) {
      if (nodes.length == 1) return nodes[0];
      var i = 0,
        j = nodes.length,
        before = 0,
        after = 0;
      for (;;) {
        if (i == j) {
          if (before > after * 2) {
            var split = nodes[i - 1];
            if (split["break"]) nodes.splice(--i, 1, split.left, null, split.right);else nodes.splice(--i, 1, split.left, split.right);
            j += 1 + split["break"];
            before -= split.size;
          } else if (after > before * 2) {
            var _split = nodes[j];
            if (_split["break"]) nodes.splice(j, 1, _split.left, null, _split.right);else nodes.splice(j, 1, _split.left, _split.right);
            j += 2 + _split["break"];
            after -= _split.size;
          } else {
            break;
          }
        } else if (before < after) {
          var next = nodes[i++];
          if (next) before += next.size;
        } else {
          var _next = nodes[--j];
          if (_next) after += _next.size;
        }
      }
      var brk = 0;
      if (nodes[i - 1] == null) {
        brk = 1;
        i--;
      } else if (nodes[i] == null) {
        brk = 1;
        j++;
      }
      return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
    }
  }]);
  return HeightMap;
}();
HeightMap.prototype.size = 1;
var HeightMapBlock = /*#__PURE__*/function (_HeightMap) {
  _inherits(HeightMapBlock, _HeightMap);
  var _super16 = _createSuper(HeightMapBlock);
  function HeightMapBlock(length, height, deco) {
    var _this24;
    _classCallCheck(this, HeightMapBlock);
    _this24 = _super16.call(this, length, height);
    _this24.deco = deco;
    return _this24;
  }
  _createClass(HeightMapBlock, [{
    key: "blockAt",
    value: function blockAt(_height, _oracle, top, offset) {
      return new BlockInfo(offset, this.length, top, this.height, this.deco || 0);
    }
  }, {
    key: "lineAt",
    value: function lineAt(_value, _type, oracle, top, offset) {
      return this.blockAt(0, oracle, top, offset);
    }
  }, {
    key: "forEachLine",
    value: function forEachLine(from, to, oracle, top, offset, f) {
      if (from <= offset + this.length && to >= offset) f(this.blockAt(0, oracle, top, offset));
    }
  }, {
    key: "updateHeight",
    value: function updateHeight(oracle) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var measured = arguments.length > 3 ? arguments[3] : undefined;
      if (measured && measured.from <= offset && measured.more) this.setHeight(oracle, measured.heights[measured.index++]);
      this.outdated = false;
      return this;
    }
  }, {
    key: "toString",
    value: function toString() {
      return "block(".concat(this.length, ")");
    }
  }]);
  return HeightMapBlock;
}(HeightMap);
var HeightMapText = /*#__PURE__*/function (_HeightMapBlock) {
  _inherits(HeightMapText, _HeightMapBlock);
  var _super17 = _createSuper(HeightMapText);
  function HeightMapText(length, height) {
    var _this25;
    _classCallCheck(this, HeightMapText);
    _this25 = _super17.call(this, length, height, null);
    _this25.collapsed = 0; // Amount of collapsed content in the line
    _this25.widgetHeight = 0; // Maximum inline widget height
    _this25.breaks = 0; // Number of widget-introduced line breaks on the line
    return _this25;
  }
  _createClass(HeightMapText, [{
    key: "blockAt",
    value: function blockAt(_height, _oracle, top, offset) {
      return new BlockInfo(offset, this.length, top, this.height, this.breaks);
    }
  }, {
    key: "replace",
    value: function replace(_from, _to, nodes) {
      var node = nodes[0];
      if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && node.flags & 4 /* SingleLine */) && Math.abs(this.length - node.length) < 10) {
        if (node instanceof HeightMapGap) node = new HeightMapText(node.length, this.height);else node.height = this.height;
        if (!this.outdated) node.outdated = false;
        return node;
      } else {
        return HeightMap.of(nodes);
      }
    }
  }, {
    key: "updateHeight",
    value: function updateHeight(oracle) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var measured = arguments.length > 3 ? arguments[3] : undefined;
      if (measured && measured.from <= offset && measured.more) this.setHeight(oracle, measured.heights[measured.index++]);else if (force || this.outdated) this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) + this.breaks * oracle.lineHeight);
      this.outdated = false;
      return this;
    }
  }, {
    key: "toString",
    value: function toString() {
      return "line(".concat(this.length).concat(this.collapsed ? -this.collapsed : "").concat(this.widgetHeight ? ":" + this.widgetHeight : "", ")");
    }
  }]);
  return HeightMapText;
}(HeightMapBlock);
var HeightMapGap = /*#__PURE__*/function (_HeightMap2) {
  _inherits(HeightMapGap, _HeightMap2);
  var _super18 = _createSuper(HeightMapGap);
  function HeightMapGap(length) {
    _classCallCheck(this, HeightMapGap);
    return _super18.call(this, length, 0);
  }
  _createClass(HeightMapGap, [{
    key: "heightMetrics",
    value: function heightMetrics(oracle, offset) {
      var firstLine = oracle.doc.lineAt(offset).number,
        lastLine = oracle.doc.lineAt(offset + this.length).number;
      var lines = lastLine - firstLine + 1;
      var perLine,
        perChar = 0;
      if (oracle.lineWrapping) {
        var totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
        perLine = totalPerLine / lines;
        if (this.length > lines + 1) perChar = (this.height - totalPerLine) / (this.length - lines - 1);
      } else {
        perLine = this.height / lines;
      }
      return {
        firstLine: firstLine,
        lastLine: lastLine,
        perLine: perLine,
        perChar: perChar
      };
    }
  }, {
    key: "blockAt",
    value: function blockAt(height, oracle, top, offset) {
      var _this$heightMetrics = this.heightMetrics(oracle, offset),
        firstLine = _this$heightMetrics.firstLine,
        lastLine = _this$heightMetrics.lastLine,
        perLine = _this$heightMetrics.perLine,
        perChar = _this$heightMetrics.perChar;
      if (oracle.lineWrapping) {
        var guess = offset + Math.round(Math.max(0, Math.min(1, (height - top) / this.height)) * this.length);
        var line = oracle.doc.lineAt(guess),
          lineHeight = perLine + line.length * perChar;
        var lineTop = Math.max(top, height - lineHeight / 2);
        return new BlockInfo(line.from, line.length, lineTop, lineHeight, 0);
      } else {
        var _line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / perLine)));
        var _oracle$doc$line = oracle.doc.line(firstLine + _line),
          from = _oracle$doc$line.from,
          length = _oracle$doc$line.length;
        return new BlockInfo(from, length, top + perLine * _line, perLine, 0);
      }
    }
  }, {
    key: "lineAt",
    value: function lineAt(value, type, oracle, top, offset) {
      if (type == QueryType$1.ByHeight) return this.blockAt(value, oracle, top, offset);
      if (type == QueryType$1.ByPosNoHeight) {
        var _oracle$doc$lineAt = oracle.doc.lineAt(value),
          from = _oracle$doc$lineAt.from,
          to = _oracle$doc$lineAt.to;
        return new BlockInfo(from, to - from, 0, 0, 0);
      }
      var _this$heightMetrics2 = this.heightMetrics(oracle, offset),
        firstLine = _this$heightMetrics2.firstLine,
        perLine = _this$heightMetrics2.perLine,
        perChar = _this$heightMetrics2.perChar;
      var line = oracle.doc.lineAt(value),
        lineHeight = perLine + line.length * perChar;
      var linesAbove = line.number - firstLine;
      var lineTop = top + perLine * linesAbove + perChar * (line.from - offset - linesAbove);
      return new BlockInfo(line.from, line.length, Math.max(top, Math.min(lineTop, top + this.height - lineHeight)), lineHeight, 0);
    }
  }, {
    key: "forEachLine",
    value: function forEachLine(from, to, oracle, top, offset, f) {
      from = Math.max(from, offset);
      to = Math.min(to, offset + this.length);
      var _this$heightMetrics3 = this.heightMetrics(oracle, offset),
        firstLine = _this$heightMetrics3.firstLine,
        perLine = _this$heightMetrics3.perLine,
        perChar = _this$heightMetrics3.perChar;
      for (var pos = from, lineTop = top; pos <= to;) {
        var line = oracle.doc.lineAt(pos);
        if (pos == from) {
          var linesAbove = line.number - firstLine;
          lineTop += perLine * linesAbove + perChar * (from - offset - linesAbove);
        }
        var lineHeight = perLine + perChar * line.length;
        f(new BlockInfo(line.from, line.length, lineTop, lineHeight, 0));
        lineTop += lineHeight;
        pos = line.to + 1;
      }
    }
  }, {
    key: "replace",
    value: function replace(from, to, nodes) {
      var after = this.length - to;
      if (after > 0) {
        var last = nodes[nodes.length - 1];
        if (last instanceof HeightMapGap) nodes[nodes.length - 1] = new HeightMapGap(last.length + after);else nodes.push(null, new HeightMapGap(after - 1));
      }
      if (from > 0) {
        var first = nodes[0];
        if (first instanceof HeightMapGap) nodes[0] = new HeightMapGap(from + first.length);else nodes.unshift(new HeightMapGap(from - 1), null);
      }
      return HeightMap.of(nodes);
    }
  }, {
    key: "decomposeLeft",
    value: function decomposeLeft(to, result) {
      result.push(new HeightMapGap(to - 1), null);
    }
  }, {
    key: "decomposeRight",
    value: function decomposeRight(from, result) {
      result.push(null, new HeightMapGap(this.length - from - 1));
    }
  }, {
    key: "updateHeight",
    value: function updateHeight(oracle) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var measured = arguments.length > 3 ? arguments[3] : undefined;
      var end = offset + this.length;
      if (measured && measured.from <= offset + this.length && measured.more) {
        // Fill in part of this gap with measured lines. We know there
        // can't be widgets or collapsed ranges in those lines, because
        // they would already have been added to the heightmap (gaps
        // only contain plain text).
        var nodes = [],
          pos = Math.max(offset, measured.from),
          singleHeight = -1;
        if (measured.from > offset) nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
        while (pos <= end && measured.more) {
          var len = oracle.doc.lineAt(pos).length;
          if (nodes.length) nodes.push(null);
          var height = measured.heights[measured.index++];
          if (singleHeight == -1) singleHeight = height;else if (Math.abs(height - singleHeight) >= Epsilon) singleHeight = -2;
          var line = new HeightMapText(len, height);
          line.outdated = false;
          nodes.push(line);
          pos += len + 1;
        }
        if (pos <= end) nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
        var result = HeightMap.of(nodes);
        if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon || Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon) oracle.heightChanged = true;
        return result;
      } else if (force || this.outdated) {
        this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
        this.outdated = false;
      }
      return this;
    }
  }, {
    key: "toString",
    value: function toString() {
      return "gap(".concat(this.length, ")");
    }
  }]);
  return HeightMapGap;
}(HeightMap);
var HeightMapBranch = /*#__PURE__*/function (_HeightMap3) {
  _inherits(HeightMapBranch, _HeightMap3);
  var _super19 = _createSuper(HeightMapBranch);
  function HeightMapBranch(left, brk, right) {
    var _this26;
    _classCallCheck(this, HeightMapBranch);
    _this26 = _super19.call(this, left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Outdated */ : 0));
    _this26.left = left;
    _this26.right = right;
    _this26.size = left.size + right.size;
    return _this26;
  }
  _createClass(HeightMapBranch, [{
    key: "break",
    get: function get() {
      return this.flags & 1 /* Break */;
    }
  }, {
    key: "blockAt",
    value: function blockAt(height, oracle, top, offset) {
      var mid = top + this.left.height;
      return height < mid ? this.left.blockAt(height, oracle, top, offset) : this.right.blockAt(height, oracle, mid, offset + this.left.length + this["break"]);
    }
  }, {
    key: "lineAt",
    value: function lineAt(value, type, oracle, top, offset) {
      var rightTop = top + this.left.height,
        rightOffset = offset + this.left.length + this["break"];
      var left = type == QueryType$1.ByHeight ? value < rightTop : value < rightOffset;
      var base = left ? this.left.lineAt(value, type, oracle, top, offset) : this.right.lineAt(value, type, oracle, rightTop, rightOffset);
      if (this["break"] || (left ? base.to < rightOffset : base.from > rightOffset)) return base;
      var subQuery = type == QueryType$1.ByPosNoHeight ? QueryType$1.ByPosNoHeight : QueryType$1.ByPos;
      if (left) return base.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));else return this.left.lineAt(rightOffset, subQuery, oracle, top, offset).join(base);
    }
  }, {
    key: "forEachLine",
    value: function forEachLine(from, to, oracle, top, offset, f) {
      var rightTop = top + this.left.height,
        rightOffset = offset + this.left.length + this["break"];
      if (this["break"]) {
        if (from < rightOffset) this.left.forEachLine(from, to, oracle, top, offset, f);
        if (to >= rightOffset) this.right.forEachLine(from, to, oracle, rightTop, rightOffset, f);
      } else {
        var mid = this.lineAt(rightOffset, QueryType$1.ByPos, oracle, top, offset);
        if (from < mid.from) this.left.forEachLine(from, mid.from - 1, oracle, top, offset, f);
        if (mid.to >= from && mid.from <= to) f(mid);
        if (to > mid.to) this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f);
      }
    }
  }, {
    key: "replace",
    value: function replace(from, to, nodes) {
      var rightStart = this.left.length + this["break"];
      if (to < rightStart) return this.balanced(this.left.replace(from, to, nodes), this.right);
      if (from > this.left.length) return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
      var result = [];
      if (from > 0) this.decomposeLeft(from, result);
      var left = result.length;
      var _iterator26 = _createForOfIteratorHelper(nodes),
        _step26;
      try {
        for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
          var node = _step26.value;
          result.push(node);
        }
      } catch (err) {
        _iterator26.e(err);
      } finally {
        _iterator26.f();
      }
      if (from > 0) mergeGaps(result, left - 1);
      if (to < this.length) {
        var right = result.length;
        this.decomposeRight(to, result);
        mergeGaps(result, right);
      }
      return HeightMap.of(result);
    }
  }, {
    key: "decomposeLeft",
    value: function decomposeLeft(to, result) {
      var left = this.left.length;
      if (to <= left) return this.left.decomposeLeft(to, result);
      result.push(this.left);
      if (this["break"]) {
        left++;
        if (to >= left) result.push(null);
      }
      if (to > left) this.right.decomposeLeft(to - left, result);
    }
  }, {
    key: "decomposeRight",
    value: function decomposeRight(from, result) {
      var left = this.left.length,
        right = left + this["break"];
      if (from >= right) return this.right.decomposeRight(from - right, result);
      if (from < left) this.left.decomposeRight(from, result);
      if (this["break"] && from < right) result.push(null);
      result.push(this.right);
    }
  }, {
    key: "balanced",
    value: function balanced(left, right) {
      if (left.size > 2 * right.size || right.size > 2 * left.size) return HeightMap.of(this["break"] ? [left, null, right] : [left, right]);
      this.left = left;
      this.right = right;
      this.height = left.height + right.height;
      this.outdated = left.outdated || right.outdated;
      this.size = left.size + right.size;
      this.length = left.length + this["break"] + right.length;
      return this;
    }
  }, {
    key: "updateHeight",
    value: function updateHeight(oracle) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var measured = arguments.length > 3 ? arguments[3] : undefined;
      var left = this.left,
        right = this.right,
        rightStart = offset + left.length + this["break"],
        rebalance = null;
      if (measured && measured.from <= offset + left.length && measured.more) rebalance = left = left.updateHeight(oracle, offset, force, measured);else left.updateHeight(oracle, offset, force);
      if (measured && measured.from <= rightStart + right.length && measured.more) rebalance = right = right.updateHeight(oracle, rightStart, force, measured);else right.updateHeight(oracle, rightStart, force);
      if (rebalance) return this.balanced(left, right);
      this.height = this.left.height + this.right.height;
      this.outdated = false;
      return this;
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.left + (this["break"] ? " " : "-") + this.right;
    }
  }]);
  return HeightMapBranch;
}(HeightMap);
function mergeGaps(nodes, around) {
  var before, after;
  if (nodes[around] == null && (before = nodes[around - 1]) instanceof HeightMapGap && (after = nodes[around + 1]) instanceof HeightMapGap) nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
}
var relevantWidgetHeight = 5;
var NodeBuilder = /*#__PURE__*/function () {
  function NodeBuilder(pos, oracle) {
    _classCallCheck(this, NodeBuilder);
    this.pos = pos;
    this.oracle = oracle;
    this.nodes = [];
    this.lineStart = -1;
    this.lineEnd = -1;
    this.covering = null;
    this.writtenTo = pos;
  }
  _createClass(NodeBuilder, [{
    key: "isCovered",
    get: function get() {
      return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
    }
  }, {
    key: "span",
    value: function span(_from, to) {
      if (this.lineStart > -1) {
        var end = Math.min(to, this.lineEnd),
          last = this.nodes[this.nodes.length - 1];
        if (last instanceof HeightMapText) last.length += end - this.pos;else if (end > this.pos || !this.isCovered) this.nodes.push(new HeightMapText(end - this.pos, -1));
        this.writtenTo = end;
        if (to > end) {
          this.nodes.push(null);
          this.writtenTo++;
          this.lineStart = -1;
        }
      }
      this.pos = to;
    }
  }, {
    key: "point",
    value: function point(from, to, deco) {
      if (from < to || deco.heightRelevant) {
        var height = deco.widget ? deco.widget.estimatedHeight : 0;
        var breaks = deco.widget ? deco.widget.lineBreaks : 0;
        if (height < 0) height = this.oracle.lineHeight;
        var len = to - from;
        if (deco.block) {
          this.addBlock(new HeightMapBlock(len, height, deco));
        } else if (len || breaks || height >= relevantWidgetHeight) {
          this.addLineDeco(height, breaks, len);
        }
      } else if (to > from) {
        this.span(from, to);
      }
      if (this.lineEnd > -1 && this.lineEnd < this.pos) this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
    }
  }, {
    key: "enterLine",
    value: function enterLine() {
      if (this.lineStart > -1) return;
      var _this$oracle$doc$line = this.oracle.doc.lineAt(this.pos),
        from = _this$oracle$doc$line.from,
        to = _this$oracle$doc$line.to;
      this.lineStart = from;
      this.lineEnd = to;
      if (this.writtenTo < from) {
        if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null) this.nodes.push(this.blankContent(this.writtenTo, from - 1));
        this.nodes.push(null);
      }
      if (this.pos > from) this.nodes.push(new HeightMapText(this.pos - from, -1));
      this.writtenTo = this.pos;
    }
  }, {
    key: "blankContent",
    value: function blankContent(from, to) {
      var gap = new HeightMapGap(to - from);
      if (this.oracle.doc.lineAt(from).to == to) gap.flags |= 4 /* SingleLine */;
      return gap;
    }
  }, {
    key: "ensureLine",
    value: function ensureLine() {
      this.enterLine();
      var last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
      if (last instanceof HeightMapText) return last;
      var line = new HeightMapText(0, -1);
      this.nodes.push(line);
      return line;
    }
  }, {
    key: "addBlock",
    value: function addBlock(block) {
      var _a;
      this.enterLine();
      var type = (_a = block.deco) === null || _a === void 0 ? void 0 : _a.type;
      if (type == BlockType.WidgetAfter && !this.isCovered) this.ensureLine();
      this.nodes.push(block);
      this.writtenTo = this.pos = this.pos + block.length;
      if (type != BlockType.WidgetBefore) this.covering = block;
    }
  }, {
    key: "addLineDeco",
    value: function addLineDeco(height, breaks, length) {
      var line = this.ensureLine();
      line.length += length;
      line.collapsed += length;
      line.widgetHeight = Math.max(line.widgetHeight, height);
      line.breaks += breaks;
      this.writtenTo = this.pos = this.pos + length;
    }
  }, {
    key: "finish",
    value: function finish(from) {
      var last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
      if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered) this.nodes.push(new HeightMapText(0, -1));else if (this.writtenTo < this.pos || last == null) this.nodes.push(this.blankContent(this.writtenTo, this.pos));
      var pos = from;
      var _iterator27 = _createForOfIteratorHelper(this.nodes),
        _step27;
      try {
        for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
          var node = _step27.value;
          if (node instanceof HeightMapText) node.updateHeight(this.oracle, pos);
          pos += node ? node.length : 1;
        }
      } catch (err) {
        _iterator27.e(err);
      } finally {
        _iterator27.f();
      }
      return this.nodes;
    }
    // Always called with a region that on both sides either stretches
    // to a line break or the end of the document.
    // The returned array uses null to indicate line breaks, but never
    // starts or ends in a line break, or has multiple line breaks next
    // to each other.
  }], [{
    key: "build",
    value: function build(oracle, decorations, from, to) {
      var builder = new NodeBuilder(from, oracle);
      RangeSet.spans(decorations, from, to, builder, 0);
      return builder.finish(from);
    }
  }]);
  return NodeBuilder;
}();
function heightRelevantDecoChanges(a, b, diff) {
  var comp = new DecorationComparator();
  RangeSet.compare(a, b, diff, comp, 0);
  return comp.changes;
}
var DecorationComparator = /*#__PURE__*/function () {
  function DecorationComparator() {
    _classCallCheck(this, DecorationComparator);
    this.changes = [];
  }
  _createClass(DecorationComparator, [{
    key: "compareRange",
    value: function compareRange() {}
  }, {
    key: "comparePoint",
    value: function comparePoint(from, to, a, b) {
      if (from < to || a && a.heightRelevant || b && b.heightRelevant) addRange(from, to, this.changes, 5);
    }
  }]);
  return DecorationComparator;
}();
function visiblePixelRange(dom, paddingTop) {
  var rect = dom.getBoundingClientRect();
  var doc = dom.ownerDocument,
    win = doc.defaultView || window;
  var left = Math.max(0, rect.left),
    right = Math.min(win.innerWidth, rect.right);
  var top = Math.max(0, rect.top),
    bottom = Math.min(win.innerHeight, rect.bottom);
  for (var parent = dom.parentNode; parent && parent != doc.body;) {
    if (parent.nodeType == 1) {
      var elt = parent;
      var style = window.getComputedStyle(elt);
      if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) && style.overflow != "visible") {
        var parentRect = elt.getBoundingClientRect();
        left = Math.max(left, parentRect.left);
        right = Math.min(right, parentRect.right);
        top = Math.max(top, parentRect.top);
        bottom = parent == dom.parentNode ? parentRect.bottom : Math.min(bottom, parentRect.bottom);
      }
      parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
    } else if (parent.nodeType == 11) {
      // Shadow root
      parent = parent.host;
    } else {
      break;
    }
  }
  return {
    left: left - rect.left,
    right: Math.max(left, right) - rect.left,
    top: top - (rect.top + paddingTop),
    bottom: Math.max(top, bottom) - (rect.top + paddingTop)
  };
}
function fullPixelRange(dom, paddingTop) {
  var rect = dom.getBoundingClientRect();
  return {
    left: 0,
    right: rect.right - rect.left,
    top: paddingTop,
    bottom: rect.bottom - (rect.top + paddingTop)
  };
}
// Line gaps are placeholder widgets used to hide pieces of overlong
// lines within the viewport, as a kludge to keep the editor
// responsive when a ridiculously long line is loaded into it.
var LineGap = /*#__PURE__*/function () {
  function LineGap(from, to, size) {
    _classCallCheck(this, LineGap);
    this.from = from;
    this.to = to;
    this.size = size;
  }
  _createClass(LineGap, [{
    key: "draw",
    value: function draw(wrapping) {
      return Decoration.replace({
        widget: new LineGapWidget(this.size, wrapping)
      }).range(this.from, this.to);
    }
  }], [{
    key: "same",
    value: function same(a, b) {
      if (a.length != b.length) return false;
      for (var i = 0; i < a.length; i++) {
        var gA = a[i],
          gB = b[i];
        if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size) return false;
      }
      return true;
    }
  }]);
  return LineGap;
}();
var LineGapWidget = /*#__PURE__*/function (_WidgetType4) {
  _inherits(LineGapWidget, _WidgetType4);
  var _super20 = _createSuper(LineGapWidget);
  function LineGapWidget(size, vertical) {
    var _this27;
    _classCallCheck(this, LineGapWidget);
    _this27 = _super20.call(this);
    _this27.size = size;
    _this27.vertical = vertical;
    return _this27;
  }
  _createClass(LineGapWidget, [{
    key: "eq",
    value: function eq(other) {
      return other.size == this.size && other.vertical == this.vertical;
    }
  }, {
    key: "toDOM",
    value: function toDOM() {
      var elt = document.createElement("div");
      if (this.vertical) {
        elt.style.height = this.size + "px";
      } else {
        elt.style.width = this.size + "px";
        elt.style.height = "2px";
        elt.style.display = "inline-block";
      }
      return elt;
    }
  }, {
    key: "estimatedHeight",
    get: function get() {
      return this.vertical ? this.size : -1;
    }
  }]);
  return LineGapWidget;
}(WidgetType);
var ViewState = /*#__PURE__*/function () {
  function ViewState(state) {
    _classCallCheck(this, ViewState);
    this.state = state;
    // These are contentDOM-local coordinates
    this.pixelViewport = {
      left: 0,
      right: window.innerWidth,
      top: 0,
      bottom: 0
    };
    this.inView = true;
    this.paddingTop = 0;
    this.paddingBottom = 0;
    this.contentDOMWidth = 0;
    this.contentDOMHeight = 0;
    this.editorHeight = 0;
    this.editorWidth = 0;
    this.scrollTop = 0;
    this.scrolledToBottom = true;
    // The vertical position (document-relative) to which to anchor the
    // scroll position. -1 means anchor to the end of the document.
    this.scrollAnchorPos = 0;
    // The height at the anchor position. Set by the DOM update phase.
    // -1 means no height available.
    this.scrollAnchorHeight = -1;
    // See VP.MaxDOMHeight
    this.scaler = IdScaler;
    this.scrollTarget = null;
    // Briefly set to true when printing, to disable viewport limiting
    this.printing = false;
    // Flag set when editor content was redrawn, so that the next
    // measure stage knows it must read DOM layout
    this.mustMeasureContent = true;
    this.defaultTextDirection = Direction.LTR;
    this.visibleRanges = [];
    // Cursor 'assoc' is only significant when the cursor is on a line
    // wrap point, where it must stick to the character that it is
    // associated with. Since browsers don't provide a reasonable
    // interface to set or query this, when a selection is set that
    // might cause this to be significant, this flag is set. The next
    // measure phase will check whether the cursor is on a line-wrapping
    // boundary and, if so, reset it to make sure it is positioned in
    // the right place.
    this.mustEnforceCursorAssoc = false;
    var guessWrapping = state.facet(contentAttributes).some(function (v) {
      return typeof v != "function" && v["class"] == "cm-lineWrapping";
    });
    this.heightOracle = new HeightOracle(guessWrapping);
    this.stateDeco = state.facet(decorations).filter(function (d) {
      return typeof d != "function";
    });
    this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
    this.viewport = this.getViewport(0, null);
    this.updateViewportLines();
    this.updateForViewport();
    this.lineGaps = this.ensureLineGaps([]);
    this.lineGapDeco = Decoration.set(this.lineGaps.map(function (gap) {
      return gap.draw(false);
    }));
    this.computeVisibleRanges();
  }
  _createClass(ViewState, [{
    key: "updateForViewport",
    value: function updateForViewport() {
      var _this28 = this;
      var viewports = [this.viewport],
        main = this.state.selection.main;
      var _loop5 = function _loop5() {
        var pos = i ? main.head : main.anchor;
        if (!viewports.some(function (_ref4) {
          var from = _ref4.from,
            to = _ref4.to;
          return pos >= from && pos <= to;
        })) {
          var _this28$lineBlockAt = _this28.lineBlockAt(pos),
            from = _this28$lineBlockAt.from,
            to = _this28$lineBlockAt.to;
          viewports.push(new Viewport(from, to));
        }
      };
      for (var i = 0; i <= 1; i++) {
        _loop5();
      }
      this.viewports = viewports.sort(function (a, b) {
        return a.from - b.from;
      });
      this.scaler = this.heightMap.height <= 7000000 /* MaxDOMHeight */ ? IdScaler : new BigScaler(this.heightOracle, this.heightMap, this.viewports);
    }
  }, {
    key: "updateViewportLines",
    value: function updateViewportLines() {
      var _this29 = this;
      this.viewportLines = [];
      this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, function (block) {
        _this29.viewportLines.push(_this29.scaler.scale == 1 ? block : scaleBlock(block, _this29.scaler));
      });
    }
  }, {
    key: "update",
    value: function update(_update5) {
      var scrollTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      this.state = _update5.state;
      var prevDeco = this.stateDeco;
      this.stateDeco = this.state.facet(decorations).filter(function (d) {
        return typeof d != "function";
      });
      var contentChanges = _update5.changedRanges;
      var heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, _update5 ? _update5.changes : ChangeSet.empty(this.state.doc.length)));
      var prevHeight = this.heightMap.height;
      var scrollAnchor = this.scrolledToBottom ? null : this.lineBlockAtHeight(this.scrollTop);
      this.heightMap = this.heightMap.applyChanges(this.stateDeco, _update5.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
      if (this.heightMap.height != prevHeight) _update5.flags |= 2 /* Height */;
      if (scrollAnchor) {
        this.scrollAnchorPos = _update5.changes.mapPos(scrollAnchor.from, -1);
        this.scrollAnchorHeight = scrollAnchor.top;
      } else {
        this.scrollAnchorPos = -1;
        this.scrollAnchorHeight = this.heightMap.height;
      }
      var viewport = heightChanges.length ? this.mapViewport(this.viewport, _update5.changes) : this.viewport;
      if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) || !this.viewportIsAppropriate(viewport)) viewport = this.getViewport(0, scrollTarget);
      var updateLines = !_update5.changes.empty || _update5.flags & 2 /* Height */ || viewport.from != this.viewport.from || viewport.to != this.viewport.to;
      this.viewport = viewport;
      this.updateForViewport();
      if (updateLines) this.updateViewportLines();
      if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2000 /* Margin */ << 1) this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, _update5.changes)));
      _update5.flags |= this.computeVisibleRanges();
      if (scrollTarget) this.scrollTarget = scrollTarget;
      if (!this.mustEnforceCursorAssoc && _update5.selectionSet && _update5.view.lineWrapping && _update5.state.selection.main.empty && _update5.state.selection.main.assoc && !_update5.state.facet(nativeSelectionHidden)) this.mustEnforceCursorAssoc = true;
    }
  }, {
    key: "measure",
    value: function measure(view) {
      var dom = view.contentDOM,
        style = window.getComputedStyle(dom);
      var oracle = this.heightOracle;
      var whiteSpace = style.whiteSpace;
      this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
      var refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
      var domRect = dom.getBoundingClientRect();
      var measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
      this.contentDOMHeight = domRect.height;
      this.mustMeasureContent = false;
      var result = 0,
        bias = 0;
      // Vertical padding
      var paddingTop = parseInt(style.paddingTop) || 0,
        paddingBottom = parseInt(style.paddingBottom) || 0;
      if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
        this.paddingTop = paddingTop;
        this.paddingBottom = paddingBottom;
        result |= 8 /* Geometry */ | 2 /* Height */;
      }

      if (this.editorWidth != view.scrollDOM.clientWidth) {
        if (oracle.lineWrapping) measureContent = true;
        this.editorWidth = view.scrollDOM.clientWidth;
        result |= 8 /* Geometry */;
      }

      if (this.scrollTop != view.scrollDOM.scrollTop) {
        this.scrollAnchorHeight = -1;
        this.scrollTop = view.scrollDOM.scrollTop;
      }
      this.scrolledToBottom = this.scrollTop > view.scrollDOM.scrollHeight - view.scrollDOM.clientHeight - 4;
      // Pixel viewport
      var pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
      var dTop = pixelViewport.top - this.pixelViewport.top,
        dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
      this.pixelViewport = pixelViewport;
      var inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
      if (inView != this.inView) {
        this.inView = inView;
        if (inView) measureContent = true;
      }
      if (!this.inView && !this.scrollTarget) return 0;
      var contentWidth = domRect.width;
      if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
        this.contentDOMWidth = domRect.width;
        this.editorHeight = view.scrollDOM.clientHeight;
        result |= 8 /* Geometry */;
      }

      if (measureContent) {
        var lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
        if (oracle.mustRefreshForHeights(lineHeights)) refresh = true;
        if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
          var _view$docView$measure = view.docView.measureTextSize(),
            lineHeight = _view$docView$measure.lineHeight,
            charWidth = _view$docView$measure.charWidth,
            textHeight = _view$docView$measure.textHeight;
          refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);
          if (refresh) {
            view.docView.minWidth = 0;
            result |= 8 /* Geometry */;
          }
        }

        if (dTop > 0 && dBottom > 0) bias = Math.max(dTop, dBottom);else if (dTop < 0 && dBottom < 0) bias = Math.min(dTop, dBottom);
        oracle.heightChanged = false;
        var _iterator28 = _createForOfIteratorHelper(this.viewports),
          _step28;
        try {
          for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
            var vp = _step28.value;
            var heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
            this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
          }
        } catch (err) {
          _iterator28.e(err);
        } finally {
          _iterator28.f();
        }
        if (oracle.heightChanged) result |= 2 /* Height */;
      }

      var viewportChange = !this.viewportIsAppropriate(this.viewport, bias) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
      if (viewportChange) this.viewport = this.getViewport(bias, this.scrollTarget);
      this.updateForViewport();
      if (result & 2 /* Height */ || viewportChange) this.updateViewportLines();
      if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2000 /* Margin */ << 1) this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
      result |= this.computeVisibleRanges();
      if (this.mustEnforceCursorAssoc) {
        this.mustEnforceCursorAssoc = false;
        // This is done in the read stage, because moving the selection
        // to a line end is going to trigger a layout anyway, so it
        // can't be a pure write. It should be rare that it does any
        // writing.
        view.docView.enforceCursorAssoc();
      }
      return result;
    }
  }, {
    key: "visibleTop",
    get: function get() {
      return this.scaler.fromDOM(this.pixelViewport.top);
    }
  }, {
    key: "visibleBottom",
    get: function get() {
      return this.scaler.fromDOM(this.pixelViewport.bottom);
    }
  }, {
    key: "getViewport",
    value: function getViewport(bias, scrollTarget) {
      // This will divide VP.Margin between the top and the
      // bottom, depending on the bias (the change in viewport position
      // since the last update). It'll hold a number between 0 and 1
      var marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* Margin */ / 2));
      var map = this.heightMap,
        oracle = this.heightOracle;
      var visibleTop = this.visibleTop,
        visibleBottom = this.visibleBottom;
      var viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* Margin */, QueryType$1.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* Margin */, QueryType$1.ByHeight, oracle, 0, 0).to);
      // If scrollTarget is given, make sure the viewport includes that position
      if (scrollTarget) {
        var head = scrollTarget.range.head;
        if (head < viewport.from || head > viewport.to) {
          var viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
          var block = map.lineAt(head, QueryType$1.ByPos, oracle, 0, 0),
            topPos;
          if (scrollTarget.y == "center") topPos = (block.top + block.bottom) / 2 - viewHeight / 2;else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from) topPos = block.top;else topPos = block.bottom - viewHeight;
          viewport = new Viewport(map.lineAt(topPos - 1000 /* Margin */ / 2, QueryType$1.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 1000 /* Margin */ / 2, QueryType$1.ByHeight, oracle, 0, 0).to);
        }
      }
      return viewport;
    }
  }, {
    key: "mapViewport",
    value: function mapViewport(viewport, changes) {
      var from = changes.mapPos(viewport.from, -1),
        to = changes.mapPos(viewport.to, 1);
      return new Viewport(this.heightMap.lineAt(from, QueryType$1.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType$1.ByPos, this.heightOracle, 0, 0).to);
    }
    // Checks if a given viewport covers the visible part of the
    // document and not too much beyond that.
  }, {
    key: "viewportIsAppropriate",
    value: function viewportIsAppropriate(_ref5) {
      var from = _ref5.from,
        to = _ref5.to;
      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      if (!this.inView) return true;
      var _this$heightMap$lineA = this.heightMap.lineAt(from, QueryType$1.ByPos, this.heightOracle, 0, 0),
        top = _this$heightMap$lineA.top;
      var _this$heightMap$lineA2 = this.heightMap.lineAt(to, QueryType$1.ByPos, this.heightOracle, 0, 0),
        bottom = _this$heightMap$lineA2.bottom;
      var visibleTop = this.visibleTop,
        visibleBottom = this.visibleBottom;
      return (from == 0 || top <= visibleTop - Math.max(10 /* MinCoverMargin */, Math.min(-bias, 250 /* MaxCoverMargin */))) && (to == this.state.doc.length || bottom >= visibleBottom + Math.max(10 /* MinCoverMargin */, Math.min(bias, 250 /* MaxCoverMargin */))) && top > visibleTop - 2 * 1000 /* Margin */ && bottom < visibleBottom + 2 * 1000 /* Margin */;
    }
  }, {
    key: "mapLineGaps",
    value: function mapLineGaps(gaps, changes) {
      if (!gaps.length || changes.empty) return gaps;
      var mapped = [];
      var _iterator29 = _createForOfIteratorHelper(gaps),
        _step29;
      try {
        for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
          var gap = _step29.value;
          if (!changes.touchesRange(gap.from, gap.to)) mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
        }
      } catch (err) {
        _iterator29.e(err);
      } finally {
        _iterator29.f();
      }
      return mapped;
    }
    // Computes positions in the viewport where the start or end of a
    // line should be hidden, trying to reuse existing line gaps when
    // appropriate to avoid unneccesary redraws.
    // Uses crude character-counting for the positioning and sizing,
    // since actual DOM coordinates aren't always available and
    // predictable. Relies on generous margins (see LG.Margin) to hide
    // the artifacts this might produce from the user.
  }, {
    key: "ensureLineGaps",
    value: function ensureLineGaps(current, mayMeasure) {
      var _this30 = this;
      var wrapping = this.heightOracle.lineWrapping;
      var margin = wrapping ? 10000 /* MarginWrap */ : 2000 /* Margin */,
        halfMargin = margin >> 1,
        doubleMargin = margin << 1;
      // The non-wrapping logic won't work at all in predominantly right-to-left text.
      if (this.defaultTextDirection != Direction.LTR && !wrapping) return [];
      var gaps = [];
      var addGap = function addGap(from, to, line, structure) {
        if (to - from < halfMargin) return;
        var sel = _this30.state.selection.main,
          avoid = [sel.from];
        if (!sel.empty) avoid.push(sel.to);
        for (var _i9 = 0, _avoid = avoid; _i9 < _avoid.length; _i9++) {
          var pos = _avoid[_i9];
          if (pos > from && pos < to) {
            addGap(from, pos - 10 /* SelectionMargin */, line, structure);
            addGap(pos + 10 /* SelectionMargin */, to, line, structure);
            return;
          }
        }
        var gap = find(current, function (gap) {
          return gap.from >= line.from && gap.to <= line.to && Math.abs(gap.from - from) < halfMargin && Math.abs(gap.to - to) < halfMargin && !avoid.some(function (pos) {
            return gap.from < pos && gap.to > pos;
          });
        });
        if (!gap) {
          // When scrolling down, snap gap ends to line starts to avoid shifts in wrapping
          if (to < line.to && mayMeasure && wrapping && mayMeasure.visibleRanges.some(function (r) {
            return r.from <= to && r.to >= to;
          })) {
            var lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;
            if (lineStart > from) to = lineStart;
          }
          gap = new LineGap(from, to, _this30.gapSize(line, from, to, structure));
        }
        gaps.push(gap);
      };
      var _iterator30 = _createForOfIteratorHelper(this.viewportLines),
        _step30;
      try {
        for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
          var line = _step30.value;
          if (line.length < doubleMargin) continue;
          var structure = lineStructure(line.from, line.to, this.stateDeco);
          if (structure.total < doubleMargin) continue;
          var target = this.scrollTarget ? this.scrollTarget.range.head : null;
          var viewFrom = void 0,
            viewTo = void 0;
          if (wrapping) {
            var marginHeight = margin / this.heightOracle.lineLength * this.heightOracle.lineHeight;
            var top = void 0,
              bot = void 0;
            if (target != null) {
              var targetFrac = findFraction(structure, target);
              var spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;
              top = targetFrac - spaceFrac;
              bot = targetFrac + spaceFrac;
            } else {
              top = (this.visibleTop - line.top - marginHeight) / line.height;
              bot = (this.visibleBottom - line.top + marginHeight) / line.height;
            }
            viewFrom = findPosition(structure, top);
            viewTo = findPosition(structure, bot);
          } else {
            var totalWidth = structure.total * this.heightOracle.charWidth;
            var marginWidth = margin * this.heightOracle.charWidth;
            var left = void 0,
              right = void 0;
            if (target != null) {
              var _targetFrac = findFraction(structure, target);
              var _spaceFrac = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + marginWidth) / totalWidth;
              left = _targetFrac - _spaceFrac;
              right = _targetFrac + _spaceFrac;
            } else {
              left = (this.pixelViewport.left - marginWidth) / totalWidth;
              right = (this.pixelViewport.right + marginWidth) / totalWidth;
            }
            viewFrom = findPosition(structure, left);
            viewTo = findPosition(structure, right);
          }
          if (viewFrom > line.from) addGap(line.from, viewFrom, line, structure);
          if (viewTo < line.to) addGap(viewTo, line.to, line, structure);
        }
      } catch (err) {
        _iterator30.e(err);
      } finally {
        _iterator30.f();
      }
      return gaps;
    }
  }, {
    key: "gapSize",
    value: function gapSize(line, from, to, structure) {
      var fraction = findFraction(structure, to) - findFraction(structure, from);
      if (this.heightOracle.lineWrapping) {
        return line.height * fraction;
      } else {
        return structure.total * this.heightOracle.charWidth * fraction;
      }
    }
  }, {
    key: "updateLineGaps",
    value: function updateLineGaps(gaps) {
      var _this31 = this;
      if (!LineGap.same(gaps, this.lineGaps)) {
        this.lineGaps = gaps;
        this.lineGapDeco = Decoration.set(gaps.map(function (gap) {
          return gap.draw(_this31.heightOracle.lineWrapping);
        }));
      }
    }
  }, {
    key: "computeVisibleRanges",
    value: function computeVisibleRanges() {
      var deco = this.stateDeco;
      if (this.lineGaps.length) deco = deco.concat(this.lineGapDeco);
      var ranges = [];
      RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
        span: function span(from, to) {
          ranges.push({
            from: from,
            to: to
          });
        },
        point: function point() {}
      }, 20);
      var changed = ranges.length != this.visibleRanges.length || this.visibleRanges.some(function (r, i) {
        return r.from != ranges[i].from || r.to != ranges[i].to;
      });
      this.visibleRanges = ranges;
      return changed ? 4 /* Viewport */ : 0;
    }
  }, {
    key: "lineBlockAt",
    value: function lineBlockAt(pos) {
      return pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find(function (b) {
        return b.from <= pos && b.to >= pos;
      }) || scaleBlock(this.heightMap.lineAt(pos, QueryType$1.ByPos, this.heightOracle, 0, 0), this.scaler);
    }
  }, {
    key: "lineBlockAtHeight",
    value: function lineBlockAtHeight(height) {
      return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType$1.ByHeight, this.heightOracle, 0, 0), this.scaler);
    }
  }, {
    key: "elementAtHeight",
    value: function elementAtHeight(height) {
      return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
    }
  }, {
    key: "docHeight",
    get: function get() {
      return this.scaler.toDOM(this.heightMap.height);
    }
  }, {
    key: "contentHeight",
    get: function get() {
      return this.docHeight + this.paddingTop + this.paddingBottom;
    }
  }]);
  return ViewState;
}();
var Viewport = /*#__PURE__*/_createClass(function Viewport(from, to) {
  _classCallCheck(this, Viewport);
  this.from = from;
  this.to = to;
});
function lineStructure(from, to, stateDeco) {
  var ranges = [],
    pos = from,
    total = 0;
  RangeSet.spans(stateDeco, from, to, {
    span: function span() {},
    point: function point(from, to) {
      if (from > pos) {
        ranges.push({
          from: pos,
          to: from
        });
        total += from - pos;
      }
      pos = to;
    }
  }, 20); // We're only interested in collapsed ranges of a significant size
  if (pos < to) {
    ranges.push({
      from: pos,
      to: to
    });
    total += to - pos;
  }
  return {
    total: total,
    ranges: ranges
  };
}
function findPosition(_ref6, ratio) {
  var total = _ref6.total,
    ranges = _ref6.ranges;
  if (ratio <= 0) return ranges[0].from;
  if (ratio >= 1) return ranges[ranges.length - 1].to;
  var dist = Math.floor(total * ratio);
  for (var i = 0;; i++) {
    var _ranges$i = ranges[i],
      from = _ranges$i.from,
      to = _ranges$i.to,
      size = to - from;
    if (dist <= size) return from + dist;
    dist -= size;
  }
}
function findFraction(structure, pos) {
  var counted = 0;
  var _iterator31 = _createForOfIteratorHelper(structure.ranges),
    _step31;
  try {
    for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
      var _step31$value = _step31.value,
        from = _step31$value.from,
        to = _step31$value.to;
      if (pos <= to) {
        counted += pos - from;
        break;
      }
      counted += to - from;
    }
  } catch (err) {
    _iterator31.e(err);
  } finally {
    _iterator31.f();
  }
  return counted / structure.total;
}
function find(array, f) {
  var _iterator32 = _createForOfIteratorHelper(array),
    _step32;
  try {
    for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
      var val = _step32.value;
      if (f(val)) return val;
    }
  } catch (err) {
    _iterator32.e(err);
  } finally {
    _iterator32.f();
  }
  return undefined;
}
// Don't scale when the document height is within the range of what
// the DOM can handle.
var IdScaler = {
  toDOM: function toDOM(n) {
    return n;
  },
  fromDOM: function fromDOM(n) {
    return n;
  },
  scale: 1
};
// When the height is too big (> VP.MaxDOMHeight), scale down the
// regions outside the viewports so that the total height is
// VP.MaxDOMHeight.
var BigScaler = /*#__PURE__*/function () {
  function BigScaler(oracle, heightMap, viewports) {
    _classCallCheck(this, BigScaler);
    var vpHeight = 0,
      base = 0,
      domBase = 0;
    this.viewports = viewports.map(function (_ref7) {
      var from = _ref7.from,
        to = _ref7.to;
      var top = heightMap.lineAt(from, QueryType$1.ByPos, oracle, 0, 0).top;
      var bottom = heightMap.lineAt(to, QueryType$1.ByPos, oracle, 0, 0).bottom;
      vpHeight += bottom - top;
      return {
        from: from,
        to: to,
        top: top,
        bottom: bottom,
        domTop: 0,
        domBottom: 0
      };
    });
    this.scale = (7000000 /* MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);
    var _iterator33 = _createForOfIteratorHelper(this.viewports),
      _step33;
    try {
      for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {
        var obj = _step33.value;
        obj.domTop = domBase + (obj.top - base) * this.scale;
        domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
        base = obj.bottom;
      }
    } catch (err) {
      _iterator33.e(err);
    } finally {
      _iterator33.f();
    }
  }
  _createClass(BigScaler, [{
    key: "toDOM",
    value: function toDOM(n) {
      for (var i = 0, _base = 0, domBase = 0;; i++) {
        var vp = i < this.viewports.length ? this.viewports[i] : null;
        if (!vp || n < vp.top) return domBase + (n - _base) * this.scale;
        if (n <= vp.bottom) return vp.domTop + (n - vp.top);
        _base = vp.bottom;
        domBase = vp.domBottom;
      }
    }
  }, {
    key: "fromDOM",
    value: function fromDOM(n) {
      for (var i = 0, _base2 = 0, domBase = 0;; i++) {
        var vp = i < this.viewports.length ? this.viewports[i] : null;
        if (!vp || n < vp.domTop) return _base2 + (n - domBase) / this.scale;
        if (n <= vp.domBottom) return vp.top + (n - vp.domTop);
        _base2 = vp.bottom;
        domBase = vp.domBottom;
      }
    }
  }]);
  return BigScaler;
}();
function scaleBlock(block, scaler) {
  if (scaler.scale == 1) return block;
  var bTop = scaler.toDOM(block.top),
    bBottom = scaler.toDOM(block.bottom);
  return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block._content) ? block._content.map(function (b) {
    return scaleBlock(b, scaler);
  }) : block._content);
}
var _theme = /*@__PURE__*/Facet.define({
  combine: function combine(strs) {
    return strs.join(" ");
  }
});
var darkTheme = /*@__PURE__*/Facet.define({
  combine: function combine(values) {
    return values.indexOf(true) > -1;
  }
});
var baseThemeID = /*@__PURE__*/StyleModule.newName(),
  baseLightID = /*@__PURE__*/StyleModule.newName(),
  baseDarkID = /*@__PURE__*/StyleModule.newName();
var lightDarkIDs = {
  "&light": "." + baseLightID,
  "&dark": "." + baseDarkID
};
function buildTheme(main, spec, scopes) {
  return new StyleModule(spec, {
    finish: function finish(sel) {
      return /&/.test(sel) ? sel.replace(/&\w*/, function (m) {
        if (m == "&") return main;
        if (!scopes || !scopes[m]) throw new RangeError("Unsupported selector: ".concat(m));
        return scopes[m];
      }) : main + " " + sel;
    }
  });
}
var baseTheme$1$3 = /*@__PURE__*/buildTheme("." + baseThemeID, {
  "&": {
    position: "relative !important",
    boxSizing: "border-box",
    "&.cm-focused": {
      // Provide a simple default outline to make sure a focused
      // editor is visually distinct. Can't leave the default behavior
      // because that will apply to the content element, which is
      // inside the scrollable container and doesn't include the
      // gutters. We also can't use an 'auto' outline, since those
      // are, for some reason, drawn behind the element content, which
      // will cause things like the active line background to cover
      // the outline (#297).
      outline: "1px dotted #212121"
    },
    display: "flex !important",
    flexDirection: "column"
  },
  ".cm-scroller": {
    display: "flex !important",
    alignItems: "flex-start !important",
    fontFamily: "monospace",
    lineHeight: 1.4,
    height: "100%",
    overflowX: "auto",
    position: "relative",
    zIndex: 0
  },
  ".cm-content": {
    margin: 0,
    flexGrow: 2,
    flexShrink: 0,
    display: "block",
    whiteSpace: "pre",
    wordWrap: "normal",
    boxSizing: "border-box",
    padding: "4px 0",
    outline: "none",
    "&[contenteditable=true]": {
      WebkitUserModify: "read-write-plaintext-only"
    }
  },
  ".cm-lineWrapping": {
    whiteSpace_fallback: "pre-wrap",
    whiteSpace: "break-spaces",
    wordBreak: "break-word",
    overflowWrap: "anywhere",
    flexShrink: 1
  },
  "&light .cm-content": {
    caretColor: "black"
  },
  "&dark .cm-content": {
    caretColor: "white"
  },
  ".cm-line": {
    display: "block",
    padding: "0 2px 0 6px"
  },
  ".cm-layer": {
    position: "absolute",
    left: 0,
    top: 0,
    contain: "size style",
    "& > *": {
      position: "absolute"
    }
  },
  "&light .cm-selectionBackground": {
    background: "#d9d9d9"
  },
  "&dark .cm-selectionBackground": {
    background: "#222"
  },
  "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#d7d4f0"
  },
  "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#233"
  },
  ".cm-cursorLayer": {
    pointerEvents: "none"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
    animation: "steps(1) cm-blink 1.2s infinite"
  },
  // Two animations defined so that we can switch between them to
  // restart the animation without forcing another style
  // recomputation.
  "@keyframes cm-blink": {
    "0%": {},
    "50%": {
      opacity: 0
    },
    "100%": {}
  },
  "@keyframes cm-blink2": {
    "0%": {},
    "50%": {
      opacity: 0
    },
    "100%": {}
  },
  ".cm-cursor, .cm-dropCursor": {
    borderLeft: "1.2px solid black",
    marginLeft: "-0.6px",
    pointerEvents: "none"
  },
  ".cm-cursor": {
    display: "none"
  },
  "&dark .cm-cursor": {
    borderLeftColor: "#444"
  },
  ".cm-dropCursor": {
    position: "absolute"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
    display: "block"
  },
  "&light .cm-activeLine": {
    backgroundColor: "#cceeff44"
  },
  "&dark .cm-activeLine": {
    backgroundColor: "#99eeff33"
  },
  "&light .cm-specialChar": {
    color: "red"
  },
  "&dark .cm-specialChar": {
    color: "#f78"
  },
  ".cm-gutters": {
    flexShrink: 0,
    display: "flex",
    height: "100%",
    boxSizing: "border-box",
    left: 0,
    zIndex: 200
  },
  "&light .cm-gutters": {
    backgroundColor: "#f5f5f5",
    color: "#6c6c6c",
    borderRight: "1px solid #ddd"
  },
  "&dark .cm-gutters": {
    backgroundColor: "#333338",
    color: "#ccc"
  },
  ".cm-gutter": {
    display: "flex !important",
    flexDirection: "column",
    flexShrink: 0,
    boxSizing: "border-box",
    minHeight: "100%",
    overflow: "hidden"
  },
  ".cm-gutterElement": {
    boxSizing: "border-box"
  },
  ".cm-lineNumbers .cm-gutterElement": {
    padding: "0 3px 0 5px",
    minWidth: "20px",
    textAlign: "right",
    whiteSpace: "nowrap"
  },
  "&light .cm-activeLineGutter": {
    backgroundColor: "#e2f2ff"
  },
  "&dark .cm-activeLineGutter": {
    backgroundColor: "#222227"
  },
  ".cm-panels": {
    boxSizing: "border-box",
    position: "sticky",
    left: 0,
    right: 0
  },
  "&light .cm-panels": {
    backgroundColor: "#f5f5f5",
    color: "black"
  },
  "&light .cm-panels-top": {
    borderBottom: "1px solid #ddd"
  },
  "&light .cm-panels-bottom": {
    borderTop: "1px solid #ddd"
  },
  "&dark .cm-panels": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tab": {
    display: "inline-block",
    overflow: "hidden",
    verticalAlign: "bottom"
  },
  ".cm-widgetBuffer": {
    verticalAlign: "text-top",
    height: "1em",
    width: 0,
    display: "inline"
  },
  ".cm-placeholder": {
    color: "#888",
    display: "inline-block",
    verticalAlign: "top"
  },
  ".cm-highlightSpace:before": {
    content: "attr(data-display)",
    position: "absolute",
    pointerEvents: "none",
    color: "#888"
  },
  ".cm-highlightTab": {
    backgroundImage: "url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"20\"><path stroke=\"%23888\" stroke-width=\"1\" fill=\"none\" d=\"M1 10H196L190 5M190 15L196 10M197 4L197 16\"/></svg>')",
    backgroundSize: "auto 100%",
    backgroundPosition: "right 90%",
    backgroundRepeat: "no-repeat"
  },
  ".cm-trailingSpace": {
    backgroundColor: "#ff332255"
  },
  ".cm-button": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    padding: ".2em 1em",
    borderRadius: "1px"
  },
  "&light .cm-button": {
    backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
    }
  },
  "&dark .cm-button": {
    backgroundImage: "linear-gradient(#393939, #111)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#111, #333)"
    }
  },
  ".cm-textfield": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    border: "1px solid silver",
    padding: ".2em .5em"
  },
  "&light .cm-textfield": {
    backgroundColor: "white"
  },
  "&dark .cm-textfield": {
    border: "1px solid #555",
    backgroundColor: "inherit"
  }
}, lightDarkIDs);
var DOMChange = /*#__PURE__*/_createClass(function DOMChange(view, start, end, typeOver) {
  _classCallCheck(this, DOMChange);
  this.typeOver = typeOver;
  this.bounds = null;
  this.text = "";
  var _view$docView = view.docView,
    iHead = _view$docView.impreciseHead,
    iAnchor = _view$docView.impreciseAnchor;
  if (view.state.readOnly && start > -1) {
    // Ignore changes when the editor is read-only
    this.newSel = null;
  } else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {
    var selPoints = iHead || iAnchor ? [] : selectionPoints(view);
    var reader = new DOMReader(selPoints, view.state);
    reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
    this.text = reader.text;
    this.newSel = selectionFromPoints(selPoints, this.bounds.from);
  } else {
    var domSel = view.observer.selectionRange;
    var head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset || !contains(view.contentDOM, domSel.focusNode) ? view.state.selection.main.head : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
    var anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset || !contains(view.contentDOM, domSel.anchorNode) ? view.state.selection.main.anchor : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
    this.newSel = EditorSelection.single(anchor, head);
  }
});
function applyDOMChange(view, domChange) {
  var change;
  var newSel = domChange.newSel,
    sel = view.state.selection.main;
  var lastKey = view.inputState.lastKeyTime > Date.now() - 100 ? view.inputState.lastKeyCode : -1;
  if (domChange.bounds) {
    var _domChange$bounds = domChange.bounds,
      from = _domChange$bounds.from,
      to = _domChange$bounds.to;
    var preferredPos = sel.from,
      preferredSide = null;
    // Prefer anchoring to end when Backspace is pressed (or, on
    // Android, when something was deleted)
    if (lastKey === 8 || browser.android && domChange.text.length < to - from) {
      preferredPos = sel.to;
      preferredSide = "end";
    }
    var diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);
    if (diff) {
      // Chrome inserts two newlines when pressing shift-enter at the
      // end of a line. DomChange drops one of those.
      if (browser.chrome && lastKey == 13 && diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder) diff.toB--;
      change = {
        from: from + diff.from,
        to: from + diff.toA,
        insert: Text.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder))
      };
    }
  } else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {
    newSel = null;
  }
  if (!change && !newSel) return false;
  if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
    // Heuristic to notice typing over a selected character
    change = {
      from: sel.from,
      to: sel.to,
      insert: view.state.doc.slice(sel.from, sel.to)
    };
  } else if (change && change.from >= sel.from && change.to <= sel.to && (change.from != sel.from || change.to != sel.to) && sel.to - sel.from - (change.to - change.from) <= 4) {
    // If the change is inside the selection and covers most of it,
    // assume it is a selection replace (with identical characters at
    // the start/end not included in the diff)
    change = {
      from: sel.from,
      to: sel.to,
      insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
    };
  } else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 && /^\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute("autocorrect") == "off") {
    // Detect insert-period-on-double-space Mac and Android behavior,
    // and transform it into a regular space insert.
    if (newSel && change.insert.length == 2) newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
    change = {
      from: sel.from,
      to: sel.to,
      insert: Text.of([" "])
    };
  } else if (browser.chrome && change && change.from == change.to && change.from == sel.head && change.insert.toString() == "\n " && view.lineWrapping) {
    // In Chrome, if you insert a space at the start of a wrapped
    // line, it will actually insert a newline and a space, causing a
    // bogus new line to be created in CodeMirror (#968)
    if (newSel) newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
    change = {
      from: sel.from,
      to: sel.to,
      insert: Text.of([" "])
    };
  }
  if (change) {
    var startState = view.state;
    if (browser.ios && view.inputState.flushIOSKey(view)) return true;
    // Android browsers don't fire reasonable key events for enter,
    // backspace, or delete. So this detects changes that look like
    // they're caused by those keys, and reinterprets them as key
    // events. (Some of these keys are also handled by beforeinput
    // events and the pendingAndroidKey mechanism, but that's not
    // reliable in all situations.)
    if (browser.android && (change.from == sel.from && change.to == sel.to && change.insert.length == 1 && change.insert.lines == 2 && dispatchKey(view.contentDOM, "Enter", 13) || (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 || lastKey == 8 && change.insert.length < change.to - change.from) && dispatchKey(view.contentDOM, "Backspace", 8) || change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 && dispatchKey(view.contentDOM, "Delete", 46))) return true;
    var text = change.insert.toString();
    if (view.state.facet(inputHandler$1).some(function (h) {
      return h(view, change.from, change.to, text);
    })) return true;
    if (view.inputState.composing >= 0) view.inputState.composing++;
    var tr;
    if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 && (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) && view.inputState.composing < 0) {
      var before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
      var after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
      tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));
    } else {
      var changes = startState.changes(change);
      var mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : undefined;
      // Try to apply a composition change to all cursors
      if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 && change.to <= sel.to && change.to >= sel.to - 10) {
        var replaced = view.state.sliceDoc(change.from, change.to);
        var compositionRange = compositionSurroundingNode(view) || view.state.doc.lineAt(sel.head);
        var offset = sel.to - change.to,
          size = sel.to - sel.from;
        tr = startState.changeByRange(function (range) {
          if (range.from == sel.from && range.to == sel.to) return {
            changes: changes,
            range: mainSel || range.map(changes)
          };
          var to = range.to - offset,
            from = to - replaced.length;
          if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced ||
          // Unfortunately, there's no way to make multiple
          // changes in the same node work without aborting
          // composition, so cursors in the composition range are
          // ignored.
          compositionRange && range.to >= compositionRange.from && range.from <= compositionRange.to) return {
            range: range
          };
          var rangeChanges = startState.changes({
              from: from,
              to: to,
              insert: change.insert
            }),
            selOff = range.to - sel.to;
          return {
            changes: rangeChanges,
            range: !mainSel ? range.map(rangeChanges) : EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
          };
        });
      } else {
        tr = {
          changes: changes,
          selection: mainSel && startState.selection.replaceRange(mainSel)
        };
      }
    }
    var userEvent = "input.type";
    if (view.composing || view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {
      view.inputState.compositionPendingChange = false;
      userEvent += ".compose";
      if (view.inputState.compositionFirstChange) {
        userEvent += ".start";
        view.inputState.compositionFirstChange = false;
      }
    }
    view.dispatch(tr, {
      scrollIntoView: true,
      userEvent: userEvent
    });
    return true;
  } else if (newSel && !newSel.main.eq(sel)) {
    var _scrollIntoView = false,
      _userEvent = "select";
    if (view.inputState.lastSelectionTime > Date.now() - 50) {
      if (view.inputState.lastSelectionOrigin == "select") _scrollIntoView = true;
      _userEvent = view.inputState.lastSelectionOrigin;
    }
    view.dispatch({
      selection: newSel,
      scrollIntoView: _scrollIntoView,
      userEvent: _userEvent
    });
    return true;
  } else {
    return false;
  }
}
function findDiff(a, b, preferredPos, preferredSide) {
  var minLen = Math.min(a.length, b.length);
  var from = 0;
  while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from)) from++;
  if (from == minLen && a.length == b.length) return null;
  var toA = a.length,
    toB = b.length;
  while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
    toA--;
    toB--;
  }
  if (preferredSide == "end") {
    var adjust = Math.max(0, from - Math.min(toA, toB));
    preferredPos -= toA + adjust - from;
  }
  if (toA < from && a.length < b.length) {
    var move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
    from -= move;
    toB = from + (toB - toA);
    toA = from;
  } else if (toB < from) {
    var _move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
    from -= _move;
    toA = from + (toA - toB);
    toB = from;
  }
  return {
    from: from,
    toA: toA,
    toB: toB
  };
}
function selectionPoints(view) {
  var result = [];
  if (view.root.activeElement != view.contentDOM) return result;
  var _view$observer$select2 = view.observer.selectionRange,
    anchorNode = _view$observer$select2.anchorNode,
    anchorOffset = _view$observer$select2.anchorOffset,
    focusNode = _view$observer$select2.focusNode,
    focusOffset = _view$observer$select2.focusOffset;
  if (anchorNode) {
    result.push(new DOMPoint(anchorNode, anchorOffset));
    if (focusNode != anchorNode || focusOffset != anchorOffset) result.push(new DOMPoint(focusNode, focusOffset));
  }
  return result;
}
function selectionFromPoints(points, base) {
  if (points.length == 0) return null;
  var anchor = points[0].pos,
    head = points.length == 2 ? points[1].pos : anchor;
  return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;
}
var observeOptions = {
  childList: true,
  characterData: true,
  subtree: true,
  attributes: true,
  characterDataOldValue: true
};
// IE11 has very broken mutation observers, so we also listen to
// DOMCharacterDataModified there
var useCharData = browser.ie && browser.ie_version <= 11;
var DOMObserver = /*#__PURE__*/function () {
  function DOMObserver(view) {
    var _this32 = this;
    _classCallCheck(this, DOMObserver);
    this.view = view;
    this.active = false;
    // The known selection. Kept in our own object, as opposed to just
    // directly accessing the selection because:
    //  - Safari doesn't report the right selection in shadow DOM
    //  - Reading from the selection forces a DOM layout
    //  - This way, we can ignore selectionchange events if we have
    //    already seen the 'new' selection
    this.selectionRange = new DOMSelectionState();
    // Set when a selection change is detected, cleared on flush
    this.selectionChanged = false;
    this.delayedFlush = -1;
    this.resizeTimeout = -1;
    this.queue = [];
    this.delayedAndroidKey = null;
    this.flushingAndroidKey = -1;
    this.lastChange = 0;
    this.scrollTargets = [];
    this.intersection = null;
    this.resizeScroll = null;
    this.resizeContent = null;
    this.intersecting = false;
    this.gapIntersection = null;
    this.gaps = [];
    // Timeout for scheduling check of the parents that need scroll handlers
    this.parentCheck = -1;
    this.dom = view.contentDOM;
    this.observer = new MutationObserver(function (mutations) {
      var _iterator34 = _createForOfIteratorHelper(mutations),
        _step34;
      try {
        for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {
          var mut = _step34.value;
          _this32.queue.push(mut);
        }
        // IE11 will sometimes (on typing over a selection or
        // backspacing out a single character text node) call the
        // observer callback before actually updating the DOM.
        //
        // Unrelatedly, iOS Safari will, when ending a composition,
        // sometimes first clear it, deliver the mutations, and then
        // reinsert the finished text. CodeMirror's handling of the
        // deletion will prevent the reinsertion from happening,
        // breaking composition.
      } catch (err) {
        _iterator34.e(err);
      } finally {
        _iterator34.f();
      }
      if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) && mutations.some(function (m) {
        return m.type == "childList" && m.removedNodes.length || m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length;
      })) _this32.flushSoon();else _this32.flush();
    });
    if (useCharData) this.onCharData = function (event) {
      _this32.queue.push({
        target: event.target,
        type: "characterData",
        oldValue: event.prevValue
      });
      _this32.flushSoon();
    };
    this.onSelectionChange = this.onSelectionChange.bind(this);
    this.onResize = this.onResize.bind(this);
    this.onPrint = this.onPrint.bind(this);
    this.onScroll = this.onScroll.bind(this);
    if (typeof ResizeObserver == "function") {
      this.resizeScroll = new ResizeObserver(function () {
        var _a;
        if (((_a = _this32.view.docView) === null || _a === void 0 ? void 0 : _a.lastUpdate) < Date.now() - 75) _this32.onResize();
      });
      this.resizeScroll.observe(view.scrollDOM);
      this.resizeContent = new ResizeObserver(function () {
        return _this32.view.requestMeasure();
      });
      this.resizeContent.observe(view.contentDOM);
    }
    this.addWindowListeners(this.win = view.win);
    this.start();
    if (typeof IntersectionObserver == "function") {
      this.intersection = new IntersectionObserver(function (entries) {
        if (_this32.parentCheck < 0) _this32.parentCheck = setTimeout(_this32.listenForScroll.bind(_this32), 1000);
        if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0 != _this32.intersecting) {
          _this32.intersecting = !_this32.intersecting;
          if (_this32.intersecting != _this32.view.inView) _this32.onScrollChanged(document.createEvent("Event"));
        }
      }, {
        threshold: [0, .001]
      });
      this.intersection.observe(this.dom);
      this.gapIntersection = new IntersectionObserver(function (entries) {
        if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0) _this32.onScrollChanged(document.createEvent("Event"));
      }, {});
    }
    this.listenForScroll();
    this.readSelectionRange();
  }
  _createClass(DOMObserver, [{
    key: "onScrollChanged",
    value: function onScrollChanged(e) {
      this.view.inputState.runScrollHandlers(this.view, e);
      if (this.intersecting) this.view.measure();
    }
  }, {
    key: "onScroll",
    value: function onScroll(e) {
      if (this.intersecting) this.flush(false);
      this.onScrollChanged(e);
    }
  }, {
    key: "onResize",
    value: function onResize() {
      var _this33 = this;
      if (this.resizeTimeout < 0) this.resizeTimeout = setTimeout(function () {
        _this33.resizeTimeout = -1;
        _this33.view.requestMeasure();
      }, 50);
    }
  }, {
    key: "onPrint",
    value: function onPrint() {
      var _this34 = this;
      this.view.viewState.printing = true;
      this.view.measure();
      setTimeout(function () {
        _this34.view.viewState.printing = false;
        _this34.view.requestMeasure();
      }, 500);
    }
  }, {
    key: "updateGaps",
    value: function updateGaps(gaps) {
      if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some(function (g, i) {
        return g != gaps[i];
      }))) {
        this.gapIntersection.disconnect();
        var _iterator35 = _createForOfIteratorHelper(gaps),
          _step35;
        try {
          for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {
            var gap = _step35.value;
            this.gapIntersection.observe(gap);
          }
        } catch (err) {
          _iterator35.e(err);
        } finally {
          _iterator35.f();
        }
        this.gaps = gaps;
      }
    }
  }, {
    key: "onSelectionChange",
    value: function onSelectionChange(event) {
      var wasChanged = this.selectionChanged;
      if (!this.readSelectionRange() || this.delayedAndroidKey) return;
      var view = this.view,
        sel = this.selectionRange;
      if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel)) return;
      var context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
      if (context && context.ignoreEvent(event)) {
        if (!wasChanged) this.selectionChanged = false;
        return;
      }
      // Deletions on IE11 fire their events in the wrong order, giving
      // us a selection change event before the DOM changes are
      // reported.
      // Chrome Android has a similar issue when backspacing out a
      // selection (#645).
      if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty &&
      // (Selection.isCollapsed isn't reliable on IE)
      sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset)) this.flushSoon();else this.flush(false);
    }
  }, {
    key: "readSelectionRange",
    value: function readSelectionRange() {
      var view = this.view;
      // The Selection object is broken in shadow roots in Safari. See
      // https://github.com/codemirror/dev/issues/414
      var range = browser.safari && view.root.nodeType == 11 && deepActiveElement(this.dom.ownerDocument) == this.dom && safariSelectionRangeHack(this.view) || getSelection(view.root);
      if (!range || this.selectionRange.eq(range)) return false;
      var local = hasSelection(this.dom, range);
      // Detect the situation where the browser has, on focus, moved the
      // selection to the start of the content element. Reset it to the
      // position from the editor state.
      if (local && !this.selectionChanged && view.inputState.lastFocusTime > Date.now() - 200 && view.inputState.lastTouchTime < Date.now() - 300 && atElementStart(this.dom, range)) {
        this.view.inputState.lastFocusTime = 0;
        view.docView.updateSelection();
        return false;
      }
      this.selectionRange.setRange(range);
      if (local) this.selectionChanged = true;
      return true;
    }
  }, {
    key: "setSelectionRange",
    value: function setSelectionRange(anchor, head) {
      this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
      this.selectionChanged = false;
    }
  }, {
    key: "clearSelectionRange",
    value: function clearSelectionRange() {
      this.selectionRange.set(null, 0, null, 0);
    }
  }, {
    key: "listenForScroll",
    value: function listenForScroll() {
      this.parentCheck = -1;
      var i = 0,
        changed = null;
      for (var dom = this.dom; dom;) {
        if (dom.nodeType == 1) {
          if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom) i++;else if (!changed) changed = this.scrollTargets.slice(0, i);
          if (changed) changed.push(dom);
          dom = dom.assignedSlot || dom.parentNode;
        } else if (dom.nodeType == 11) {
          // Shadow root
          dom = dom.host;
        } else {
          break;
        }
      }
      if (i < this.scrollTargets.length && !changed) changed = this.scrollTargets.slice(0, i);
      if (changed) {
        var _iterator36 = _createForOfIteratorHelper(this.scrollTargets),
          _step36;
        try {
          for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {
            var _dom2 = _step36.value;
            _dom2.removeEventListener("scroll", this.onScroll);
          }
        } catch (err) {
          _iterator36.e(err);
        } finally {
          _iterator36.f();
        }
        var _iterator37 = _createForOfIteratorHelper(this.scrollTargets = changed),
          _step37;
        try {
          for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {
            var _dom3 = _step37.value;
            _dom3.addEventListener("scroll", this.onScroll);
          }
        } catch (err) {
          _iterator37.e(err);
        } finally {
          _iterator37.f();
        }
      }
    }
  }, {
    key: "ignore",
    value: function ignore(f) {
      if (!this.active) return f();
      try {
        this.stop();
        return f();
      } finally {
        this.start();
        this.clear();
      }
    }
  }, {
    key: "start",
    value: function start() {
      if (this.active) return;
      this.observer.observe(this.dom, observeOptions);
      if (useCharData) this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
      this.active = true;
    }
  }, {
    key: "stop",
    value: function stop() {
      if (!this.active) return;
      this.active = false;
      this.observer.disconnect();
      if (useCharData) this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
    }
    // Throw away any pending changes
  }, {
    key: "clear",
    value: function clear() {
      this.processRecords();
      this.queue.length = 0;
      this.selectionChanged = false;
    }
    // Chrome Android, especially in combination with GBoard, not only
    // doesn't reliably fire regular key events, but also often
    // surrounds the effect of enter or backspace with a bunch of
    // composition events that, when interrupted, cause text duplication
    // or other kinds of corruption. This hack makes the editor back off
    // from handling DOM changes for a moment when such a key is
    // detected (via beforeinput or keydown), and then tries to flush
    // them or, if that has no effect, dispatches the given key.
  }, {
    key: "delayAndroidKey",
    value: function delayAndroidKey(key, keyCode) {
      var _this35 = this;
      var _a;
      if (!this.delayedAndroidKey) {
        var flush = function flush() {
          var key = _this35.delayedAndroidKey;
          if (key) {
            _this35.clearDelayedAndroidKey();
            _this35.view.inputState.lastKeyCode = key.keyCode;
            _this35.view.inputState.lastKeyTime = Date.now();
            var flushed = _this35.flush();
            if (!flushed && key.force) dispatchKey(_this35.dom, key.key, key.keyCode);
          }
        };
        this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
      }
      // Since backspace beforeinput is sometimes signalled spuriously,
      // Enter always takes precedence.
      if (!this.delayedAndroidKey || key == "Enter") this.delayedAndroidKey = {
        key: key,
        keyCode: keyCode,
        // Only run the key handler when no changes are detected if
        // this isn't coming right after another change, in which case
        // it is probably part of a weird chain of updates, and should
        // be ignored if it returns the DOM to its previous state.
        force: this.lastChange < Date.now() - 50 || !!((_a = this.delayedAndroidKey) === null || _a === void 0 ? void 0 : _a.force)
      };
    }
  }, {
    key: "clearDelayedAndroidKey",
    value: function clearDelayedAndroidKey() {
      this.win.cancelAnimationFrame(this.flushingAndroidKey);
      this.delayedAndroidKey = null;
      this.flushingAndroidKey = -1;
    }
  }, {
    key: "flushSoon",
    value: function flushSoon() {
      var _this36 = this;
      if (this.delayedFlush < 0) this.delayedFlush = this.view.win.requestAnimationFrame(function () {
        _this36.delayedFlush = -1;
        _this36.flush();
      });
    }
  }, {
    key: "forceFlush",
    value: function forceFlush() {
      if (this.delayedFlush >= 0) {
        this.view.win.cancelAnimationFrame(this.delayedFlush);
        this.delayedFlush = -1;
      }
      this.flush();
    }
  }, {
    key: "pendingRecords",
    value: function pendingRecords() {
      var _iterator38 = _createForOfIteratorHelper(this.observer.takeRecords()),
        _step38;
      try {
        for (_iterator38.s(); !(_step38 = _iterator38.n()).done;) {
          var mut = _step38.value;
          this.queue.push(mut);
        }
      } catch (err) {
        _iterator38.e(err);
      } finally {
        _iterator38.f();
      }
      return this.queue;
    }
  }, {
    key: "processRecords",
    value: function processRecords() {
      var records = this.pendingRecords();
      if (records.length) this.queue = [];
      var from = -1,
        to = -1,
        typeOver = false;
      var _iterator39 = _createForOfIteratorHelper(records),
        _step39;
      try {
        for (_iterator39.s(); !(_step39 = _iterator39.n()).done;) {
          var record = _step39.value;
          var range = this.readMutation(record);
          if (!range) continue;
          if (range.typeOver) typeOver = true;
          if (from == -1) {
            from = range.from;
            to = range.to;
          } else {
            from = Math.min(range.from, from);
            to = Math.max(range.to, to);
          }
        }
      } catch (err) {
        _iterator39.e(err);
      } finally {
        _iterator39.f();
      }
      return {
        from: from,
        to: to,
        typeOver: typeOver
      };
    }
  }, {
    key: "readChange",
    value: function readChange() {
      var _this$processRecords = this.processRecords(),
        from = _this$processRecords.from,
        to = _this$processRecords.to,
        typeOver = _this$processRecords.typeOver;
      var newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
      if (from < 0 && !newSel) return null;
      if (from > -1) this.lastChange = Date.now();
      this.view.inputState.lastFocusTime = 0;
      this.selectionChanged = false;
      return new DOMChange(this.view, from, to, typeOver);
    }
    // Apply pending changes, if any
  }, {
    key: "flush",
    value: function flush() {
      var readSelection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      // Completely hold off flushing when pending keys are set—the code
      // managing those will make sure processRecords is called and the
      // view is resynchronized after
      if (this.delayedFlush >= 0 || this.delayedAndroidKey) return false;
      if (readSelection) this.readSelectionRange();
      var domChange = this.readChange();
      if (!domChange) return false;
      var startState = this.view.state;
      var handled = applyDOMChange(this.view, domChange);
      // The view wasn't updated
      if (this.view.state == startState) this.view.update([]);
      return handled;
    }
  }, {
    key: "readMutation",
    value: function readMutation(rec) {
      var cView = this.view.docView.nearest(rec.target);
      if (!cView || cView.ignoreMutation(rec)) return null;
      cView.markDirty(rec.type == "attributes");
      if (rec.type == "attributes") cView.dirty |= 4 /* Attrs */;
      if (rec.type == "childList") {
        var childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
        var childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
        return {
          from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
          to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd,
          typeOver: false
        };
      } else if (rec.type == "characterData") {
        return {
          from: cView.posAtStart,
          to: cView.posAtEnd,
          typeOver: rec.target.nodeValue == rec.oldValue
        };
      } else {
        return null;
      }
    }
  }, {
    key: "setWindow",
    value: function setWindow(win) {
      if (win != this.win) {
        this.removeWindowListeners(this.win);
        this.win = win;
        this.addWindowListeners(this.win);
      }
    }
  }, {
    key: "addWindowListeners",
    value: function addWindowListeners(win) {
      win.addEventListener("resize", this.onResize);
      win.addEventListener("beforeprint", this.onPrint);
      win.addEventListener("scroll", this.onScroll);
      win.document.addEventListener("selectionchange", this.onSelectionChange);
    }
  }, {
    key: "removeWindowListeners",
    value: function removeWindowListeners(win) {
      win.removeEventListener("scroll", this.onScroll);
      win.removeEventListener("resize", this.onResize);
      win.removeEventListener("beforeprint", this.onPrint);
      win.document.removeEventListener("selectionchange", this.onSelectionChange);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _a, _b, _c, _d;
      this.stop();
      (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();
      (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
      (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
      (_d = this.resizeContent) === null || _d === void 0 ? void 0 : _d.disconnect();
      var _iterator40 = _createForOfIteratorHelper(this.scrollTargets),
        _step40;
      try {
        for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {
          var dom = _step40.value;
          dom.removeEventListener("scroll", this.onScroll);
        }
      } catch (err) {
        _iterator40.e(err);
      } finally {
        _iterator40.f();
      }
      this.removeWindowListeners(this.win);
      clearTimeout(this.parentCheck);
      clearTimeout(this.resizeTimeout);
      this.win.cancelAnimationFrame(this.delayedFlush);
      this.win.cancelAnimationFrame(this.flushingAndroidKey);
    }
  }]);
  return DOMObserver;
}();
function findChild(cView, dom, dir) {
  while (dom) {
    var curView = ContentView.get(dom);
    if (curView && curView.parent == cView) return curView;
    var parent = dom.parentNode;
    dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
  }
  return null;
}
// Used to work around a Safari Selection/shadow DOM bug (#414)
function safariSelectionRangeHack(view) {
  var found = null;
  // Because Safari (at least in 2018-2021) doesn't provide regular
  // access to the selection inside a shadowroot, we have to perform a
  // ridiculous hack to get at it—using `execCommand` to trigger a
  // `beforeInput` event so that we can read the target range from the
  // event.
  function read(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
    found = event.getTargetRanges()[0];
  }
  view.contentDOM.addEventListener("beforeinput", read, true);
  view.dom.ownerDocument.execCommand("indent");
  view.contentDOM.removeEventListener("beforeinput", read, true);
  if (!found) return null;
  var anchorNode = found.startContainer,
    anchorOffset = found.startOffset;
  var focusNode = found.endContainer,
    focusOffset = found.endOffset;
  var curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
  // Since such a range doesn't distinguish between anchor and head,
  // use a heuristic that flips it around if its end matches the
  // current anchor.
  if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset)) {
    var _ref8 = [focusNode, focusOffset, anchorNode, anchorOffset];
    anchorNode = _ref8[0];
    anchorOffset = _ref8[1];
    focusNode = _ref8[2];
    focusOffset = _ref8[3];
  }
  return {
    anchorNode: anchorNode,
    anchorOffset: anchorOffset,
    focusNode: focusNode,
    focusOffset: focusOffset
  };
}

// The editor's update state machine looks something like this:
//
//     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
//                                         ↑      ↓
//                                         Updating (measure)
//
// The difference between 'Idle' and 'Idle (unchecked)' lies in
// whether a layout check has been scheduled. A regular update through
// the `update` method updates the DOM in a write-only fashion, and
// relies on a check (scheduled with `requestAnimationFrame`) to make
// sure everything is where it should be and the viewport covers the
// visible code. That check continues to measure and then optionally
// update until it reaches a coherent state.
/**
An editor view represents the editor's user interface. It holds
the editable DOM surface, and possibly other elements such as the
line number gutter. It handles events and dispatches state
transactions for editing actions.
*/
var EditorView = /*#__PURE__*/function () {
  /**
  Construct a new view. You'll want to either provide a `parent`
  option, or put `view.dom` into your document after creating a
  view, so that the user can see the editor.
  */
  function EditorView() {
    var _this37 = this;
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, EditorView);
    this.plugins = [];
    this.pluginMap = new Map();
    this.editorAttrs = {};
    this.contentAttrs = {};
    this.bidiCache = [];
    this.destroyed = false;
    /**
    @internal
    */
    this.updateState = 2 /* Updating */;
    /**
    @internal
    */
    this.measureScheduled = -1;
    /**
    @internal
    */
    this.measureRequests = [];
    this.contentDOM = document.createElement("div");
    this.scrollDOM = document.createElement("div");
    this.scrollDOM.tabIndex = -1;
    this.scrollDOM.className = "cm-scroller";
    this.scrollDOM.appendChild(this.contentDOM);
    this.announceDOM = document.createElement("div");
    this.announceDOM.style.cssText = "position: fixed; top: -10000px";
    this.announceDOM.setAttribute("aria-live", "polite");
    this.dom = document.createElement("div");
    this.dom.appendChild(this.announceDOM);
    this.dom.appendChild(this.scrollDOM);
    this._dispatch = config.dispatch || function (tr) {
      return _this37.update([tr]);
    };
    this.dispatch = this.dispatch.bind(this);
    this._root = config.root || getRoot(config.parent) || document;
    this.viewState = new ViewState(config.state || EditorState.create(config));
    this.plugins = this.state.facet(viewPlugin).map(function (spec) {
      return new PluginInstance(spec);
    });
    var _iterator41 = _createForOfIteratorHelper(this.plugins),
      _step41;
    try {
      for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {
        var _plugin4 = _step41.value;
        _plugin4.update(this);
      }
    } catch (err) {
      _iterator41.e(err);
    } finally {
      _iterator41.f();
    }
    this.observer = new DOMObserver(this);
    this.inputState = new InputState(this);
    this.inputState.ensureHandlers(this, this.plugins);
    this.docView = new DocView(this);
    this.mountStyles();
    this.updateAttrs();
    this.updateState = 0 /* Idle */;
    this.requestMeasure();
    if (config.parent) config.parent.appendChild(this.dom);
  }
  /**
  The current editor state.
  */
  _createClass(EditorView, [{
    key: "state",
    get: function get() {
      return this.viewState.state;
    }
    /**
    To be able to display large documents without consuming too much
    memory or overloading the browser, CodeMirror only draws the
    code that is visible (plus a margin around it) to the DOM. This
    property tells you the extent of the current drawn viewport, in
    document positions.
    */
  }, {
    key: "viewport",
    get: function get() {
      return this.viewState.viewport;
    }
    /**
    When there are, for example, large collapsed ranges in the
    viewport, its size can be a lot bigger than the actual visible
    content. Thus, if you are doing something like styling the
    content in the viewport, it is preferable to only do so for
    these ranges, which are the subset of the viewport that is
    actually drawn.
    */
  }, {
    key: "visibleRanges",
    get: function get() {
      return this.viewState.visibleRanges;
    }
    /**
    Returns false when the editor is entirely scrolled out of view
    or otherwise hidden.
    */
  }, {
    key: "inView",
    get: function get() {
      return this.viewState.inView;
    }
    /**
    Indicates whether the user is currently composing text via
    [IME](https://en.wikipedia.org/wiki/Input_method), and at least
    one change has been made in the current composition.
    */
  }, {
    key: "composing",
    get: function get() {
      return this.inputState.composing > 0;
    }
    /**
    Indicates whether the user is currently in composing state. Note
    that on some platforms, like Android, this will be the case a
    lot, since just putting the cursor on a word starts a
    composition there.
    */
  }, {
    key: "compositionStarted",
    get: function get() {
      return this.inputState.composing >= 0;
    }
    /**
    The document or shadow root that the view lives in.
    */
  }, {
    key: "root",
    get: function get() {
      return this._root;
    }
    /**
    @internal
    */
  }, {
    key: "win",
    get: function get() {
      return this.dom.ownerDocument.defaultView || window;
    }
  }, {
    key: "dispatch",
    value: function dispatch() {
      var _this$state;
      var tr = arguments.length == 1 && (arguments.length <= 0 ? undefined : arguments[0]) instanceof Transaction ? arguments.length <= 0 ? undefined : arguments[0] : (_this$state = this.state).update.apply(_this$state, arguments);
      this._dispatch(tr, this);
    }
    /**
    Update the view for the given array of transactions. This will
    update the visible document and selection to match the state
    produced by the transactions, and notify view plugins of the
    change. You should usually call
    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
    as a primitive.
    */
  }, {
    key: "update",
    value: function update(transactions) {
      var _this38 = this;
      if (this.updateState != 0 /* Idle */) throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
      var redrawn = false,
        attrsChanged = false,
        update;
      var state = this.state;
      var _iterator42 = _createForOfIteratorHelper(transactions),
        _step42;
      try {
        for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {
          var _tr = _step42.value;
          if (_tr.startState != state) throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
          state = _tr.state;
        }
      } catch (err) {
        _iterator42.e(err);
      } finally {
        _iterator42.f();
      }
      if (this.destroyed) {
        this.viewState.state = state;
        return;
      }
      var focus = this.hasFocus,
        focusFlag = 0,
        dispatchFocus = null;
      if (transactions.some(function (tr) {
        return tr.annotation(isFocusChange);
      })) {
        this.inputState.notifiedFocused = focus;
        // If a focus-change transaction is being dispatched, set this update flag.
        focusFlag = 1 /* Focus */;
      } else if (focus != this.inputState.notifiedFocused) {
        this.inputState.notifiedFocused = focus;
        // Schedule a separate focus transaction if necessary, otherwise
        // add a flag to this update
        dispatchFocus = focusChangeTransaction(state, focus);
        if (!dispatchFocus) focusFlag = 1 /* Focus */;
      }
      // If there was a pending DOM change, eagerly read it and try to
      // apply it after the given transactions.
      var pendingKey = this.observer.delayedAndroidKey,
        domChange = null;
      if (pendingKey) {
        this.observer.clearDelayedAndroidKey();
        domChange = this.observer.readChange();
        // Only try to apply DOM changes if the transactions didn't
        // change the doc or selection.
        if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection)) domChange = null;
      } else {
        this.observer.clear();
      }
      // When the phrases change, redraw the editor
      if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases)) return this.setState(state);
      update = ViewUpdate.create(this, state, transactions);
      update.flags |= focusFlag;
      var scrollTarget = this.viewState.scrollTarget;
      try {
        this.updateState = 2 /* Updating */;
        var _iterator43 = _createForOfIteratorHelper(transactions),
          _step43;
        try {
          for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {
            var tr = _step43.value;
            if (scrollTarget) scrollTarget = scrollTarget.map(tr.changes);
            if (tr.scrollIntoView) {
              var main = tr.state.selection.main;
              scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
            }
            var _iterator44 = _createForOfIteratorHelper(tr.effects),
              _step44;
            try {
              for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {
                var e = _step44.value;
                if (e.is(_scrollIntoView2)) scrollTarget = e.value;
              }
            } catch (err) {
              _iterator44.e(err);
            } finally {
              _iterator44.f();
            }
          }
        } catch (err) {
          _iterator43.e(err);
        } finally {
          _iterator43.f();
        }
        this.viewState.update(update, scrollTarget);
        this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
        if (!update.empty) {
          this.updatePlugins(update);
          this.inputState.update(update);
        }
        redrawn = this.docView.update(update);
        if (this.state.facet(styleModule) != this.styleModules) this.mountStyles();
        attrsChanged = this.updateAttrs();
        this.showAnnouncements(transactions);
        this.docView.updateSelection(redrawn, transactions.some(function (tr) {
          return tr.isUserEvent("select.pointer");
        }));
      } finally {
        this.updateState = 0 /* Idle */;
      }

      if (update.startState.facet(_theme) != update.state.facet(_theme)) this.viewState.mustMeasureContent = true;
      if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent) this.requestMeasure();
      if (!update.empty) {
        var _iterator45 = _createForOfIteratorHelper(this.state.facet(updateListener)),
          _step45;
        try {
          for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {
            var listener = _step45.value;
            listener(update);
          }
        } catch (err) {
          _iterator45.e(err);
        } finally {
          _iterator45.f();
        }
      }
      if (dispatchFocus || domChange) Promise.resolve().then(function () {
        if (dispatchFocus && _this38.state == dispatchFocus.startState) _this38.dispatch(dispatchFocus);
        if (domChange) {
          if (!applyDOMChange(_this38, domChange) && pendingKey.force) dispatchKey(_this38.contentDOM, pendingKey.key, pendingKey.keyCode);
        }
      });
    }
    /**
    Reset the view to the given state. (This will cause the entire
    document to be redrawn and all view plugins to be reinitialized,
    so you should probably only use it when the new state isn't
    derived from the old state. Otherwise, use
    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
    */
  }, {
    key: "setState",
    value: function setState(newState) {
      if (this.updateState != 0 /* Idle */) throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
      if (this.destroyed) {
        this.viewState.state = newState;
        return;
      }
      this.updateState = 2 /* Updating */;
      var hadFocus = this.hasFocus;
      try {
        var _iterator46 = _createForOfIteratorHelper(this.plugins),
          _step46;
        try {
          for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {
            var _plugin5 = _step46.value;
            _plugin5.destroy(this);
          }
        } catch (err) {
          _iterator46.e(err);
        } finally {
          _iterator46.f();
        }
        this.viewState = new ViewState(newState);
        this.plugins = newState.facet(viewPlugin).map(function (spec) {
          return new PluginInstance(spec);
        });
        this.pluginMap.clear();
        var _iterator47 = _createForOfIteratorHelper(this.plugins),
          _step47;
        try {
          for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {
            var _plugin6 = _step47.value;
            _plugin6.update(this);
          }
        } catch (err) {
          _iterator47.e(err);
        } finally {
          _iterator47.f();
        }
        this.docView = new DocView(this);
        this.inputState.ensureHandlers(this, this.plugins);
        this.mountStyles();
        this.updateAttrs();
        this.bidiCache = [];
      } finally {
        this.updateState = 0 /* Idle */;
      }

      if (hadFocus) this.focus();
      this.requestMeasure();
    }
  }, {
    key: "updatePlugins",
    value: function updatePlugins(update) {
      var prevSpecs = update.startState.facet(viewPlugin),
        specs = update.state.facet(viewPlugin);
      if (prevSpecs != specs) {
        var newPlugins = [];
        var _iterator48 = _createForOfIteratorHelper(specs),
          _step48;
        try {
          for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {
            var spec = _step48.value;
            var found = prevSpecs.indexOf(spec);
            if (found < 0) {
              newPlugins.push(new PluginInstance(spec));
            } else {
              var _plugin7 = this.plugins[found];
              _plugin7.mustUpdate = update;
              newPlugins.push(_plugin7);
            }
          }
        } catch (err) {
          _iterator48.e(err);
        } finally {
          _iterator48.f();
        }
        var _iterator49 = _createForOfIteratorHelper(this.plugins),
          _step49;
        try {
          for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {
            var _plugin8 = _step49.value;
            if (_plugin8.mustUpdate != update) _plugin8.destroy(this);
          }
        } catch (err) {
          _iterator49.e(err);
        } finally {
          _iterator49.f();
        }
        this.plugins = newPlugins;
        this.pluginMap.clear();
        this.inputState.ensureHandlers(this, this.plugins);
      } else {
        var _iterator50 = _createForOfIteratorHelper(this.plugins),
          _step50;
        try {
          for (_iterator50.s(); !(_step50 = _iterator50.n()).done;) {
            var _p = _step50.value;
            _p.mustUpdate = update;
          }
        } catch (err) {
          _iterator50.e(err);
        } finally {
          _iterator50.f();
        }
      }
      for (var i = 0; i < this.plugins.length; i++) this.plugins[i].update(this);
    }
    /**
    @internal
    */
  }, {
    key: "measure",
    value: function measure() {
      var _this39 = this;
      var flush = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      if (this.destroyed) return;
      if (this.measureScheduled > -1) this.win.cancelAnimationFrame(this.measureScheduled);
      this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame
      if (flush) this.observer.forceFlush();
      var updated = null;
      var sDOM = this.scrollDOM,
        _this$viewState = this.viewState,
        scrollAnchorPos = _this$viewState.scrollAnchorPos,
        scrollAnchorHeight = _this$viewState.scrollAnchorHeight;
      this.viewState.scrollAnchorHeight = -1;
      if (scrollAnchorHeight < 0 || sDOM.scrollTop != this.viewState.scrollTop) {
        if (sDOM.scrollTop > sDOM.scrollHeight - sDOM.clientHeight - 4) {
          scrollAnchorPos = -1;
          scrollAnchorHeight = this.viewState.heightMap.height;
        } else {
          var block = this.viewState.lineBlockAtHeight(sDOM.scrollTop);
          scrollAnchorPos = block.from;
          scrollAnchorHeight = block.top;
        }
      }
      try {
        for (var i = 0;; i++) {
          this.updateState = 1 /* Measuring */;
          var oldViewport = this.viewport;
          var changed = this.viewState.measure(this);
          if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null) break;
          if (i > 5) {
            console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
            break;
          }
          var measuring = [];
          // Only run measure requests in this cycle when the viewport didn't change
          if (!(changed & 4 /* Viewport */)) {
            var _ref9 = [measuring, this.measureRequests];
            this.measureRequests = _ref9[0];
            measuring = _ref9[1];
          }
          var measured = measuring.map(function (m) {
            try {
              return m.read(_this39);
            } catch (e) {
              logException(_this39.state, e);
              return BadMeasure;
            }
          });
          var update = ViewUpdate.create(this, this.state, []),
            redrawn = false,
            scrolled = false;
          update.flags |= changed;
          if (!updated) updated = update;else updated.flags |= changed;
          this.updateState = 2 /* Updating */;
          if (!update.empty) {
            this.updatePlugins(update);
            this.inputState.update(update);
            this.updateAttrs();
            redrawn = this.docView.update(update);
          }
          for (var _i10 = 0; _i10 < measuring.length; _i10++) if (measured[_i10] != BadMeasure) {
            try {
              var m = measuring[_i10];
              if (m.write) m.write(measured[_i10], this);
            } catch (e) {
              logException(this.state, e);
            }
          }
          if (this.viewState.editorHeight) {
            if (this.viewState.scrollTarget) {
              this.docView.scrollIntoView(this.viewState.scrollTarget);
              this.viewState.scrollTarget = null;
              scrolled = true;
            } else if (scrollAnchorHeight > -1) {
              var newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(scrollAnchorPos).top;
              var diff = newAnchorHeight - scrollAnchorHeight;
              if (diff > 1 || diff < -1) {
                sDOM.scrollTop += diff;
                scrolled = true;
              }
            }
          }
          if (redrawn) this.docView.updateSelection(true);
          if (this.viewport.from == oldViewport.from && this.viewport.to == oldViewport.to && !scrolled && this.measureRequests.length == 0) break;
          scrollAnchorHeight = -1;
        }
      } finally {
        this.updateState = 0 /* Idle */;
        this.measureScheduled = -1;
      }
      if (updated && !updated.empty) {
        var _iterator51 = _createForOfIteratorHelper(this.state.facet(updateListener)),
          _step51;
        try {
          for (_iterator51.s(); !(_step51 = _iterator51.n()).done;) {
            var listener = _step51.value;
            listener(updated);
          }
        } catch (err) {
          _iterator51.e(err);
        } finally {
          _iterator51.f();
        }
      }
    }
    /**
    Get the CSS classes for the currently active editor themes.
    */
  }, {
    key: "themeClasses",
    get: function get() {
      return baseThemeID + " " + (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " + this.state.facet(_theme);
    }
  }, {
    key: "updateAttrs",
    value: function updateAttrs() {
      var _this40 = this;
      var editorAttrs = attrsFromFacet(this, editorAttributes, {
        "class": "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
      });
      var contentAttrs = {
        spellcheck: "false",
        autocorrect: "off",
        autocapitalize: "off",
        translate: "no",
        contenteditable: !this.state.facet(editable) ? "false" : "true",
        "class": "cm-content",
        style: "".concat(browser.tabSize, ": ").concat(this.state.tabSize),
        role: "textbox",
        "aria-multiline": "true"
      };
      if (this.state.readOnly) contentAttrs["aria-readonly"] = "true";
      attrsFromFacet(this, contentAttributes, contentAttrs);
      var changed = this.observer.ignore(function () {
        var changedContent = _updateAttrs(_this40.contentDOM, _this40.contentAttrs, contentAttrs);
        var changedEditor = _updateAttrs(_this40.dom, _this40.editorAttrs, editorAttrs);
        return changedContent || changedEditor;
      });
      this.editorAttrs = editorAttrs;
      this.contentAttrs = contentAttrs;
      return changed;
    }
  }, {
    key: "showAnnouncements",
    value: function showAnnouncements(trs) {
      var first = true;
      var _iterator52 = _createForOfIteratorHelper(trs),
        _step52;
      try {
        for (_iterator52.s(); !(_step52 = _iterator52.n()).done;) {
          var tr = _step52.value;
          var _iterator53 = _createForOfIteratorHelper(tr.effects),
            _step53;
          try {
            for (_iterator53.s(); !(_step53 = _iterator53.n()).done;) {
              var effect = _step53.value;
              if (effect.is(EditorView.announce)) {
                if (first) this.announceDOM.textContent = "";
                first = false;
                var div = this.announceDOM.appendChild(document.createElement("div"));
                div.textContent = effect.value;
              }
            }
          } catch (err) {
            _iterator53.e(err);
          } finally {
            _iterator53.f();
          }
        }
      } catch (err) {
        _iterator52.e(err);
      } finally {
        _iterator52.f();
      }
    }
  }, {
    key: "mountStyles",
    value: function mountStyles() {
      this.styleModules = this.state.facet(styleModule);
      StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1$3).reverse());
    }
  }, {
    key: "readMeasured",
    value: function readMeasured() {
      if (this.updateState == 2 /* Updating */) throw new Error("Reading the editor layout isn't allowed during an update");
      if (this.updateState == 0 /* Idle */ && this.measureScheduled > -1) this.measure(false);
    }
    /**
    Schedule a layout measurement, optionally providing callbacks to
    do custom DOM measuring followed by a DOM write phase. Using
    this is preferable reading DOM layout directly from, for
    example, an event handler, because it'll make sure measuring and
    drawing done by other components is synchronized, avoiding
    unnecessary DOM layout computations.
    */
  }, {
    key: "requestMeasure",
    value: function requestMeasure(request) {
      var _this41 = this;
      if (this.measureScheduled < 0) this.measureScheduled = this.win.requestAnimationFrame(function () {
        return _this41.measure();
      });
      if (request) {
        if (this.measureRequests.indexOf(request) > -1) return;
        if (request.key != null) for (var i = 0; i < this.measureRequests.length; i++) {
          if (this.measureRequests[i].key === request.key) {
            this.measureRequests[i] = request;
            return;
          }
        }
        this.measureRequests.push(request);
      }
    }
    /**
    Get the value of a specific plugin, if present. Note that
    plugins that crash can be dropped from a view, so even when you
    know you registered a given plugin, it is recommended to check
    the return value of this method.
    */
  }, {
    key: "plugin",
    value: function plugin(_plugin3) {
      var known = this.pluginMap.get(_plugin3);
      if (known === undefined || known && known.spec != _plugin3) this.pluginMap.set(_plugin3, known = this.plugins.find(function (p) {
        return p.spec == _plugin3;
      }) || null);
      return known && known.update(this).value;
    }
    /**
    The top position of the document, in screen coordinates. This
    may be negative when the editor is scrolled down. Points
    directly to the top of the first line, not above the padding.
    */
  }, {
    key: "documentTop",
    get: function get() {
      return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
    }
    /**
    Reports the padding above and below the document.
    */
  }, {
    key: "documentPadding",
    get: function get() {
      return {
        top: this.viewState.paddingTop,
        bottom: this.viewState.paddingBottom
      };
    }
    /**
    Find the text line or block widget at the given vertical
    position (which is interpreted as relative to the [top of the
    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
    */
  }, {
    key: "elementAtHeight",
    value: function elementAtHeight(height) {
      this.readMeasured();
      return this.viewState.elementAtHeight(height);
    }
    /**
    Find the line block (see
    [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
    height, again interpreted relative to the [top of the
    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
    */
  }, {
    key: "lineBlockAtHeight",
    value: function lineBlockAtHeight(height) {
      this.readMeasured();
      return this.viewState.lineBlockAtHeight(height);
    }
    /**
    Get the extent and vertical position of all [line
    blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
    are relative to the [top of the
    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
    */
  }, {
    key: "viewportLineBlocks",
    get: function get() {
      return this.viewState.viewportLines;
    }
    /**
    Find the line block around the given document position. A line
    block is a range delimited on both sides by either a
    non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the
    start/end of the document. It will usually just hold a line of
    text, but may be broken into multiple textblocks by block
    widgets.
    */
  }, {
    key: "lineBlockAt",
    value: function lineBlockAt(pos) {
      return this.viewState.lineBlockAt(pos);
    }
    /**
    The editor's total content height.
    */
  }, {
    key: "contentHeight",
    get: function get() {
      return this.viewState.contentHeight;
    }
    /**
    Move a cursor position by [grapheme
    cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
    the motion is away from the line start, or towards it. In
    bidirectional text, the line is traversed in visual order, using
    the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
    When the start position was the last one on the line, the
    returned position will be across the line break. If there is no
    further line, the original position is returned.
    
    By default, this method moves over a single cluster. The
    optional `by` argument can be used to move across more. It will
    be called with the first cluster as argument, and should return
    a predicate that determines, for each subsequent cluster,
    whether it should also be moved over.
    */
  }, {
    key: "moveByChar",
    value: function moveByChar(start, forward, by) {
      return skipAtoms(this, start, _moveByChar(this, start, forward, by));
    }
    /**
    Move a cursor position across the next group of either
    [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
    non-whitespace characters.
    */
  }, {
    key: "moveByGroup",
    value: function moveByGroup(start, forward) {
      var _this42 = this;
      return skipAtoms(this, start, _moveByChar(this, start, forward, function (initial) {
        return byGroup(_this42, start.head, initial);
      }));
    }
    /**
    Move to the next line boundary in the given direction. If
    `includeWrap` is true, line wrapping is on, and there is a
    further wrap point on the current line, the wrap point will be
    returned. Otherwise this function will return the start or end
    of the line.
    */
  }, {
    key: "moveToLineBoundary",
    value: function moveToLineBoundary(start, forward) {
      var includeWrap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      return _moveToLineBoundary(this, start, forward, includeWrap);
    }
    /**
    Move a cursor position vertically. When `distance` isn't given,
    it defaults to moving to the next line (including wrapped
    lines). Otherwise, `distance` should provide a positive distance
    in pixels.
    
    When `start` has a
    [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
    motion will use that as a target horizontal position. Otherwise,
    the cursor's own horizontal position is used. The returned
    cursor will have its goal column set to whichever column was
    used.
    */
  }, {
    key: "moveVertically",
    value: function moveVertically(start, forward, distance) {
      return skipAtoms(this, start, _moveVertically(this, start, forward, distance));
    }
    /**
    Find the DOM parent node and offset (child offset if `node` is
    an element, character offset when it is a text node) at the
    given document position.
    
    Note that for positions that aren't currently in
    `visibleRanges`, the resulting DOM position isn't necessarily
    meaningful (it may just point before or after a placeholder
    element).
    */
  }, {
    key: "domAtPos",
    value: function domAtPos(pos) {
      return this.docView.domAtPos(pos);
    }
    /**
    Find the document position at the given DOM node. Can be useful
    for associating positions with DOM events. Will raise an error
    when `node` isn't part of the editor content.
    */
  }, {
    key: "posAtDOM",
    value: function posAtDOM(node) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return this.docView.posFromDOM(node, offset);
    }
  }, {
    key: "posAtCoords",
    value: function posAtCoords(coords) {
      var precise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.readMeasured();
      return _posAtCoords(this, coords, precise);
    }
    /**
    Get the screen coordinates at the given document position.
    `side` determines whether the coordinates are based on the
    element before (-1) or after (1) the position (if no element is
    available on the given side, the method will transparently use
    another strategy to get reasonable coordinates).
    */
  }, {
    key: "coordsAtPos",
    value: function coordsAtPos(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      this.readMeasured();
      var rect = this.docView.coordsAt(pos, side);
      if (!rect || rect.left == rect.right) return rect;
      var line = this.state.doc.lineAt(pos),
        order = this.bidiSpans(line);
      var span = order[BidiSpan.find(order, pos - line.from, -1, side)];
      return flattenRect(rect, span.dir == Direction.LTR == side > 0);
    }
    /**
    The default width of a character in the editor. May not
    accurately reflect the width of all characters (given variable
    width fonts or styling of invididual ranges).
    */
  }, {
    key: "defaultCharacterWidth",
    get: function get() {
      return this.viewState.heightOracle.charWidth;
    }
    /**
    The default height of a line in the editor. May not be accurate
    for all lines.
    */
  }, {
    key: "defaultLineHeight",
    get: function get() {
      return this.viewState.heightOracle.lineHeight;
    }
    /**
    The text direction
    ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
    CSS property) of the editor's content element.
    */
  }, {
    key: "textDirection",
    get: function get() {
      return this.viewState.defaultTextDirection;
    }
    /**
    Find the text direction of the block at the given position, as
    assigned by CSS. If
    [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
    isn't enabled, or the given position is outside of the viewport,
    this will always return the same as
    [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
    this may trigger a DOM layout.
    */
  }, {
    key: "textDirectionAt",
    value: function textDirectionAt(pos) {
      var perLine = this.state.facet(perLineTextDirection);
      if (!perLine || pos < this.viewport.from || pos > this.viewport.to) return this.textDirection;
      this.readMeasured();
      return this.docView.textDirectionAt(pos);
    }
    /**
    Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
    (as determined by the
    [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
    CSS property of its content element).
    */
  }, {
    key: "lineWrapping",
    get: function get() {
      return this.viewState.heightOracle.lineWrapping;
    }
    /**
    Returns the bidirectional text structure of the given line
    (which should be in the current document) as an array of span
    objects. The order of these spans matches the [text
    direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
    left-to-right, the leftmost spans come first, otherwise the
    rightmost spans come first.
    */
  }, {
    key: "bidiSpans",
    value: function bidiSpans(line) {
      if (line.length > MaxBidiLine) return trivialOrder(line.length);
      var dir = this.textDirectionAt(line.from);
      var _iterator54 = _createForOfIteratorHelper(this.bidiCache),
        _step54;
      try {
        for (_iterator54.s(); !(_step54 = _iterator54.n()).done;) {
          var entry = _step54.value;
          if (entry.from == line.from && entry.dir == dir) return entry.order;
        }
      } catch (err) {
        _iterator54.e(err);
      } finally {
        _iterator54.f();
      }
      var order = computeOrder(line.text, dir);
      this.bidiCache.push(new CachedOrder(line.from, line.to, dir, order));
      return order;
    }
    /**
    Check whether the editor has focus.
    */
  }, {
    key: "hasFocus",
    get: function get() {
      var _a;
      // Safari return false for hasFocus when the context menu is open
      // or closing, which leads us to ignore selection changes from the
      // context menu because it looks like the editor isn't focused.
      // This kludges around that.
      return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
    }
    /**
    Put focus on the editor.
    */
  }, {
    key: "focus",
    value: function focus() {
      var _this43 = this;
      this.observer.ignore(function () {
        focusPreventScroll(_this43.contentDOM);
        _this43.docView.updateSelection();
      });
    }
    /**
    Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
    necessary when moving the editor's existing DOM to a new window or shadow root.
    */
  }, {
    key: "setRoot",
    value: function setRoot(root) {
      if (this._root != root) {
        this._root = root;
        this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
        this.mountStyles();
      }
    }
    /**
    Clean up this editor view, removing its element from the
    document, unregistering event handlers, and notifying
    plugins. The view instance can no longer be used after
    calling this.
    */
  }, {
    key: "destroy",
    value: function destroy() {
      var _iterator55 = _createForOfIteratorHelper(this.plugins),
        _step55;
      try {
        for (_iterator55.s(); !(_step55 = _iterator55.n()).done;) {
          var _plugin9 = _step55.value;
          _plugin9.destroy(this);
        }
      } catch (err) {
        _iterator55.e(err);
      } finally {
        _iterator55.f();
      }
      this.plugins = [];
      this.inputState.destroy();
      this.dom.remove();
      this.observer.destroy();
      if (this.measureScheduled > -1) this.win.cancelAnimationFrame(this.measureScheduled);
      this.destroyed = true;
    }
    /**
    Returns an effect that can be
    [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
    cause it to scroll the given position or range into view.
    */
  }], [{
    key: "scrollIntoView",
    value: function scrollIntoView(pos) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return _scrollIntoView2.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
    }
    /**
    Returns an extension that can be used to add DOM event handlers.
    The value should be an object mapping event names to handler
    functions. For any given event, such functions are ordered by
    extension precedence, and the first handler to return true will
    be assumed to have handled that event, and no other handlers or
    built-in behavior will be activated for it. These are registered
    on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
    for `scroll` handlers, which will be called any time the
    editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
    its parent nodes is scrolled.
    */
  }, {
    key: "domEventHandlers",
    value: function domEventHandlers(handlers) {
      return ViewPlugin.define(function () {
        return {};
      }, {
        eventHandlers: handlers
      });
    }
    /**
    Create a theme extension. The first argument can be a
    [`style-mod`](https://github.com/marijnh/style-mod#documentation)
    style spec providing the styles for the theme. These will be
    prefixed with a generated class for the style.
    
    Because the selectors will be prefixed with a scope class, rule
    that directly match the editor's [wrapper
    element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
    added—need to be explicitly differentiated by adding an `&` to
    the selector for that element—for example
    `&.cm-focused`.
    
    When `dark` is set to true, the theme will be marked as dark,
    which will cause the `&dark` rules from [base
    themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
    `&light` when a light theme is active).
    */
  }, {
    key: "theme",
    value: function theme(spec, options) {
      var prefix = StyleModule.newName();
      var result = [_theme.of(prefix), styleModule.of(buildTheme(".".concat(prefix), spec))];
      if (options && options.dark) result.push(darkTheme.of(true));
      return result;
    }
    /**
    Create an extension that adds styles to the base theme. Like
    with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
    place of the editor wrapper element when directly targeting
    that. You can also use `&dark` or `&light` instead to only
    target editors with a dark or light theme.
    */
  }, {
    key: "baseTheme",
    value: function baseTheme(spec) {
      return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
    }
    /**
    Retrieve an editor view instance from the view's DOM
    representation.
    */
  }, {
    key: "findFromDOM",
    value: function findFromDOM(dom) {
      var _a;
      var content = dom.querySelector(".cm-content");
      var cView = content && ContentView.get(content) || ContentView.get(dom);
      return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;
    }
  }]);
  return EditorView;
}();
/**
Facet to add a [style
module](https://github.com/marijnh/style-mod#documentation) to
an editor view. The view will ensure that the module is
mounted in its [document
root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
*/
EditorView.styleModule = styleModule;
/**
An input handler can override the way changes to the editable
DOM content are handled. Handlers are passed the document
positions between which the change was found, and the new
content. When one returns true, no further input handlers are
called and the default behavior is prevented.
*/
EditorView.inputHandler = inputHandler$1;
/**
This facet can be used to provide functions that create effects
to be dispatched when the editor's focus state changes.
*/
EditorView.focusChangeEffect = focusChangeEffect;
/**
By default, the editor assumes all its content has the same
[text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`
value to make it read the text direction of every (rendered)
line separately.
*/
EditorView.perLineTextDirection = perLineTextDirection;
/**
Allows you to provide a function that should be called when the
library catches an exception from an extension (mostly from view
plugins, but may be used by other extensions to route exceptions
from user-code-provided callbacks). This is mostly useful for
debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
*/
EditorView.exceptionSink = exceptionSink;
/**
A facet that can be used to register a function to be called
every time the view updates.
*/
EditorView.updateListener = updateListener;
/**
Facet that controls whether the editor content DOM is editable.
When its highest-precedence value is `false`, the element will
not have its `contenteditable` attribute set. (Note that this
doesn't affect API calls that change the editor content, even
when those are bound to keys or buttons. See the
[`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
*/
EditorView.editable = editable;
/**
Allows you to influence the way mouse selection happens. The
functions in this facet will be called for a `mousedown` event
on the editor, and can return an object that overrides the way a
selection is computed from that mouse click or drag.
*/
EditorView.mouseSelectionStyle = mouseSelectionStyle;
/**
Facet used to configure whether a given selection drag event
should move or copy the selection. The given predicate will be
called with the `mousedown` event, and can return `true` when
the drag should move the content.
*/
EditorView.dragMovesSelection = dragMovesSelection$1;
/**
Facet used to configure whether a given selecting click adds a
new range to the existing selection or replaces it entirely. The
default behavior is to check `event.metaKey` on macOS, and
`event.ctrlKey` elsewhere.
*/
EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
/**
A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
are shown in the view. Decorations can be provided in two
ways—directly, or via a function that takes an editor view.

Only decoration sets provided directly are allowed to influence
the editor's vertical layout structure. The ones provided as
functions are called _after_ the new viewport has been computed,
and thus **must not** introduce block widgets or replacing
decorations that cover line breaks.

If you want decorated ranges to behave like atomic units for
cursor motion and deletion purposes, also provide the range set
containing the decorations to
[`EditorView.atomicRanges`](https://codemirror.net/6/docs/ref/#view.EditorView^atomicRanges).
*/
EditorView.decorations = decorations;
/**
Used to provide ranges that should be treated as atoms as far as
cursor motion is concerned. This causes methods like
[`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
[`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
commands built on top of them) to skip across such regions when
a selection endpoint would enter them. This does _not_ prevent
direct programmatic [selection
updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
regions.
*/
EditorView.atomicRanges = atomicRanges;
/**
Facet that allows extensions to provide additional scroll
margins (space around the sides of the scrolling element that
should be considered invisible). This can be useful when the
plugin introduces elements that cover part of that element (for
example a horizontally fixed gutter).
*/
EditorView.scrollMargins = scrollMargins;
/**
This facet records whether a dark theme is active. The extension
returned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically
includes an instance of this when the `dark` option is set to
true.
*/
EditorView.darkTheme = darkTheme;
/**
Facet that provides additional DOM attributes for the editor's
editable DOM element.
*/
EditorView.contentAttributes = contentAttributes;
/**
Facet that provides DOM attributes for the editor's outer
element.
*/
EditorView.editorAttributes = editorAttributes;
/**
An extension that enables line wrapping in the editor (by
setting CSS `white-space` to `pre-wrap` in the content).
*/
EditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({
  "class": "cm-lineWrapping"
});
/**
State effect used to include screen reader announcements in a
transaction. These will be added to the DOM in a visually hidden
element with `aria-live="polite"` set, and should be used to
describe effects that are visually obvious but may not be
noticed by screen reader users (such as moving to the next
search match).
*/
EditorView.announce = /*@__PURE__*/StateEffect.define();
// Maximum line length for which we compute accurate bidi info
var MaxBidiLine = 4096;
var BadMeasure = {};
var CachedOrder = /*#__PURE__*/function () {
  function CachedOrder(from, to, dir, order) {
    _classCallCheck(this, CachedOrder);
    this.from = from;
    this.to = to;
    this.dir = dir;
    this.order = order;
  }
  _createClass(CachedOrder, null, [{
    key: "update",
    value: function update(cache, changes) {
      if (changes.empty) return cache;
      var result = [],
        lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
      for (var i = Math.max(0, cache.length - 10); i < cache.length; i++) {
        var entry = cache[i];
        if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to)) result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));
      }
      return result;
    }
  }]);
  return CachedOrder;
}();
function attrsFromFacet(view, facet, base) {
  for (var sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
    var source = sources[i],
      value = typeof source == "function" ? source(view) : source;
    if (value) combineAttrs(value, base);
  }
  return base;
}
var currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
function normalizeKeyName(name, platform) {
  var parts = name.split(/-(?!$)/);
  var result = parts[parts.length - 1];
  if (result == "Space") result = " ";
  var alt, ctrl, shift, meta;
  for (var i = 0; i < parts.length - 1; ++i) {
    var mod = parts[i];
    if (/^(cmd|meta|m)$/i.test(mod)) meta = true;else if (/^a(lt)?$/i.test(mod)) alt = true;else if (/^(c|ctrl|control)$/i.test(mod)) ctrl = true;else if (/^s(hift)?$/i.test(mod)) shift = true;else if (/^mod$/i.test(mod)) {
      if (platform == "mac") meta = true;else ctrl = true;
    } else throw new Error("Unrecognized modifier name: " + mod);
  }
  if (alt) result = "Alt-" + result;
  if (ctrl) result = "Ctrl-" + result;
  if (meta) result = "Meta-" + result;
  if (shift) result = "Shift-" + result;
  return result;
}
function modifiers(name, event, shift) {
  if (event.altKey) name = "Alt-" + name;
  if (event.ctrlKey) name = "Ctrl-" + name;
  if (event.metaKey) name = "Meta-" + name;
  if (shift !== false && event.shiftKey) name = "Shift-" + name;
  return name;
}
var handleKeyEvents = /*@__PURE__*/Prec["default"]( /*@__PURE__*/EditorView.domEventHandlers({
  keydown: function keydown(event, view) {
    return runHandlers(getKeymap(view.state), event, view, "editor");
  }
}));
/**
Facet used for registering keymaps.

You can add multiple keymaps to an editor. Their priorities
determine their precedence (the ones specified early or with high
priority get checked first). When a handler has returned `true`
for a given key, no further handlers are called.
*/
var keymap = /*@__PURE__*/Facet.define({
  enables: handleKeyEvents
});
var Keymaps = /*@__PURE__*/new WeakMap();
// This is hidden behind an indirection, rather than directly computed
// by the facet, to keep internal types out of the facet's type.
function getKeymap(state) {
  var bindings = state.facet(keymap);
  var map = Keymaps.get(bindings);
  if (!map) Keymaps.set(bindings, map = buildKeymap(bindings.reduce(function (a, b) {
    return a.concat(b);
  }, [])));
  return map;
}
/**
Run the key handlers registered for a given scope. The event
object should be a `"keydown"` event. Returns true if any of the
handlers handled it.
*/
function runScopeHandlers(view, event, scope) {
  return runHandlers(getKeymap(view.state), event, view, scope);
}
var storedPrefix = null;
var PrefixTimeout = 4000;
function buildKeymap(bindings) {
  var platform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : currentPlatform;
  var bound = Object.create(null);
  var isPrefix = Object.create(null);
  var checkPrefix = function checkPrefix(name, is) {
    var current = isPrefix[name];
    if (current == null) isPrefix[name] = is;else if (current != is) throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
  };
  var add = function add(scope, key, command, preventDefault) {
    var _a, _b;
    var scopeObj = bound[scope] || (bound[scope] = Object.create(null));
    var parts = key.split(/ (?!$)/).map(function (k) {
      return normalizeKeyName(k, platform);
    });
    var _loop6 = function _loop6() {
      var prefix = parts.slice(0, i).join(" ");
      checkPrefix(prefix, true);
      if (!scopeObj[prefix]) scopeObj[prefix] = {
        preventDefault: true,
        run: [function (view) {
          var ourObj = storedPrefix = {
            view: view,
            prefix: prefix,
            scope: scope
          };
          setTimeout(function () {
            if (storedPrefix == ourObj) storedPrefix = null;
          }, PrefixTimeout);
          return true;
        }]
      };
    };
    for (var i = 1; i < parts.length; i++) {
      _loop6();
    }
    var full = parts.join(" ");
    checkPrefix(full, false);
    var binding = scopeObj[full] || (scopeObj[full] = {
      preventDefault: false,
      run: ((_b = (_a = scopeObj._any) === null || _a === void 0 ? void 0 : _a.run) === null || _b === void 0 ? void 0 : _b.slice()) || []
    });
    if (command) binding.run.push(command);
    if (preventDefault) binding.preventDefault = true;
  };
  var _iterator56 = _createForOfIteratorHelper(bindings),
    _step56;
  try {
    for (_iterator56.s(); !(_step56 = _iterator56.n()).done;) {
      var b = _step56.value;
      var scopes = b.scope ? b.scope.split(" ") : ["editor"];
      if (b.any) {
        var _iterator57 = _createForOfIteratorHelper(scopes),
          _step57;
        try {
          for (_iterator57.s(); !(_step57 = _iterator57.n()).done;) {
            var scope = _step57.value;
            var scopeObj = bound[scope] || (bound[scope] = Object.create(null));
            if (!scopeObj._any) scopeObj._any = {
              preventDefault: false,
              run: []
            };
            for (var key in scopeObj) scopeObj[key].run.push(b.any);
          }
        } catch (err) {
          _iterator57.e(err);
        } finally {
          _iterator57.f();
        }
      }
      var name = b[platform] || b.key;
      if (!name) continue;
      var _iterator58 = _createForOfIteratorHelper(scopes),
        _step58;
      try {
        for (_iterator58.s(); !(_step58 = _iterator58.n()).done;) {
          var _scope = _step58.value;
          add(_scope, name, b.run, b.preventDefault);
          if (b.shift) add(_scope, "Shift-" + name, b.shift, b.preventDefault);
        }
      } catch (err) {
        _iterator58.e(err);
      } finally {
        _iterator58.f();
      }
    }
  } catch (err) {
    _iterator56.e(err);
  } finally {
    _iterator56.f();
  }
  return bound;
}
function runHandlers(map, event, view, scope) {
  var name = keyName(event);
  var charCode = codePointAt(name, 0),
    isChar = codePointSize(charCode) == name.length && name != " ";
  var prefix = "",
    fallthrough = false;
  if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
    prefix = storedPrefix.prefix + " ";
    if (fallthrough = modifierCodes.indexOf(event.keyCode) < 0) storedPrefix = null;
  }
  var ran = new Set();
  var runFor = function runFor(binding) {
    if (binding) {
      var _iterator59 = _createForOfIteratorHelper(binding.run),
        _step59;
      try {
        for (_iterator59.s(); !(_step59 = _iterator59.n()).done;) {
          var cmd = _step59.value;
          if (!ran.has(cmd)) {
            ran.add(cmd);
            if (cmd(view, event)) return true;
          }
        }
      } catch (err) {
        _iterator59.e(err);
      } finally {
        _iterator59.f();
      }
      if (binding.preventDefault) fallthrough = true;
    }
    return false;
  };
  var scopeObj = map[scope],
    baseName,
    shiftName;
  if (scopeObj) {
    if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)])) return true;
    if (isChar && (event.altKey || event.metaKey || event.ctrlKey) &&
    // Ctrl-Alt may be used for AltGr on Windows
    !(browser.windows && event.ctrlKey && event.altKey) && (baseName = base[event.keyCode]) && baseName != name) {
      if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) return true;else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name && shiftName != baseName && runFor(scopeObj[prefix + modifiers(shiftName, event, false)])) return true;
    } else if (isChar && event.shiftKey) {
      if (runFor(scopeObj[prefix + modifiers(name, event, true)])) return true;
    }
    if (runFor(scopeObj._any)) return true;
  }
  return fallthrough;
}

/**
Implementation of [`LayerMarker`](https://codemirror.net/6/docs/ref/#view.LayerMarker) that creates
a rectangle at a given set of coordinates.
*/
var RectangleMarker = /*#__PURE__*/function () {
  /**
  Create a marker with the given class and dimensions. If `width`
  is null, the DOM element will get no width style.
  */
  function RectangleMarker(className, left, top, width, height) {
    _classCallCheck(this, RectangleMarker);
    this.className = className;
    this.left = left;
    this.top = top;
    this.width = width;
    this.height = height;
  }
  _createClass(RectangleMarker, [{
    key: "draw",
    value: function draw() {
      var elt = document.createElement("div");
      elt.className = this.className;
      this.adjust(elt);
      return elt;
    }
  }, {
    key: "update",
    value: function update(elt, prev) {
      if (prev.className != this.className) return false;
      this.adjust(elt);
      return true;
    }
  }, {
    key: "adjust",
    value: function adjust(elt) {
      elt.style.left = this.left + "px";
      elt.style.top = this.top + "px";
      if (this.width != null) elt.style.width = this.width + "px";
      elt.style.height = this.height + "px";
    }
  }, {
    key: "eq",
    value: function eq(p) {
      return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height && this.className == p.className;
    }
    /**
    Create a set of rectangles for the given selection range,
    assigning them theclass`className`. Will create a single
    rectangle for empty ranges, and a set of selection-style
    rectangles covering the range's content (in a bidi-aware
    way) for non-empty ones.
    */
  }], [{
    key: "forRange",
    value: function forRange(view, className, range) {
      if (range.empty) {
        var pos = view.coordsAtPos(range.head, range.assoc || 1);
        if (!pos) return [];
        var _base3 = getBase(view);
        return [new RectangleMarker(className, pos.left - _base3.left, pos.top - _base3.top, null, pos.bottom - pos.top)];
      } else {
        return rectanglesForRange(view, className, range);
      }
    }
  }]);
  return RectangleMarker;
}();
function getBase(view) {
  var rect = view.scrollDOM.getBoundingClientRect();
  var left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth;
  return {
    left: left - view.scrollDOM.scrollLeft,
    top: rect.top - view.scrollDOM.scrollTop
  };
}
function wrappedLine(view, pos, inside) {
  var range = EditorSelection.cursor(pos);
  return {
    from: Math.max(inside.from, view.moveToLineBoundary(range, false, true).from),
    to: Math.min(inside.to, view.moveToLineBoundary(range, true, true).from),
    type: BlockType.Text
  };
}
function rectanglesForRange(view, className, range) {
  if (range.to <= view.viewport.from || range.from >= view.viewport.to) return [];
  var from = Math.max(range.from, view.viewport.from),
    to = Math.min(range.to, view.viewport.to);
  var ltr = view.textDirection == Direction.LTR;
  var content = view.contentDOM,
    contentRect = content.getBoundingClientRect(),
    base = getBase(view);
  var lineElt = content.querySelector(".cm-line"),
    lineStyle = lineElt && window.getComputedStyle(lineElt);
  var leftSide = contentRect.left + (lineStyle ? parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent)) : 0);
  var rightSide = contentRect.right - (lineStyle ? parseInt(lineStyle.paddingRight) : 0);
  var startBlock = blockAt(view, from),
    endBlock = blockAt(view, to);
  var visualStart = startBlock.type == BlockType.Text ? startBlock : null;
  var visualEnd = endBlock.type == BlockType.Text ? endBlock : null;
  if (visualStart && (view.lineWrapping || startBlock.widgetLineBreaks)) visualStart = wrappedLine(view, from, visualStart);
  if (visualEnd && (view.lineWrapping || endBlock.widgetLineBreaks)) visualEnd = wrappedLine(view, to, visualEnd);
  if (visualStart && visualEnd && visualStart.from == visualEnd.from) {
    return pieces(drawForLine(range.from, range.to, visualStart));
  } else {
    var top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
    var bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
    var between = [];
    if ((visualStart || startBlock).to < (visualEnd || endBlock).from - (visualStart && visualEnd ? 1 : 0) || startBlock.widgetLineBreaks > 1 && top.bottom + view.defaultLineHeight / 2 < bottom.top) between.push(piece(leftSide, top.bottom, rightSide, bottom.top));else if (top.bottom < bottom.top && view.elementAtHeight((top.bottom + bottom.top) / 2).type == BlockType.Text) top.bottom = bottom.top = (top.bottom + bottom.top) / 2;
    return pieces(top).concat(between).concat(pieces(bottom));
  }
  function piece(left, top, right, bottom) {
    return new RectangleMarker(className, left - base.left, top - base.top - 0.01 /* Epsilon */, right - left, bottom - top + 0.01 /* Epsilon */);
  }

  function pieces(_ref10) {
    var top = _ref10.top,
      bottom = _ref10.bottom,
      horizontal = _ref10.horizontal;
    var pieces = [];
    for (var i = 0; i < horizontal.length; i += 2) pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));
    return pieces;
  }
  // Gets passed from/to in line-local positions
  function drawForLine(from, to, line) {
    var top = 1e9,
      bottom = -1e9,
      horizontal = [];
    function addSpan(from, fromOpen, to, toOpen, dir) {
      // Passing 2/-2 is a kludge to force the view to return
      // coordinates on the proper side of block widgets, since
      // normalizing the side there, though appropriate for most
      // coordsAtPos queries, would break selection drawing.
      var fromCoords = view.coordsAtPos(from, from == line.to ? -2 : 2);
      var toCoords = view.coordsAtPos(to, to == line.from ? 2 : -2);
      if (!fromCoords || !toCoords) return;
      top = Math.min(fromCoords.top, toCoords.top, top);
      bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
      if (dir == Direction.LTR) horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);else horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
    }
    var start = from !== null && from !== void 0 ? from : line.from,
      end = to !== null && to !== void 0 ? to : line.to;
    // Split the range by visible range and document line
    var _iterator60 = _createForOfIteratorHelper(view.visibleRanges),
      _step60;
    try {
      for (_iterator60.s(); !(_step60 = _iterator60.n()).done;) {
        var _r = _step60.value;
        if (_r.to > start && _r.from < end) {
          for (var pos = Math.max(_r.from, start), endPos = Math.min(_r.to, end);;) {
            var docLine = view.state.doc.lineAt(pos);
            var _iterator61 = _createForOfIteratorHelper(view.bidiSpans(docLine)),
              _step61;
            try {
              for (_iterator61.s(); !(_step61 = _iterator61.n()).done;) {
                var span = _step61.value;
                var spanFrom = span.from + docLine.from,
                  spanTo = span.to + docLine.from;
                if (spanFrom >= endPos) break;
                if (spanTo > pos) addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);
              }
            } catch (err) {
              _iterator61.e(err);
            } finally {
              _iterator61.f();
            }
            pos = docLine.to + 1;
            if (pos >= endPos) break;
          }
        }
      }
    } catch (err) {
      _iterator60.e(err);
    } finally {
      _iterator60.f();
    }
    if (horizontal.length == 0) addSpan(start, from == null, end, to == null, view.textDirection);
    return {
      top: top,
      bottom: bottom,
      horizontal: horizontal
    };
  }
  function drawForWidget(block, top) {
    var y = contentRect.top + (top ? block.top : block.bottom);
    return {
      top: y,
      bottom: y,
      horizontal: []
    };
  }
}
function sameMarker(a, b) {
  return a.constructor == b.constructor && a.eq(b);
}
var LayerView = /*#__PURE__*/function () {
  function LayerView(view, layer) {
    _classCallCheck(this, LayerView);
    this.view = view;
    this.layer = layer;
    this.drawn = [];
    this.measureReq = {
      read: this.measure.bind(this),
      write: this.draw.bind(this)
    };
    this.dom = view.scrollDOM.appendChild(document.createElement("div"));
    this.dom.classList.add("cm-layer");
    if (layer.above) this.dom.classList.add("cm-layer-above");
    if (layer["class"]) this.dom.classList.add(layer["class"]);
    this.dom.setAttribute("aria-hidden", "true");
    this.setOrder(view.state);
    view.requestMeasure(this.measureReq);
    if (layer.mount) layer.mount(this.dom, view);
  }
  _createClass(LayerView, [{
    key: "update",
    value: function update(_update6) {
      if (_update6.startState.facet(layerOrder) != _update6.state.facet(layerOrder)) this.setOrder(_update6.state);
      if (this.layer.update(_update6, this.dom) || _update6.geometryChanged) _update6.view.requestMeasure(this.measureReq);
    }
  }, {
    key: "setOrder",
    value: function setOrder(state) {
      var pos = 0,
        order = state.facet(layerOrder);
      while (pos < order.length && order[pos] != this.layer) pos++;
      this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - pos);
    }
  }, {
    key: "measure",
    value: function measure() {
      return this.layer.markers(this.view);
    }
  }, {
    key: "draw",
    value: function draw(markers) {
      var _this44 = this;
      if (markers.length != this.drawn.length || markers.some(function (p, i) {
        return !sameMarker(p, _this44.drawn[i]);
      })) {
        var old = this.dom.firstChild,
          oldI = 0;
        var _iterator62 = _createForOfIteratorHelper(markers),
          _step62;
        try {
          for (_iterator62.s(); !(_step62 = _iterator62.n()).done;) {
            var marker = _step62.value;
            if (marker.update && old && marker.constructor && this.drawn[oldI].constructor && marker.update(old, this.drawn[oldI])) {
              old = old.nextSibling;
              oldI++;
            } else {
              this.dom.insertBefore(marker.draw(), old);
            }
          }
        } catch (err) {
          _iterator62.e(err);
        } finally {
          _iterator62.f();
        }
        while (old) {
          var next = old.nextSibling;
          old.remove();
          old = next;
        }
        this.drawn = markers;
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.layer.destroy) this.layer.destroy(this.dom, this.view);
      this.dom.remove();
    }
  }]);
  return LayerView;
}();
var layerOrder = /*@__PURE__*/Facet.define();
/**
Define a layer.
*/
function layer(config) {
  return [ViewPlugin.define(function (v) {
    return new LayerView(v, config);
  }), layerOrder.of(config)];
}
var CanHidePrimary = !browser.ios; // FIXME test IE
var selectionConfig = /*@__PURE__*/Facet.define({
  combine: function combine(configs) {
    return combineConfig(configs, {
      cursorBlinkRate: 1200,
      drawRangeCursor: true
    }, {
      cursorBlinkRate: function cursorBlinkRate(a, b) {
        return Math.min(a, b);
      },
      drawRangeCursor: function drawRangeCursor(a, b) {
        return a || b;
      }
    });
  }
});
/**
Returns an extension that hides the browser's native selection and
cursor, replacing the selection with a background behind the text
(with the `cm-selectionBackground` class), and the
cursors with elements overlaid over the code (using
`cm-cursor-primary` and `cm-cursor-secondary`).

This allows the editor to display secondary selection ranges, and
tends to produce a type of selection more in line with that users
expect in a text editor (the native selection styling will often
leave gaps between lines and won't fill the horizontal space after
a line when the selection continues past it).

It does have a performance cost, in that it requires an extra DOM
layout cycle for many updates (the selection is drawn based on DOM
layout information that's only available after laying out the
content).
*/
function drawSelection() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return [selectionConfig.of(config), cursorLayer, selectionLayer, hideNativeSelection, nativeSelectionHidden.of(true)];
}
function configChanged(update) {
  return update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
}
var cursorLayer = /*@__PURE__*/layer({
  above: true,
  markers: function markers(view) {
    var state = view.state,
      conf = state.facet(selectionConfig);
    var cursors = [];
    var _iterator63 = _createForOfIteratorHelper(state.selection.ranges),
      _step63;
    try {
      for (_iterator63.s(); !(_step63 = _iterator63.n()).done;) {
        var _r2 = _step63.value;
        var prim = _r2 == state.selection.main;
        if (_r2.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {
          var className = prim ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary";
          var cursor = _r2.empty ? _r2 : EditorSelection.cursor(_r2.head, _r2.head > _r2.anchor ? -1 : 1);
          var _iterator64 = _createForOfIteratorHelper(RectangleMarker.forRange(view, className, cursor)),
            _step64;
          try {
            for (_iterator64.s(); !(_step64 = _iterator64.n()).done;) {
              var piece = _step64.value;
              cursors.push(piece);
            }
          } catch (err) {
            _iterator64.e(err);
          } finally {
            _iterator64.f();
          }
        }
      }
    } catch (err) {
      _iterator63.e(err);
    } finally {
      _iterator63.f();
    }
    return cursors;
  },
  update: function update(_update7, dom) {
    if (_update7.transactions.some(function (tr) {
      return tr.selection;
    })) dom.style.animationName = dom.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
    var confChange = configChanged(_update7);
    if (confChange) setBlinkRate(_update7.state, dom);
    return _update7.docChanged || _update7.selectionSet || confChange;
  },
  mount: function mount(dom, view) {
    setBlinkRate(view.state, dom);
  },
  "class": "cm-cursorLayer"
});
function setBlinkRate(state, dom) {
  dom.style.animationDuration = state.facet(selectionConfig).cursorBlinkRate + "ms";
}
var selectionLayer = /*@__PURE__*/layer({
  above: false,
  markers: function markers(view) {
    return view.state.selection.ranges.map(function (r) {
      return r.empty ? [] : RectangleMarker.forRange(view, "cm-selectionBackground", r);
    }).reduce(function (a, b) {
      return a.concat(b);
    });
  },
  update: function update(_update8, dom) {
    return _update8.docChanged || _update8.selectionSet || _update8.viewportChanged || configChanged(_update8);
  },
  "class": "cm-selectionLayer"
});
var themeSpec = {
  ".cm-line": {
    "& ::selection": {
      backgroundColor: "transparent !important"
    },
    "&::selection": {
      backgroundColor: "transparent !important"
    }
  }
};
if (CanHidePrimary) themeSpec[".cm-line"].caretColor = "transparent !important";
var hideNativeSelection = /*@__PURE__*/Prec.highest( /*@__PURE__*/EditorView.theme(themeSpec));
var setDropCursorPos = /*@__PURE__*/StateEffect.define({
  map: function map(pos, mapping) {
    return pos == null ? null : mapping.mapPos(pos);
  }
});
var dropCursorPos = /*@__PURE__*/StateField.define({
  create: function create() {
    return null;
  },
  update: function update(pos, tr) {
    if (pos != null) pos = tr.changes.mapPos(pos);
    return tr.effects.reduce(function (pos, e) {
      return e.is(setDropCursorPos) ? e.value : pos;
    }, pos);
  }
});
var drawDropCursor = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class(view) {
    _classCallCheck(this, _class);
    this.view = view;
    this.cursor = null;
    this.measureReq = {
      read: this.readPos.bind(this),
      write: this.drawCursor.bind(this)
    };
  }
  _createClass(_class, [{
    key: "update",
    value: function update(_update9) {
      var _a;
      var cursorPos = _update9.state.field(dropCursorPos);
      if (cursorPos == null) {
        if (this.cursor != null) {
          (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.remove();
          this.cursor = null;
        }
      } else {
        if (!this.cursor) {
          this.cursor = this.view.scrollDOM.appendChild(document.createElement("div"));
          this.cursor.className = "cm-dropCursor";
        }
        if (_update9.startState.field(dropCursorPos) != cursorPos || _update9.docChanged || _update9.geometryChanged) this.view.requestMeasure(this.measureReq);
      }
    }
  }, {
    key: "readPos",
    value: function readPos() {
      var pos = this.view.state.field(dropCursorPos);
      var rect = pos != null && this.view.coordsAtPos(pos);
      if (!rect) return null;
      var outer = this.view.scrollDOM.getBoundingClientRect();
      return {
        left: rect.left - outer.left + this.view.scrollDOM.scrollLeft,
        top: rect.top - outer.top + this.view.scrollDOM.scrollTop,
        height: rect.bottom - rect.top
      };
    }
  }, {
    key: "drawCursor",
    value: function drawCursor(pos) {
      if (this.cursor) {
        if (pos) {
          this.cursor.style.left = pos.left + "px";
          this.cursor.style.top = pos.top + "px";
          this.cursor.style.height = pos.height + "px";
        } else {
          this.cursor.style.left = "-100000px";
        }
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.cursor) this.cursor.remove();
    }
  }, {
    key: "setDropPos",
    value: function setDropPos(pos) {
      if (this.view.state.field(dropCursorPos) != pos) this.view.dispatch({
        effects: setDropCursorPos.of(pos)
      });
    }
  }]);
  return _class;
}(), {
  eventHandlers: {
    dragover: function dragover(event) {
      this.setDropPos(this.view.posAtCoords({
        x: event.clientX,
        y: event.clientY
      }));
    },
    dragleave: function dragleave(event) {
      if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget)) this.setDropPos(null);
    },
    dragend: function dragend() {
      this.setDropPos(null);
    },
    drop: function drop() {
      this.setDropPos(null);
    }
  }
});
/**
Draws a cursor at the current drop position when something is
dragged over the editor.
*/
function dropCursor() {
  return [dropCursorPos, drawDropCursor];
}
function iterMatches(doc, re, from, to, f) {
  re.lastIndex = 0;
  for (var cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
    if (!cursor.lineBreak) while (m = re.exec(cursor.value)) f(pos + m.index, m);
  }
}
function matchRanges(view, maxLength) {
  var visible = view.visibleRanges;
  if (visible.length == 1 && visible[0].from == view.viewport.from && visible[0].to == view.viewport.to) return visible;
  var result = [];
  var _iterator65 = _createForOfIteratorHelper(visible),
    _step65;
  try {
    for (_iterator65.s(); !(_step65 = _iterator65.n()).done;) {
      var _step65$value = _step65.value,
        from = _step65$value.from,
        to = _step65$value.to;
      from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);
      to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);
      if (result.length && result[result.length - 1].to >= from) result[result.length - 1].to = to;else result.push({
        from: from,
        to: to
      });
    }
  } catch (err) {
    _iterator65.e(err);
  } finally {
    _iterator65.f();
  }
  return result;
}
/**
Helper class used to make it easier to maintain decorations on
visible code that matches a given regular expression. To be used
in a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin). Instances of this object
represent a matching configuration.
*/
var MatchDecorator = /*#__PURE__*/function () {
  /**
  Create a decorator.
  */
  function MatchDecorator(config) {
    _classCallCheck(this, MatchDecorator);
    var regexp = config.regexp,
      decoration = config.decoration,
      decorate = config.decorate,
      boundary = config.boundary,
      _config$maxLength = config.maxLength,
      maxLength = _config$maxLength === void 0 ? 1000 : _config$maxLength;
    if (!regexp.global) throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
    this.regexp = regexp;
    if (decorate) {
      this.addMatch = function (match, view, from, add) {
        return decorate(add, from, from + match[0].length, match, view);
      };
    } else if (typeof decoration == "function") {
      this.addMatch = function (match, view, from, add) {
        var deco = decoration(match, view, from);
        if (deco) add(from, from + match[0].length, deco);
      };
    } else if (decoration) {
      this.addMatch = function (match, _view, from, add) {
        return add(from, from + match[0].length, decoration);
      };
    } else {
      throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
    }
    this.boundary = boundary;
    this.maxLength = maxLength;
  }
  /**
  Compute the full set of decorations for matches in the given
  view's viewport. You'll want to call this when initializing your
  plugin.
  */
  _createClass(MatchDecorator, [{
    key: "createDeco",
    value: function createDeco(view) {
      var _this45 = this;
      var build = new RangeSetBuilder(),
        add = build.add.bind(build);
      var _iterator66 = _createForOfIteratorHelper(matchRanges(view, this.maxLength)),
        _step66;
      try {
        for (_iterator66.s(); !(_step66 = _iterator66.n()).done;) {
          var _step66$value = _step66.value,
            from = _step66$value.from,
            to = _step66$value.to;
          iterMatches(view.state.doc, this.regexp, from, to, function (from, m) {
            return _this45.addMatch(m, view, from, add);
          });
        }
      } catch (err) {
        _iterator66.e(err);
      } finally {
        _iterator66.f();
      }
      return build.finish();
    }
    /**
    Update a set of decorations for a view update. `deco` _must_ be
    the set of decorations produced by _this_ `MatchDecorator` for
    the view state before the update.
    */
  }, {
    key: "updateDeco",
    value: function updateDeco(update, deco) {
      var changeFrom = 1e9,
        changeTo = -1;
      if (update.docChanged) update.changes.iterChanges(function (_f, _t, from, to) {
        if (to > update.view.viewport.from && from < update.view.viewport.to) {
          changeFrom = Math.min(from, changeFrom);
          changeTo = Math.max(to, changeTo);
        }
      });
      if (update.viewportChanged || changeTo - changeFrom > 1000) return this.createDeco(update.view);
      if (changeTo > -1) return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
      return deco;
    }
  }, {
    key: "updateRange",
    value: function updateRange(view, deco, updateFrom, updateTo) {
      var _this46 = this;
      var _iterator67 = _createForOfIteratorHelper(view.visibleRanges),
        _step67;
      try {
        var _loop7 = function _loop7() {
          var r = _step67.value;
          var from = Math.max(r.from, updateFrom),
            to = Math.min(r.to, updateTo);
          if (to > from) {
            var fromLine = view.state.doc.lineAt(from),
              toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
            var start = Math.max(r.from, fromLine.from),
              end = Math.min(r.to, toLine.to);
            if (_this46.boundary) {
              for (; from > fromLine.from; from--) if (_this46.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
                start = from;
                break;
              }
              for (; to < toLine.to; to++) if (_this46.boundary.test(toLine.text[to - toLine.from])) {
                end = to;
                break;
              }
            }
            var ranges = [],
              m;
            var add = function add(from, to, deco) {
              return ranges.push(deco.range(from, to));
            };
            if (fromLine == toLine) {
              _this46.regexp.lastIndex = start - fromLine.from;
              while ((m = _this46.regexp.exec(fromLine.text)) && m.index < end - fromLine.from) _this46.addMatch(m, view, m.index + fromLine.from, add);
            } else {
              iterMatches(view.state.doc, _this46.regexp, start, end, function (from, m) {
                return _this46.addMatch(m, view, from, add);
              });
            }
            deco = deco.update({
              filterFrom: start,
              filterTo: end,
              filter: function filter(from, to) {
                return from < start || to > end;
              },
              add: ranges
            });
          }
        };
        for (_iterator67.s(); !(_step67 = _iterator67.n()).done;) {
          _loop7();
        }
      } catch (err) {
        _iterator67.e(err);
      } finally {
        _iterator67.f();
      }
      return deco;
    }
  }]);
  return MatchDecorator;
}();
var UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
var Specials = /*@__PURE__*/new RegExp("[\0-\b\n-\x1F\x7F-\x9F\xAD\u061C\u200B\u200E\u200F\u2028\u2029\u202D\u202E\u2066\u2067\u2069\uFEFF\uFFF9-\uFFFC]", UnicodeRegexpSupport);
var Names = {
  0: "null",
  7: "bell",
  8: "backspace",
  10: "newline",
  11: "vertical tab",
  13: "carriage return",
  27: "escape",
  8203: "zero width space",
  8204: "zero width non-joiner",
  8205: "zero width joiner",
  8206: "left-to-right mark",
  8207: "right-to-left mark",
  8232: "line separator",
  8237: "left-to-right override",
  8238: "right-to-left override",
  8294: "left-to-right isolate",
  8295: "right-to-left isolate",
  8297: "pop directional isolate",
  8233: "paragraph separator",
  65279: "zero width no-break space",
  65532: "object replacement"
};
var _supportsTabSize = null;
function supportsTabSize() {
  var _a;
  if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
    var styles = document.body.style;
    _supportsTabSize = ((_a = styles.tabSize) !== null && _a !== void 0 ? _a : styles.MozTabSize) != null;
  }
  return _supportsTabSize || false;
}
var specialCharConfig = /*@__PURE__*/Facet.define({
  combine: function combine(configs) {
    var config = combineConfig(configs, {
      render: null,
      specialChars: Specials,
      addSpecialChars: null
    });
    if (config.replaceTabs = !supportsTabSize()) config.specialChars = new RegExp("\t|" + config.specialChars.source, UnicodeRegexpSupport);
    if (config.addSpecialChars) config.specialChars = new RegExp(config.specialChars.source + "|" + config.addSpecialChars.source, UnicodeRegexpSupport);
    return config;
  }
});
/**
Returns an extension that installs highlighting of special
characters.
*/
function highlightSpecialChars() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return [specialCharConfig.of(config), specialCharPlugin()];
}
var _plugin = null;
function specialCharPlugin() {
  return _plugin || (_plugin = ViewPlugin.fromClass( /*#__PURE__*/function () {
    function _class2(view) {
      _classCallCheck(this, _class2);
      this.view = view;
      this.decorations = Decoration.none;
      this.decorationCache = Object.create(null);
      this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
      this.decorations = this.decorator.createDeco(view);
    }
    _createClass(_class2, [{
      key: "makeDecorator",
      value: function makeDecorator(conf) {
        var _this47 = this;
        return new MatchDecorator({
          regexp: conf.specialChars,
          decoration: function decoration(m, view, pos) {
            var doc = view.state.doc;
            var code = codePointAt(m[0], 0);
            if (code == 9) {
              var line = doc.lineAt(pos);
              var size = view.state.tabSize,
                col = countColumn(line.text, size, pos - line.from);
              return Decoration.replace({
                widget: new TabWidget((size - col % size) * _this47.view.defaultCharacterWidth)
              });
            }
            return _this47.decorationCache[code] || (_this47.decorationCache[code] = Decoration.replace({
              widget: new SpecialCharWidget(conf, code)
            }));
          },
          boundary: conf.replaceTabs ? undefined : /[^]/
        });
      }
    }, {
      key: "update",
      value: function update(_update10) {
        var conf = _update10.state.facet(specialCharConfig);
        if (_update10.startState.facet(specialCharConfig) != conf) {
          this.decorator = this.makeDecorator(conf);
          this.decorations = this.decorator.createDeco(_update10.view);
        } else {
          this.decorations = this.decorator.updateDeco(_update10, this.decorations);
        }
      }
    }]);
    return _class2;
  }(), {
    decorations: function decorations(v) {
      return v.decorations;
    }
  }));
}
var DefaultPlaceholder = "\u2022";
// Assigns placeholder characters from the Control Pictures block to
// ASCII control characters
function placeholder$1(code) {
  if (code >= 32) return DefaultPlaceholder;
  if (code == 10) return "\u2424";
  return String.fromCharCode(9216 + code);
}
var SpecialCharWidget = /*#__PURE__*/function (_WidgetType5) {
  _inherits(SpecialCharWidget, _WidgetType5);
  var _super21 = _createSuper(SpecialCharWidget);
  function SpecialCharWidget(options, code) {
    var _this48;
    _classCallCheck(this, SpecialCharWidget);
    _this48 = _super21.call(this);
    _this48.options = options;
    _this48.code = code;
    return _this48;
  }
  _createClass(SpecialCharWidget, [{
    key: "eq",
    value: function eq(other) {
      return other.code == this.code;
    }
  }, {
    key: "toDOM",
    value: function toDOM(view) {
      var ph = placeholder$1(this.code);
      var desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
      var custom = this.options.render && this.options.render(this.code, desc, ph);
      if (custom) return custom;
      var span = document.createElement("span");
      span.textContent = ph;
      span.title = desc;
      span.setAttribute("aria-label", desc);
      span.className = "cm-specialChar";
      return span;
    }
  }, {
    key: "ignoreEvent",
    value: function ignoreEvent() {
      return false;
    }
  }]);
  return SpecialCharWidget;
}(WidgetType);
var TabWidget = /*#__PURE__*/function (_WidgetType6) {
  _inherits(TabWidget, _WidgetType6);
  var _super22 = _createSuper(TabWidget);
  function TabWidget(width) {
    var _this49;
    _classCallCheck(this, TabWidget);
    _this49 = _super22.call(this);
    _this49.width = width;
    return _this49;
  }
  _createClass(TabWidget, [{
    key: "eq",
    value: function eq(other) {
      return other.width == this.width;
    }
  }, {
    key: "toDOM",
    value: function toDOM() {
      var span = document.createElement("span");
      span.textContent = "\t";
      span.className = "cm-tab";
      span.style.width = this.width + "px";
      return span;
    }
  }, {
    key: "ignoreEvent",
    value: function ignoreEvent() {
      return false;
    }
  }]);
  return TabWidget;
}(WidgetType);

/**
Mark lines that have a cursor on them with the `"cm-activeLine"`
DOM class.
*/
function highlightActiveLine() {
  return activeLineHighlighter;
}
var lineDeco = /*@__PURE__*/Decoration.line({
  "class": "cm-activeLine"
});
var activeLineHighlighter = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class4(view) {
    _classCallCheck(this, _class4);
    this.decorations = this.getDeco(view);
  }
  _createClass(_class4, [{
    key: "update",
    value: function update(_update12) {
      if (_update12.docChanged || _update12.selectionSet) this.decorations = this.getDeco(_update12.view);
    }
  }, {
    key: "getDeco",
    value: function getDeco(view) {
      var lastLineStart = -1,
        deco = [];
      var _iterator68 = _createForOfIteratorHelper(view.state.selection.ranges),
        _step68;
      try {
        for (_iterator68.s(); !(_step68 = _iterator68.n()).done;) {
          var _r3 = _step68.value;
          var line = view.lineBlockAt(_r3.head);
          if (line.from > lastLineStart) {
            deco.push(lineDeco.range(line.from));
            lastLineStart = line.from;
          }
        }
      } catch (err) {
        _iterator68.e(err);
      } finally {
        _iterator68.f();
      }
      return Decoration.set(deco);
    }
  }]);
  return _class4;
}(), {
  decorations: function decorations(v) {
    return v.decorations;
  }
});

// Don't compute precise column positions for line offsets above this
// (since it could get expensive). Assume offset==column for them.
var MaxOff = 2000;
function rectangleFor(state, a, b) {
  var startLine = Math.min(a.line, b.line),
    endLine = Math.max(a.line, b.line);
  var ranges = [];
  if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {
    var startOff = Math.min(a.off, b.off),
      endOff = Math.max(a.off, b.off);
    for (var i = startLine; i <= endLine; i++) {
      var line = state.doc.line(i);
      if (line.length <= endOff) ranges.push(EditorSelection.range(line.from + startOff, line.to + endOff));
    }
  } else {
    var startCol = Math.min(a.col, b.col),
      endCol = Math.max(a.col, b.col);
    for (var _i11 = startLine; _i11 <= endLine; _i11++) {
      var _line2 = state.doc.line(_i11);
      var start = findColumn(_line2.text, startCol, state.tabSize, true);
      if (start < 0) {
        ranges.push(EditorSelection.cursor(_line2.to));
      } else {
        var end = findColumn(_line2.text, endCol, state.tabSize);
        ranges.push(EditorSelection.range(_line2.from + start, _line2.from + end));
      }
    }
  }
  return ranges;
}
function absoluteColumn(view, x) {
  var ref = view.coordsAtPos(view.viewport.from);
  return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;
}
function getPos(view, event) {
  var offset = view.posAtCoords({
    x: event.clientX,
    y: event.clientY
  }, false);
  var line = view.state.doc.lineAt(offset),
    off = offset - line.from;
  var col = off > MaxOff ? -1 : off == line.length ? absoluteColumn(view, event.clientX) : countColumn(line.text, view.state.tabSize, offset - line.from);
  return {
    line: line.number,
    col: col,
    off: off
  };
}
function rectangleSelectionStyle(view, event) {
  var start = getPos(view, event),
    startSel = view.state.selection;
  if (!start) return null;
  return {
    update: function update(_update13) {
      if (_update13.docChanged) {
        var newStart = _update13.changes.mapPos(_update13.startState.doc.line(start.line).from);
        var newLine = _update13.state.doc.lineAt(newStart);
        start = {
          line: newLine.number,
          col: start.col,
          off: Math.min(start.off, newLine.length)
        };
        startSel = startSel.map(_update13.changes);
      }
    },
    get: function get(event, _extend, multiple) {
      var cur = getPos(view, event);
      if (!cur) return startSel;
      var ranges = rectangleFor(view.state, start, cur);
      if (!ranges.length) return startSel;
      if (multiple) return EditorSelection.create(ranges.concat(startSel.ranges));else return EditorSelection.create(ranges);
    }
  };
}
/**
Create an extension that enables rectangular selections. By
default, it will react to left mouse drag with the Alt key held
down. When such a selection occurs, the text within the rectangle
that was dragged over will be selected, as one selection
[range](https://codemirror.net/6/docs/ref/#state.SelectionRange) per line.
*/
function rectangularSelection(options) {
  var filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || function (e) {
    return e.altKey && e.button == 0;
  };
  return EditorView.mouseSelectionStyle.of(function (view, event) {
    return filter(event) ? rectangleSelectionStyle(view, event) : null;
  });
}
var keys = {
  Alt: [18, function (e) {
    return !!e.altKey;
  }],
  Control: [17, function (e) {
    return !!e.ctrlKey;
  }],
  Shift: [16, function (e) {
    return !!e.shiftKey;
  }],
  Meta: [91, function (e) {
    return !!e.metaKey;
  }]
};
var showCrosshair = {
  style: "cursor: crosshair"
};
/**
Returns an extension that turns the pointer cursor into a
crosshair when a given modifier key, defaulting to Alt, is held
down. Can serve as a visual hint that rectangular selection is
going to happen when paired with
[`rectangularSelection`](https://codemirror.net/6/docs/ref/#view.rectangularSelection).
*/
function crosshairCursor() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _keys = _slicedToArray(keys[options.key || "Alt"], 2),
    code = _keys[0],
    getter = _keys[1];
  var plugin = ViewPlugin.fromClass( /*#__PURE__*/function () {
    function _class6(view) {
      _classCallCheck(this, _class6);
      this.view = view;
      this.isDown = false;
    }
    _createClass(_class6, [{
      key: "set",
      value: function set(isDown) {
        if (this.isDown != isDown) {
          this.isDown = isDown;
          this.view.update([]);
        }
      }
    }]);
    return _class6;
  }(), {
    eventHandlers: {
      keydown: function keydown(e) {
        this.set(e.keyCode == code || getter(e));
      },
      keyup: function keyup(e) {
        if (e.keyCode == code || !getter(e)) this.set(false);
      },
      mousemove: function mousemove(e) {
        this.set(getter(e));
      }
    }
  });
  return [plugin, EditorView.contentAttributes.of(function (view) {
    var _a;
    return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.isDown) ? showCrosshair : null;
  })];
}
var Outside = "-10000px";
var TooltipViewManager = /*#__PURE__*/function () {
  function TooltipViewManager(view, facet, createTooltipView) {
    _classCallCheck(this, TooltipViewManager);
    this.facet = facet;
    this.createTooltipView = createTooltipView;
    this.input = view.state.facet(facet);
    this.tooltips = this.input.filter(function (t) {
      return t;
    });
    this.tooltipViews = this.tooltips.map(createTooltipView);
  }
  _createClass(TooltipViewManager, [{
    key: "update",
    value: function update(_update14) {
      var _a;
      var input = _update14.state.facet(this.facet);
      var tooltips = input.filter(function (x) {
        return x;
      });
      if (input === this.input) {
        var _iterator69 = _createForOfIteratorHelper(this.tooltipViews),
          _step69;
        try {
          for (_iterator69.s(); !(_step69 = _iterator69.n()).done;) {
            var t = _step69.value;
            if (t.update) t.update(_update14);
          }
        } catch (err) {
          _iterator69.e(err);
        } finally {
          _iterator69.f();
        }
        return false;
      }
      var tooltipViews = [];
      for (var i = 0; i < tooltips.length; i++) {
        var tip = tooltips[i],
          known = -1;
        if (!tip) continue;
        for (var _i12 = 0; _i12 < this.tooltips.length; _i12++) {
          var other = this.tooltips[_i12];
          if (other && other.create == tip.create) known = _i12;
        }
        if (known < 0) {
          tooltipViews[i] = this.createTooltipView(tip);
        } else {
          var tooltipView = tooltipViews[i] = this.tooltipViews[known];
          if (tooltipView.update) tooltipView.update(_update14);
        }
      }
      var _iterator70 = _createForOfIteratorHelper(this.tooltipViews),
        _step70;
      try {
        for (_iterator70.s(); !(_step70 = _iterator70.n()).done;) {
          var _t2 = _step70.value;
          if (tooltipViews.indexOf(_t2) < 0) {
            _t2.dom.remove();
            (_a = _t2.destroy) === null || _a === void 0 ? void 0 : _a.call(_t2);
          }
        }
      } catch (err) {
        _iterator70.e(err);
      } finally {
        _iterator70.f();
      }
      this.input = input;
      this.tooltips = tooltips;
      this.tooltipViews = tooltipViews;
      return true;
    }
  }]);
  return TooltipViewManager;
}();
function windowSpace(view) {
  var win = view.win;
  return {
    top: 0,
    left: 0,
    bottom: win.innerHeight,
    right: win.innerWidth
  };
}
var tooltipConfig = /*@__PURE__*/Facet.define({
  combine: function combine(values) {
    var _a, _b, _c;
    return {
      position: browser.ios ? "absolute" : ((_a = values.find(function (conf) {
        return conf.position;
      })) === null || _a === void 0 ? void 0 : _a.position) || "fixed",
      parent: ((_b = values.find(function (conf) {
        return conf.parent;
      })) === null || _b === void 0 ? void 0 : _b.parent) || null,
      tooltipSpace: ((_c = values.find(function (conf) {
        return conf.tooltipSpace;
      })) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace
    };
  }
});
var knownHeight = /*@__PURE__*/new WeakMap();
var tooltipPlugin = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class7(view) {
    var _this51 = this;
    _classCallCheck(this, _class7);
    this.view = view;
    this.inView = true;
    this.lastTransaction = 0;
    this.measureTimeout = -1;
    var config = view.state.facet(tooltipConfig);
    this.position = config.position;
    this.parent = config.parent;
    this.classes = view.themeClasses;
    this.createContainer();
    this.measureReq = {
      read: this.readMeasure.bind(this),
      write: this.writeMeasure.bind(this),
      key: this
    };
    this.manager = new TooltipViewManager(view, showTooltip, function (t) {
      return _this51.createTooltip(t);
    });
    this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver(function (entries) {
      if (Date.now() > _this51.lastTransaction - 50 && entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1) _this51.measureSoon();
    }, {
      threshold: [1]
    }) : null;
    this.observeIntersection();
    view.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
    this.maybeMeasure();
  }
  _createClass(_class7, [{
    key: "createContainer",
    value: function createContainer() {
      if (this.parent) {
        this.container = document.createElement("div");
        this.container.style.position = "relative";
        this.container.className = this.view.themeClasses;
        this.parent.appendChild(this.container);
      } else {
        this.container = this.view.dom;
      }
    }
  }, {
    key: "observeIntersection",
    value: function observeIntersection() {
      if (this.intersectionObserver) {
        this.intersectionObserver.disconnect();
        var _iterator71 = _createForOfIteratorHelper(this.manager.tooltipViews),
          _step71;
        try {
          for (_iterator71.s(); !(_step71 = _iterator71.n()).done;) {
            var tooltip = _step71.value;
            this.intersectionObserver.observe(tooltip.dom);
          }
        } catch (err) {
          _iterator71.e(err);
        } finally {
          _iterator71.f();
        }
      }
    }
  }, {
    key: "measureSoon",
    value: function measureSoon() {
      var _this52 = this;
      if (this.measureTimeout < 0) this.measureTimeout = setTimeout(function () {
        _this52.measureTimeout = -1;
        _this52.maybeMeasure();
      }, 50);
    }
  }, {
    key: "update",
    value: function update(_update15) {
      if (_update15.transactions.length) this.lastTransaction = Date.now();
      var updated = this.manager.update(_update15);
      if (updated) this.observeIntersection();
      var shouldMeasure = updated || _update15.geometryChanged;
      var newConfig = _update15.state.facet(tooltipConfig);
      if (newConfig.position != this.position) {
        this.position = newConfig.position;
        var _iterator72 = _createForOfIteratorHelper(this.manager.tooltipViews),
          _step72;
        try {
          for (_iterator72.s(); !(_step72 = _iterator72.n()).done;) {
            var t = _step72.value;
            t.dom.style.position = this.position;
          }
        } catch (err) {
          _iterator72.e(err);
        } finally {
          _iterator72.f();
        }
        shouldMeasure = true;
      }
      if (newConfig.parent != this.parent) {
        if (this.parent) this.container.remove();
        this.parent = newConfig.parent;
        this.createContainer();
        var _iterator73 = _createForOfIteratorHelper(this.manager.tooltipViews),
          _step73;
        try {
          for (_iterator73.s(); !(_step73 = _iterator73.n()).done;) {
            var _t3 = _step73.value;
            this.container.appendChild(_t3.dom);
          }
        } catch (err) {
          _iterator73.e(err);
        } finally {
          _iterator73.f();
        }
        shouldMeasure = true;
      } else if (this.parent && this.view.themeClasses != this.classes) {
        this.classes = this.container.className = this.view.themeClasses;
      }
      if (shouldMeasure) this.maybeMeasure();
    }
  }, {
    key: "createTooltip",
    value: function createTooltip(tooltip) {
      var tooltipView = tooltip.create(this.view);
      tooltipView.dom.classList.add("cm-tooltip");
      if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
        var arrow = document.createElement("div");
        arrow.className = "cm-tooltip-arrow";
        tooltipView.dom.appendChild(arrow);
      }
      tooltipView.dom.style.position = this.position;
      tooltipView.dom.style.top = Outside;
      this.container.appendChild(tooltipView.dom);
      if (tooltipView.mount) tooltipView.mount(this.view);
      return tooltipView;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _a, _b;
      this.view.win.removeEventListener("resize", this.measureSoon);
      var _iterator74 = _createForOfIteratorHelper(this.manager.tooltipViews),
        _step74;
      try {
        for (_iterator74.s(); !(_step74 = _iterator74.n()).done;) {
          var tooltipView = _step74.value;
          tooltipView.dom.remove();
          (_a = tooltipView.destroy) === null || _a === void 0 ? void 0 : _a.call(tooltipView);
        }
      } catch (err) {
        _iterator74.e(err);
      } finally {
        _iterator74.f();
      }
      (_b = this.intersectionObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
      clearTimeout(this.measureTimeout);
    }
  }, {
    key: "readMeasure",
    value: function readMeasure() {
      var _this53 = this;
      var editor = this.view.dom.getBoundingClientRect();
      return {
        editor: editor,
        parent: this.parent ? this.container.getBoundingClientRect() : editor,
        pos: this.manager.tooltips.map(function (t, i) {
          var tv = _this53.manager.tooltipViews[i];
          return tv.getCoords ? tv.getCoords(t.pos) : _this53.view.coordsAtPos(t.pos);
        }),
        size: this.manager.tooltipViews.map(function (_ref11) {
          var dom = _ref11.dom;
          return dom.getBoundingClientRect();
        }),
        space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view)
      };
    }
  }, {
    key: "writeMeasure",
    value: function writeMeasure(measured) {
      var _a;
      var editor = measured.editor,
        space = measured.space;
      var others = [];
      for (var i = 0; i < this.manager.tooltips.length; i++) {
        var tooltip = this.manager.tooltips[i],
          tView = this.manager.tooltipViews[i],
          dom = tView.dom;
        var pos = measured.pos[i],
          size = measured.size[i];
        // Hide tooltips that are outside of the editor.
        if (!pos || pos.bottom <= Math.max(editor.top, space.top) || pos.top >= Math.min(editor.bottom, space.bottom) || pos.right < Math.max(editor.left, space.left) - .1 || pos.left > Math.min(editor.right, space.right) + .1) {
          dom.style.top = Outside;
          continue;
        }
        var arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
        var arrowHeight = arrow ? 7 /* Size */ : 0;
        var width = size.right - size.left,
          height = (_a = knownHeight.get(tView)) !== null && _a !== void 0 ? _a : size.bottom - size.top;
        var offset = tView.offset || noOffset,
          ltr = this.view.textDirection == Direction.LTR;
        var left = size.width > space.right - space.left ? ltr ? space.left : space.right - size.width : ltr ? Math.min(pos.left - (arrow ? 14 /* Offset */ : 0) + offset.x, space.right - width) : Math.max(space.left, pos.left - width + (arrow ? 14 /* Offset */ : 0) - offset.x);
        var above = !!tooltip.above;
        if (!tooltip.strictSide && (above ? pos.top - (size.bottom - size.top) - offset.y < space.top : pos.bottom + (size.bottom - size.top) + offset.y > space.bottom) && above == space.bottom - pos.bottom > pos.top - space.top) above = !above;
        var spaceVert = (above ? pos.top - space.top : space.bottom - pos.bottom) - arrowHeight;
        if (spaceVert < height && tView.resize !== false) {
          if (spaceVert < this.view.defaultLineHeight) {
            dom.style.top = Outside;
            continue;
          }
          knownHeight.set(tView, height);
          dom.style.height = (height = spaceVert) + "px";
        } else if (dom.style.height) {
          dom.style.height = "";
        }
        var top = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
        var right = left + width;
        if (tView.overlap !== true) {
          var _iterator75 = _createForOfIteratorHelper(others),
            _step75;
          try {
            for (_iterator75.s(); !(_step75 = _iterator75.n()).done;) {
              var _r4 = _step75.value;
              if (_r4.left < right && _r4.right > left && _r4.top < top + height && _r4.bottom > top) top = above ? _r4.top - height - 2 - arrowHeight : _r4.bottom + arrowHeight + 2;
            }
          } catch (err) {
            _iterator75.e(err);
          } finally {
            _iterator75.f();
          }
        }
        if (this.position == "absolute") {
          dom.style.top = top - measured.parent.top + "px";
          dom.style.left = left - measured.parent.left + "px";
        } else {
          dom.style.top = top + "px";
          dom.style.left = left + "px";
        }
        if (arrow) arrow.style.left = "".concat(pos.left + (ltr ? offset.x : -offset.x) - (left + 14 /* Offset */ - 7 /* Size */), "px");
        if (tView.overlap !== true) others.push({
          left: left,
          top: top,
          right: right,
          bottom: top + height
        });
        dom.classList.toggle("cm-tooltip-above", above);
        dom.classList.toggle("cm-tooltip-below", !above);
        if (tView.positioned) tView.positioned(measured.space);
      }
    }
  }, {
    key: "maybeMeasure",
    value: function maybeMeasure() {
      if (this.manager.tooltips.length) {
        if (this.view.inView) this.view.requestMeasure(this.measureReq);
        if (this.inView != this.view.inView) {
          this.inView = this.view.inView;
          if (!this.inView) {
            var _iterator76 = _createForOfIteratorHelper(this.manager.tooltipViews),
              _step76;
            try {
              for (_iterator76.s(); !(_step76 = _iterator76.n()).done;) {
                var tv = _step76.value;
                tv.dom.style.top = Outside;
              }
            } catch (err) {
              _iterator76.e(err);
            } finally {
              _iterator76.f();
            }
          }
        }
      }
    }
  }]);
  return _class7;
}(), {
  eventHandlers: {
    scroll: function scroll() {
      this.maybeMeasure();
    }
  }
});
var baseTheme$4 = /*@__PURE__*/EditorView.baseTheme({
  ".cm-tooltip": {
    zIndex: 100,
    boxSizing: "border-box"
  },
  "&light .cm-tooltip": {
    border: "1px solid #bbb",
    backgroundColor: "#f5f5f5"
  },
  "&light .cm-tooltip-section:not(:first-child)": {
    borderTop: "1px solid #bbb"
  },
  "&dark .cm-tooltip": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tooltip-arrow": {
    height: "".concat(7 /* Size */, "px"),
    width: "".concat(7 /* Size */ * 2, "px"),
    position: "absolute",
    zIndex: -1,
    overflow: "hidden",
    "&:before, &:after": {
      content: "''",
      position: "absolute",
      width: 0,
      height: 0,
      borderLeft: "".concat(7 /* Size */, "px solid transparent"),
      borderRight: "".concat(7 /* Size */, "px solid transparent")
    },
    ".cm-tooltip-above &": {
      bottom: "-".concat(7 /* Size */, "px"),
      "&:before": {
        borderTop: "".concat(7 /* Size */, "px solid #bbb")
      },
      "&:after": {
        borderTop: "".concat(7 /* Size */, "px solid #f5f5f5"),
        bottom: "1px"
      }
    },
    ".cm-tooltip-below &": {
      top: "-".concat(7 /* Size */, "px"),
      "&:before": {
        borderBottom: "".concat(7 /* Size */, "px solid #bbb")
      },
      "&:after": {
        borderBottom: "".concat(7 /* Size */, "px solid #f5f5f5"),
        top: "1px"
      }
    }
  },
  "&dark .cm-tooltip .cm-tooltip-arrow": {
    "&:before": {
      borderTopColor: "#333338",
      borderBottomColor: "#333338"
    },
    "&:after": {
      borderTopColor: "transparent",
      borderBottomColor: "transparent"
    }
  }
});
var noOffset = {
  x: 0,
  y: 0
};
/**
Facet to which an extension can add a value to show a tooltip.
*/
var showTooltip = /*@__PURE__*/Facet.define({
  enables: [tooltipPlugin, baseTheme$4]
});
var showHoverTooltip = /*@__PURE__*/Facet.define();
var HoverTooltipHost = /*#__PURE__*/function () {
  function HoverTooltipHost(view) {
    var _this54 = this;
    _classCallCheck(this, HoverTooltipHost);
    this.view = view;
    this.mounted = false;
    this.dom = document.createElement("div");
    this.dom.classList.add("cm-tooltip-hover");
    this.manager = new TooltipViewManager(view, showHoverTooltip, function (t) {
      return _this54.createHostedView(t);
    });
  }
  // Needs to be static so that host tooltip instances always match
  _createClass(HoverTooltipHost, [{
    key: "createHostedView",
    value: function createHostedView(tooltip) {
      var hostedView = tooltip.create(this.view);
      hostedView.dom.classList.add("cm-tooltip-section");
      this.dom.appendChild(hostedView.dom);
      if (this.mounted && hostedView.mount) hostedView.mount(this.view);
      return hostedView;
    }
  }, {
    key: "mount",
    value: function mount(view) {
      var _iterator77 = _createForOfIteratorHelper(this.manager.tooltipViews),
        _step77;
      try {
        for (_iterator77.s(); !(_step77 = _iterator77.n()).done;) {
          var hostedView = _step77.value;
          if (hostedView.mount) hostedView.mount(view);
        }
      } catch (err) {
        _iterator77.e(err);
      } finally {
        _iterator77.f();
      }
      this.mounted = true;
    }
  }, {
    key: "positioned",
    value: function positioned(space) {
      var _iterator78 = _createForOfIteratorHelper(this.manager.tooltipViews),
        _step78;
      try {
        for (_iterator78.s(); !(_step78 = _iterator78.n()).done;) {
          var hostedView = _step78.value;
          if (hostedView.positioned) hostedView.positioned(space);
        }
      } catch (err) {
        _iterator78.e(err);
      } finally {
        _iterator78.f();
      }
    }
  }, {
    key: "update",
    value: function update(_update16) {
      this.manager.update(_update16);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _a;
      var _iterator79 = _createForOfIteratorHelper(this.manager.tooltipViews),
        _step79;
      try {
        for (_iterator79.s(); !(_step79 = _iterator79.n()).done;) {
          var t = _step79.value;
          (_a = t.destroy) === null || _a === void 0 ? void 0 : _a.call(t);
        }
      } catch (err) {
        _iterator79.e(err);
      } finally {
        _iterator79.f();
      }
    }
  }], [{
    key: "create",
    value: function create(view) {
      return new HoverTooltipHost(view);
    }
  }]);
  return HoverTooltipHost;
}();
var showHoverTooltipHost = /*@__PURE__*/showTooltip.compute([showHoverTooltip], function (state) {
  var tooltips = state.facet(showHoverTooltip).filter(function (t) {
    return t;
  });
  if (tooltips.length === 0) return null;
  return {
    pos: Math.min.apply(Math, _toConsumableArray(tooltips.map(function (t) {
      return t.pos;
    }))),
    end: Math.max.apply(Math, _toConsumableArray(tooltips.filter(function (t) {
      return t.end != null;
    }).map(function (t) {
      return t.end;
    }))),
    create: HoverTooltipHost.create,
    above: tooltips[0].above,
    arrow: tooltips.some(function (t) {
      return t.arrow;
    })
  };
});
var HoverPlugin = /*#__PURE__*/function () {
  function HoverPlugin(view, source, field, setHover, hoverTime) {
    _classCallCheck(this, HoverPlugin);
    this.view = view;
    this.source = source;
    this.field = field;
    this.setHover = setHover;
    this.hoverTime = hoverTime;
    this.hoverTimeout = -1;
    this.restartTimeout = -1;
    this.pending = null;
    this.lastMove = {
      x: 0,
      y: 0,
      target: view.dom,
      time: 0
    };
    this.checkHover = this.checkHover.bind(this);
    view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
    view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
  }
  _createClass(HoverPlugin, [{
    key: "update",
    value: function update() {
      var _this55 = this;
      if (this.pending) {
        this.pending = null;
        clearTimeout(this.restartTimeout);
        this.restartTimeout = setTimeout(function () {
          return _this55.startHover();
        }, 20);
      }
    }
  }, {
    key: "active",
    get: function get() {
      return this.view.state.field(this.field);
    }
  }, {
    key: "checkHover",
    value: function checkHover() {
      this.hoverTimeout = -1;
      if (this.active) return;
      var hovered = Date.now() - this.lastMove.time;
      if (hovered < this.hoverTime) this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);else this.startHover();
    }
  }, {
    key: "startHover",
    value: function startHover() {
      var _this56 = this;
      clearTimeout(this.restartTimeout);
      var lastMove = this.lastMove;
      var pos = this.view.contentDOM.contains(lastMove.target) ? this.view.posAtCoords(lastMove) : null;
      if (pos == null) return;
      var posCoords = this.view.coordsAtPos(pos);
      if (posCoords == null || lastMove.y < posCoords.top || lastMove.y > posCoords.bottom || lastMove.x < posCoords.left - this.view.defaultCharacterWidth || lastMove.x > posCoords.right + this.view.defaultCharacterWidth) return;
      var bidi = this.view.bidiSpans(this.view.state.doc.lineAt(pos)).find(function (s) {
        return s.from <= pos && s.to >= pos;
      });
      var rtl = bidi && bidi.dir == Direction.RTL ? -1 : 1;
      var open = this.source(this.view, pos, lastMove.x < posCoords.left ? -rtl : rtl);
      if (open === null || open === void 0 ? void 0 : open.then) {
        var pending = this.pending = {
          pos: pos
        };
        open.then(function (result) {
          if (_this56.pending == pending) {
            _this56.pending = null;
            if (result) _this56.view.dispatch({
              effects: _this56.setHover.of(result)
            });
          }
        }, function (e) {
          return logException(_this56.view.state, e, "hover tooltip");
        });
      } else if (open) {
        this.view.dispatch({
          effects: this.setHover.of(open)
        });
      }
    }
  }, {
    key: "mousemove",
    value: function mousemove(event) {
      var _a;
      this.lastMove = {
        x: event.clientX,
        y: event.clientY,
        target: event.target,
        time: Date.now()
      };
      if (this.hoverTimeout < 0) this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);
      var tooltip = this.active;
      if (tooltip && !isInTooltip(this.lastMove.target) || this.pending) {
        var _ref12 = tooltip || this.pending,
          pos = _ref12.pos,
          end = (_a = tooltip === null || tooltip === void 0 ? void 0 : tooltip.end) !== null && _a !== void 0 ? _a : pos;
        if (pos == end ? this.view.posAtCoords(this.lastMove) != pos : !isOverRange(this.view, pos, end, event.clientX, event.clientY, 6 /* MaxDist */)) {
          this.view.dispatch({
            effects: this.setHover.of(null)
          });
          this.pending = null;
        }
      }
    }
  }, {
    key: "mouseleave",
    value: function mouseleave(e) {
      clearTimeout(this.hoverTimeout);
      this.hoverTimeout = -1;
      if (this.active && !isInTooltip(e.relatedTarget)) this.view.dispatch({
        effects: this.setHover.of(null)
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      clearTimeout(this.hoverTimeout);
      this.view.dom.removeEventListener("mouseleave", this.mouseleave);
      this.view.dom.removeEventListener("mousemove", this.mousemove);
    }
  }]);
  return HoverPlugin;
}();
function isInTooltip(elt) {
  for (var cur = elt; cur; cur = cur.parentNode) if (cur.nodeType == 1 && cur.classList.contains("cm-tooltip")) return true;
  return false;
}
function isOverRange(view, from, to, x, y, margin) {
  var range = document.createRange();
  var fromDOM = view.domAtPos(from),
    toDOM = view.domAtPos(to);
  range.setEnd(toDOM.node, toDOM.offset);
  range.setStart(fromDOM.node, fromDOM.offset);
  var rects = range.getClientRects();
  range.detach();
  for (var i = 0; i < rects.length; i++) {
    var rect = rects[i];
    var dist = Math.max(rect.top - y, y - rect.bottom, rect.left - x, x - rect.right);
    if (dist <= margin) return true;
  }
  return false;
}
/**
Set up a hover tooltip, which shows up when the pointer hovers
over ranges of text. The callback is called when the mouse hovers
over the document text. It should, if there is a tooltip
associated with position `pos`, return the tooltip description
(either directly or in a promise). The `side` argument indicates
on which side of the position the pointer is—it will be -1 if the
pointer is before the position, 1 if after the position.

Note that all hover tooltips are hosted within a single tooltip
container element. This allows multiple tooltips over the same
range to be "merged" together without overlapping.
*/
function hoverTooltip(source) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var setHover = StateEffect.define();
  var hoverState = StateField.define({
    create: function create() {
      return null;
    },
    update: function update(value, tr) {
      if (value && (options.hideOnChange && (tr.docChanged || tr.selection) || options.hideOn && options.hideOn(tr, value))) return null;
      if (value && tr.docChanged) {
        var newPos = tr.changes.mapPos(value.pos, -1, MapMode.TrackDel);
        if (newPos == null) return null;
        var copy = Object.assign(Object.create(null), value);
        copy.pos = newPos;
        if (value.end != null) copy.end = tr.changes.mapPos(value.end);
        value = copy;
      }
      var _iterator80 = _createForOfIteratorHelper(tr.effects),
        _step80;
      try {
        for (_iterator80.s(); !(_step80 = _iterator80.n()).done;) {
          var effect = _step80.value;
          if (effect.is(setHover)) value = effect.value;
          if (effect.is(closeHoverTooltipEffect)) value = null;
        }
      } catch (err) {
        _iterator80.e(err);
      } finally {
        _iterator80.f();
      }
      return value;
    },
    provide: function provide(f) {
      return showHoverTooltip.from(f);
    }
  });
  return [hoverState, ViewPlugin.define(function (view) {
    return new HoverPlugin(view, source, hoverState, setHover, options.hoverTime || 300 /* Time */);
  }), showHoverTooltipHost];
}
/**
Get the active tooltip view for a given tooltip, if available.
*/
function getTooltip(view, tooltip) {
  var plugin = view.plugin(tooltipPlugin);
  if (!plugin) return null;
  var found = plugin.manager.tooltips.indexOf(tooltip);
  return found < 0 ? null : plugin.manager.tooltipViews[found];
}
var closeHoverTooltipEffect = /*@__PURE__*/StateEffect.define();
var panelConfig = /*@__PURE__*/Facet.define({
  combine: function combine(configs) {
    var topContainer, bottomContainer;
    var _iterator81 = _createForOfIteratorHelper(configs),
      _step81;
    try {
      for (_iterator81.s(); !(_step81 = _iterator81.n()).done;) {
        var c = _step81.value;
        topContainer = topContainer || c.topContainer;
        bottomContainer = bottomContainer || c.bottomContainer;
      }
    } catch (err) {
      _iterator81.e(err);
    } finally {
      _iterator81.f();
    }
    return {
      topContainer: topContainer,
      bottomContainer: bottomContainer
    };
  }
});
/**
Get the active panel created by the given constructor, if any.
This can be useful when you need access to your panels' DOM
structure.
*/
function getPanel(view, panel) {
  var plugin = view.plugin(panelPlugin);
  var index = plugin ? plugin.specs.indexOf(panel) : -1;
  return index > -1 ? plugin.panels[index] : null;
}
var panelPlugin = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class8(view) {
    _classCallCheck(this, _class8);
    this.input = view.state.facet(showPanel);
    this.specs = this.input.filter(function (s) {
      return s;
    });
    this.panels = this.specs.map(function (spec) {
      return spec(view);
    });
    var conf = view.state.facet(panelConfig);
    this.top = new PanelGroup(view, true, conf.topContainer);
    this.bottom = new PanelGroup(view, false, conf.bottomContainer);
    this.top.sync(this.panels.filter(function (p) {
      return p.top;
    }));
    this.bottom.sync(this.panels.filter(function (p) {
      return !p.top;
    }));
    var _iterator82 = _createForOfIteratorHelper(this.panels),
      _step82;
    try {
      for (_iterator82.s(); !(_step82 = _iterator82.n()).done;) {
        var _p2 = _step82.value;
        _p2.dom.classList.add("cm-panel");
        if (_p2.mount) _p2.mount();
      }
    } catch (err) {
      _iterator82.e(err);
    } finally {
      _iterator82.f();
    }
  }
  _createClass(_class8, [{
    key: "update",
    value: function update(_update17) {
      var conf = _update17.state.facet(panelConfig);
      if (this.top.container != conf.topContainer) {
        this.top.sync([]);
        this.top = new PanelGroup(_update17.view, true, conf.topContainer);
      }
      if (this.bottom.container != conf.bottomContainer) {
        this.bottom.sync([]);
        this.bottom = new PanelGroup(_update17.view, false, conf.bottomContainer);
      }
      this.top.syncClasses();
      this.bottom.syncClasses();
      var input = _update17.state.facet(showPanel);
      if (input != this.input) {
        var specs = input.filter(function (x) {
          return x;
        });
        var _panels = [],
          top = [],
          bottom = [],
          mount = [];
        var _iterator83 = _createForOfIteratorHelper(specs),
          _step83;
        try {
          for (_iterator83.s(); !(_step83 = _iterator83.n()).done;) {
            var spec = _step83.value;
            var known = this.specs.indexOf(spec),
              panel = void 0;
            if (known < 0) {
              panel = spec(_update17.view);
              mount.push(panel);
            } else {
              panel = this.panels[known];
              if (panel.update) panel.update(_update17);
            }
            _panels.push(panel);
            (panel.top ? top : bottom).push(panel);
          }
        } catch (err) {
          _iterator83.e(err);
        } finally {
          _iterator83.f();
        }
        this.specs = specs;
        this.panels = _panels;
        this.top.sync(top);
        this.bottom.sync(bottom);
        for (var _i13 = 0, _mount = mount; _i13 < _mount.length; _i13++) {
          var _p3 = _mount[_i13];
          _p3.dom.classList.add("cm-panel");
          if (_p3.mount) _p3.mount();
        }
      } else {
        var _iterator84 = _createForOfIteratorHelper(this.panels),
          _step84;
        try {
          for (_iterator84.s(); !(_step84 = _iterator84.n()).done;) {
            var _p4 = _step84.value;
            if (_p4.update) _p4.update(_update17);
          }
        } catch (err) {
          _iterator84.e(err);
        } finally {
          _iterator84.f();
        }
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.top.sync([]);
      this.bottom.sync([]);
    }
  }]);
  return _class8;
}(), {
  provide: function provide(plugin) {
    return EditorView.scrollMargins.of(function (view) {
      var value = view.plugin(plugin);
      return value && {
        top: value.top.scrollMargin(),
        bottom: value.bottom.scrollMargin()
      };
    });
  }
});
var PanelGroup = /*#__PURE__*/function () {
  function PanelGroup(view, top, container) {
    _classCallCheck(this, PanelGroup);
    this.view = view;
    this.top = top;
    this.container = container;
    this.dom = undefined;
    this.classes = "";
    this.panels = [];
    this.syncClasses();
  }
  _createClass(PanelGroup, [{
    key: "sync",
    value: function sync(panels) {
      var _iterator85 = _createForOfIteratorHelper(this.panels),
        _step85;
      try {
        for (_iterator85.s(); !(_step85 = _iterator85.n()).done;) {
          var _p5 = _step85.value;
          if (_p5.destroy && panels.indexOf(_p5) < 0) _p5.destroy();
        }
      } catch (err) {
        _iterator85.e(err);
      } finally {
        _iterator85.f();
      }
      this.panels = panels;
      this.syncDOM();
    }
  }, {
    key: "syncDOM",
    value: function syncDOM() {
      if (this.panels.length == 0) {
        if (this.dom) {
          this.dom.remove();
          this.dom = undefined;
        }
        return;
      }
      if (!this.dom) {
        this.dom = document.createElement("div");
        this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
        this.dom.style[this.top ? "top" : "bottom"] = "0";
        var parent = this.container || this.view.dom;
        parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
      }
      var curDOM = this.dom.firstChild;
      var _iterator86 = _createForOfIteratorHelper(this.panels),
        _step86;
      try {
        for (_iterator86.s(); !(_step86 = _iterator86.n()).done;) {
          var panel = _step86.value;
          if (panel.dom.parentNode == this.dom) {
            while (curDOM != panel.dom) curDOM = rm(curDOM);
            curDOM = curDOM.nextSibling;
          } else {
            this.dom.insertBefore(panel.dom, curDOM);
          }
        }
      } catch (err) {
        _iterator86.e(err);
      } finally {
        _iterator86.f();
      }
      while (curDOM) curDOM = rm(curDOM);
    }
  }, {
    key: "scrollMargin",
    value: function scrollMargin() {
      return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
    }
  }, {
    key: "syncClasses",
    value: function syncClasses() {
      if (!this.container || this.classes == this.view.themeClasses) return;
      var _iterator87 = _createForOfIteratorHelper(this.classes.split(" ")),
        _step87;
      try {
        for (_iterator87.s(); !(_step87 = _iterator87.n()).done;) {
          var cls = _step87.value;
          if (cls) this.container.classList.remove(cls);
        }
      } catch (err) {
        _iterator87.e(err);
      } finally {
        _iterator87.f();
      }
      var _iterator88 = _createForOfIteratorHelper((this.classes = this.view.themeClasses).split(" ")),
        _step88;
      try {
        for (_iterator88.s(); !(_step88 = _iterator88.n()).done;) {
          var _cls = _step88.value;
          if (_cls) this.container.classList.add(_cls);
        }
      } catch (err) {
        _iterator88.e(err);
      } finally {
        _iterator88.f();
      }
    }
  }]);
  return PanelGroup;
}();
function rm(node) {
  var next = node.nextSibling;
  node.remove();
  return next;
}
/**
Opening a panel is done by providing a constructor function for
the panel through this facet. (The panel is closed again when its
constructor is no longer provided.) Values of `null` are ignored.
*/
var showPanel = /*@__PURE__*/Facet.define({
  enables: panelPlugin
});

/**
A gutter marker represents a bit of information attached to a line
in a specific gutter. Your own custom markers have to extend this
class.
*/
var GutterMarker = /*#__PURE__*/function (_RangeValue2) {
  _inherits(GutterMarker, _RangeValue2);
  var _super24 = _createSuper(GutterMarker);
  function GutterMarker() {
    _classCallCheck(this, GutterMarker);
    return _super24.apply(this, arguments);
  }
  _createClass(GutterMarker, [{
    key: "compare",
    value:
    /**
    @internal
    */
    function compare(other) {
      return this == other || this.constructor == other.constructor && this.eq(other);
    }
    /**
    Compare this marker to another marker of the same type.
    */
  }, {
    key: "eq",
    value: function eq(other) {
      return false;
    }
    /**
    Called if the marker has a `toDOM` method and its representation
    was removed from a gutter.
    */
  }, {
    key: "destroy",
    value: function destroy(dom) {}
  }]);
  return GutterMarker;
}(RangeValue);
GutterMarker.prototype.elementClass = "";
GutterMarker.prototype.toDOM = undefined;
GutterMarker.prototype.mapMode = MapMode.TrackBefore;
GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
GutterMarker.prototype.point = true;
/**
Facet used to add a class to all gutter elements for a given line.
Markers given to this facet should _only_ define an
[`elementclass`](https://codemirror.net/6/docs/ref/#view.GutterMarker.elementClass), not a
[`toDOM`](https://codemirror.net/6/docs/ref/#view.GutterMarker.toDOM) (or the marker will appear
in all gutters for the line).
*/
var gutterLineClass = /*@__PURE__*/Facet.define();
var defaults$1 = {
  "class": "",
  renderEmptyElements: false,
  elementStyle: "",
  markers: function markers() {
    return RangeSet.empty;
  },
  lineMarker: function lineMarker() {
    return null;
  },
  widgetMarker: function widgetMarker() {
    return null;
  },
  lineMarkerChange: null,
  initialSpacer: null,
  updateSpacer: null,
  domEventHandlers: {}
};
var activeGutters = /*@__PURE__*/Facet.define();
/**
Define an editor gutter. The order in which the gutters appear is
determined by their extension priority.
*/
function gutter(config) {
  return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults$1), config))];
}
var unfixGutters = /*@__PURE__*/Facet.define({
  combine: function combine(values) {
    return values.some(function (x) {
      return x;
    });
  }
});
/**
The gutter-drawing plugin is automatically enabled when you add a
gutter, but you can use this function to explicitly configure it.

Unless `fixed` is explicitly set to `false`, the gutters are
fixed, meaning they don't scroll along with the content
horizontally (except on Internet Explorer, which doesn't support
CSS [`position:
sticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).
*/
function gutters(config) {
  var result = [gutterView];
  if (config && config.fixed === false) result.push(unfixGutters.of(true));
  return result;
}
var gutterView = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class9(view) {
    _classCallCheck(this, _class9);
    this.view = view;
    this.prevViewport = view.viewport;
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutters";
    this.dom.setAttribute("aria-hidden", "true");
    this.dom.style.minHeight = this.view.contentHeight + "px";
    this.gutters = view.state.facet(activeGutters).map(function (conf) {
      return new SingleGutterView(view, conf);
    });
    var _iterator89 = _createForOfIteratorHelper(this.gutters),
      _step89;
    try {
      for (_iterator89.s(); !(_step89 = _iterator89.n()).done;) {
        var _gutter = _step89.value;
        this.dom.appendChild(_gutter.dom);
      }
    } catch (err) {
      _iterator89.e(err);
    } finally {
      _iterator89.f();
    }
    this.fixed = !view.state.facet(unfixGutters);
    if (this.fixed) {
      // FIXME IE11 fallback, which doesn't support position: sticky,
      // by using position: relative + event handlers that realign the
      // gutter (or just force fixed=false on IE11?)
      this.dom.style.position = "sticky";
    }
    this.syncGutters(false);
    view.scrollDOM.insertBefore(this.dom, view.contentDOM);
  }
  _createClass(_class9, [{
    key: "update",
    value: function update(_update18) {
      if (this.updateGutters(_update18)) {
        // Detach during sync when the viewport changed significantly
        // (such as during scrolling), since for large updates that is
        // faster.
        var vpA = this.prevViewport,
          vpB = _update18.view.viewport;
        var vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
        this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
      }
      if (_update18.geometryChanged) this.dom.style.minHeight = this.view.contentHeight + "px";
      if (this.view.state.facet(unfixGutters) != !this.fixed) {
        this.fixed = !this.fixed;
        this.dom.style.position = this.fixed ? "sticky" : "";
      }
      this.prevViewport = _update18.view.viewport;
    }
  }, {
    key: "syncGutters",
    value: function syncGutters(detach) {
      var _this57 = this;
      var after = this.dom.nextSibling;
      if (detach) this.dom.remove();
      var lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
      var classSet = [];
      var contexts = this.gutters.map(function (gutter) {
        return new UpdateContext(gutter, _this57.view.viewport, -_this57.view.documentPadding.top);
      });
      var _iterator90 = _createForOfIteratorHelper(this.view.viewportLineBlocks),
        _step90;
      try {
        for (_iterator90.s(); !(_step90 = _iterator90.n()).done;) {
          var line = _step90.value;
          if (classSet.length) classSet = [];
          if (Array.isArray(line.type)) {
            var first = true;
            var _iterator92 = _createForOfIteratorHelper(line.type),
              _step92;
            try {
              for (_iterator92.s(); !(_step92 = _iterator92.n()).done;) {
                var b = _step92.value;
                if (b.type == BlockType.Text && first) {
                  advanceCursor(lineClasses, classSet, b.from);
                  var _iterator93 = _createForOfIteratorHelper(contexts),
                    _step93;
                  try {
                    for (_iterator93.s(); !(_step93 = _iterator93.n()).done;) {
                      var cx = _step93.value;
                      cx.line(this.view, b, classSet);
                    }
                  } catch (err) {
                    _iterator93.e(err);
                  } finally {
                    _iterator93.f();
                  }
                  first = false;
                } else if (b.widget) {
                  var _iterator94 = _createForOfIteratorHelper(contexts),
                    _step94;
                  try {
                    for (_iterator94.s(); !(_step94 = _iterator94.n()).done;) {
                      var _cx = _step94.value;
                      _cx.widget(this.view, b);
                    }
                  } catch (err) {
                    _iterator94.e(err);
                  } finally {
                    _iterator94.f();
                  }
                }
              }
            } catch (err) {
              _iterator92.e(err);
            } finally {
              _iterator92.f();
            }
          } else if (line.type == BlockType.Text) {
            advanceCursor(lineClasses, classSet, line.from);
            var _iterator95 = _createForOfIteratorHelper(contexts),
              _step95;
            try {
              for (_iterator95.s(); !(_step95 = _iterator95.n()).done;) {
                var _cx2 = _step95.value;
                _cx2.line(this.view, line, classSet);
              }
            } catch (err) {
              _iterator95.e(err);
            } finally {
              _iterator95.f();
            }
          }
        }
      } catch (err) {
        _iterator90.e(err);
      } finally {
        _iterator90.f();
      }
      var _iterator91 = _createForOfIteratorHelper(contexts),
        _step91;
      try {
        for (_iterator91.s(); !(_step91 = _iterator91.n()).done;) {
          var _cx3 = _step91.value;
          _cx3.finish();
        }
      } catch (err) {
        _iterator91.e(err);
      } finally {
        _iterator91.f();
      }
      if (detach) this.view.scrollDOM.insertBefore(this.dom, after);
    }
  }, {
    key: "updateGutters",
    value: function updateGutters(update) {
      var prev = update.startState.facet(activeGutters),
        cur = update.state.facet(activeGutters);
      var change = update.docChanged || update.heightChanged || update.viewportChanged || !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
      if (prev == cur) {
        var _iterator96 = _createForOfIteratorHelper(this.gutters),
          _step96;
        try {
          for (_iterator96.s(); !(_step96 = _iterator96.n()).done;) {
            var _gutter2 = _step96.value;
            if (_gutter2.update(update)) change = true;
          }
        } catch (err) {
          _iterator96.e(err);
        } finally {
          _iterator96.f();
        }
      } else {
        change = true;
        var _gutters = [];
        var _iterator97 = _createForOfIteratorHelper(cur),
          _step97;
        try {
          for (_iterator97.s(); !(_step97 = _iterator97.n()).done;) {
            var conf = _step97.value;
            var known = prev.indexOf(conf);
            if (known < 0) {
              _gutters.push(new SingleGutterView(this.view, conf));
            } else {
              this.gutters[known].update(update);
              _gutters.push(this.gutters[known]);
            }
          }
        } catch (err) {
          _iterator97.e(err);
        } finally {
          _iterator97.f();
        }
        var _iterator98 = _createForOfIteratorHelper(this.gutters),
          _step98;
        try {
          for (_iterator98.s(); !(_step98 = _iterator98.n()).done;) {
            var _g = _step98.value;
            _g.dom.remove();
            if (_gutters.indexOf(_g) < 0) _g.destroy();
          }
        } catch (err) {
          _iterator98.e(err);
        } finally {
          _iterator98.f();
        }
        for (var _i14 = 0, _gutters2 = _gutters; _i14 < _gutters2.length; _i14++) {
          var g = _gutters2[_i14];
          this.dom.appendChild(g.dom);
        }
        this.gutters = _gutters;
      }
      return change;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _iterator99 = _createForOfIteratorHelper(this.gutters),
        _step99;
      try {
        for (_iterator99.s(); !(_step99 = _iterator99.n()).done;) {
          var view = _step99.value;
          view.destroy();
        }
      } catch (err) {
        _iterator99.e(err);
      } finally {
        _iterator99.f();
      }
      this.dom.remove();
    }
  }]);
  return _class9;
}(), {
  provide: function provide(plugin) {
    return EditorView.scrollMargins.of(function (view) {
      var value = view.plugin(plugin);
      if (!value || value.gutters.length == 0 || !value.fixed) return null;
      return view.textDirection == Direction.LTR ? {
        left: value.dom.offsetWidth
      } : {
        right: value.dom.offsetWidth
      };
    });
  }
});
function asArray(val) {
  return Array.isArray(val) ? val : [val];
}
function advanceCursor(cursor, collect, pos) {
  while (cursor.value && cursor.from <= pos) {
    if (cursor.from == pos) collect.push(cursor.value);
    cursor.next();
  }
}
var UpdateContext = /*#__PURE__*/function () {
  function UpdateContext(gutter, viewport, height) {
    _classCallCheck(this, UpdateContext);
    this.gutter = gutter;
    this.height = height;
    this.i = 0;
    this.cursor = RangeSet.iter(gutter.markers, viewport.from);
  }
  _createClass(UpdateContext, [{
    key: "addElement",
    value: function addElement(view, block, markers) {
      var gutter = this.gutter,
        above = block.top - this.height;
      if (this.i == gutter.elements.length) {
        var newElt = new GutterElement(view, block.height, above, markers);
        gutter.elements.push(newElt);
        gutter.dom.appendChild(newElt.dom);
      } else {
        gutter.elements[this.i].update(view, block.height, above, markers);
      }
      this.height = block.bottom;
      this.i++;
    }
  }, {
    key: "line",
    value: function line(view, _line3, extraMarkers) {
      var localMarkers = [];
      advanceCursor(this.cursor, localMarkers, _line3.from);
      if (extraMarkers.length) localMarkers = localMarkers.concat(extraMarkers);
      var forLine = this.gutter.config.lineMarker(view, _line3, localMarkers);
      if (forLine) localMarkers.unshift(forLine);
      var gutter = this.gutter;
      if (localMarkers.length == 0 && !gutter.config.renderEmptyElements) return;
      this.addElement(view, _line3, localMarkers);
    }
  }, {
    key: "widget",
    value: function widget(view, block) {
      var marker = this.gutter.config.widgetMarker(view, block.widget, block);
      if (marker) this.addElement(view, block, [marker]);
    }
  }, {
    key: "finish",
    value: function finish() {
      var gutter = this.gutter;
      while (gutter.elements.length > this.i) {
        var last = gutter.elements.pop();
        gutter.dom.removeChild(last.dom);
        last.destroy();
      }
    }
  }]);
  return UpdateContext;
}();
var SingleGutterView = /*#__PURE__*/function () {
  function SingleGutterView(view, config) {
    var _this58 = this;
    _classCallCheck(this, SingleGutterView);
    this.view = view;
    this.config = config;
    this.elements = [];
    this.spacer = null;
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutter" + (this.config["class"] ? " " + this.config["class"] : "");
    var _loop8 = function _loop8(prop) {
      _this58.dom.addEventListener(prop, function (event) {
        var target = event.target,
          y;
        if (target != _this58.dom && _this58.dom.contains(target)) {
          while (target.parentNode != _this58.dom) target = target.parentNode;
          var rect = target.getBoundingClientRect();
          y = (rect.top + rect.bottom) / 2;
        } else {
          y = event.clientY;
        }
        var line = view.lineBlockAtHeight(y - view.documentTop);
        if (config.domEventHandlers[prop](view, line, event)) event.preventDefault();
      });
    };
    for (var prop in config.domEventHandlers) {
      _loop8(prop);
    }
    this.markers = asArray(config.markers(view));
    if (config.initialSpacer) {
      this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);
      this.dom.appendChild(this.spacer.dom);
      this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
    }
  }
  _createClass(SingleGutterView, [{
    key: "update",
    value: function update(_update19) {
      var prevMarkers = this.markers;
      this.markers = asArray(this.config.markers(_update19.view));
      if (this.spacer && this.config.updateSpacer) {
        var updated = this.config.updateSpacer(this.spacer.markers[0], _update19);
        if (updated != this.spacer.markers[0]) this.spacer.update(_update19.view, 0, 0, [updated]);
      }
      var vp = _update19.view.viewport;
      return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(_update19) : false);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _iterator100 = _createForOfIteratorHelper(this.elements),
        _step100;
      try {
        for (_iterator100.s(); !(_step100 = _iterator100.n()).done;) {
          var elt = _step100.value;
          elt.destroy();
        }
      } catch (err) {
        _iterator100.e(err);
      } finally {
        _iterator100.f();
      }
    }
  }]);
  return SingleGutterView;
}();
var GutterElement = /*#__PURE__*/function () {
  function GutterElement(view, height, above, markers) {
    _classCallCheck(this, GutterElement);
    this.height = -1;
    this.above = 0;
    this.markers = [];
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutterElement";
    this.update(view, height, above, markers);
  }
  _createClass(GutterElement, [{
    key: "update",
    value: function update(view, height, above, markers) {
      if (this.height != height) this.dom.style.height = (this.height = height) + "px";
      if (this.above != above) this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
      if (!sameMarkers(this.markers, markers)) this.setMarkers(view, markers);
    }
  }, {
    key: "setMarkers",
    value: function setMarkers(view, markers) {
      var cls = "cm-gutterElement",
        domPos = this.dom.firstChild;
      for (var iNew = 0, iOld = 0;;) {
        var skipTo = iOld,
          marker = iNew < markers.length ? markers[iNew++] : null,
          matched = false;
        if (marker) {
          var c = marker.elementClass;
          if (c) cls += " " + c;
          for (var i = iOld; i < this.markers.length; i++) if (this.markers[i].compare(marker)) {
            skipTo = i;
            matched = true;
            break;
          }
        } else {
          skipTo = this.markers.length;
        }
        while (iOld < skipTo) {
          var next = this.markers[iOld++];
          if (next.toDOM) {
            next.destroy(domPos);
            var after = domPos.nextSibling;
            domPos.remove();
            domPos = after;
          }
        }
        if (!marker) break;
        if (marker.toDOM) {
          if (matched) domPos = domPos.nextSibling;else this.dom.insertBefore(marker.toDOM(view), domPos);
        }
        if (matched) iOld++;
      }
      this.dom.className = cls;
      this.markers = markers;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.setMarkers(null, []); // First argument not used unless creating markers
    }
  }]);
  return GutterElement;
}();
function sameMarkers(a, b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) if (!a[i].compare(b[i])) return false;
  return true;
}
/**
Facet used to provide markers to the line number gutter.
*/
var lineNumberMarkers = /*@__PURE__*/Facet.define();
var lineNumberConfig = /*@__PURE__*/Facet.define({
  combine: function combine(values) {
    return combineConfig(values, {
      formatNumber: String,
      domEventHandlers: {}
    }, {
      domEventHandlers: function domEventHandlers(a, b) {
        var result = Object.assign({}, a);
        var _loop9 = function _loop9() {
          var exists = result[event],
            add = b[event];
          result[event] = exists ? function (view, line, event) {
            return exists(view, line, event) || add(view, line, event);
          } : add;
        };
        for (var event in b) {
          _loop9();
        }
        return result;
      }
    });
  }
});
var NumberMarker = /*#__PURE__*/function (_GutterMarker) {
  _inherits(NumberMarker, _GutterMarker);
  var _super25 = _createSuper(NumberMarker);
  function NumberMarker(number) {
    var _this59;
    _classCallCheck(this, NumberMarker);
    _this59 = _super25.call(this);
    _this59.number = number;
    return _this59;
  }
  _createClass(NumberMarker, [{
    key: "eq",
    value: function eq(other) {
      return this.number == other.number;
    }
  }, {
    key: "toDOM",
    value: function toDOM() {
      return document.createTextNode(this.number);
    }
  }]);
  return NumberMarker;
}(GutterMarker);
function formatNumber(view, number) {
  return view.state.facet(lineNumberConfig).formatNumber(number, view.state);
}
var lineNumberGutter = /*@__PURE__*/activeGutters.compute([lineNumberConfig], function (state) {
  return {
    "class": "cm-lineNumbers",
    renderEmptyElements: false,
    markers: function markers(view) {
      return view.state.facet(lineNumberMarkers);
    },
    lineMarker: function lineMarker(view, line, others) {
      if (others.some(function (m) {
        return m.toDOM;
      })) return null;
      return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
    },
    widgetMarker: function widgetMarker() {
      return null;
    },
    lineMarkerChange: function lineMarkerChange(update) {
      return update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig);
    },
    initialSpacer: function initialSpacer(view) {
      return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
    },
    updateSpacer: function updateSpacer(spacer, update) {
      var max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
      return max == spacer.number ? spacer : new NumberMarker(max);
    },
    domEventHandlers: state.facet(lineNumberConfig).domEventHandlers
  };
});
/**
Create a line number gutter extension.
*/
function lineNumbers() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return [lineNumberConfig.of(config), gutters(), lineNumberGutter];
}
function maxLineNumber(lines) {
  var last = 9;
  while (last < lines) last = last * 10 + 9;
  return last;
}
var activeLineGutterMarker = /*@__PURE__*/new ( /*#__PURE__*/function (_GutterMarker2) {
  _inherits(_class10, _GutterMarker2);
  var _super26 = _createSuper(_class10);
  function _class10() {
    var _this60;
    _classCallCheck(this, _class10);
    _this60 = _super26.apply(this, arguments);
    _this60.elementClass = "cm-activeLineGutter";
    return _this60;
  }
  return _createClass(_class10);
}(GutterMarker))();
var activeLineGutterHighlighter = /*@__PURE__*/gutterLineClass.compute(["selection"], function (state) {
  var marks = [],
    last = -1;
  var _iterator101 = _createForOfIteratorHelper(state.selection.ranges),
    _step101;
  try {
    for (_iterator101.s(); !(_step101 = _iterator101.n()).done;) {
      var range = _step101.value;
      var linePos = state.doc.lineAt(range.head).from;
      if (linePos > last) {
        last = linePos;
        marks.push(activeLineGutterMarker.range(linePos));
      }
    }
  } catch (err) {
    _iterator101.e(err);
  } finally {
    _iterator101.f();
  }
  return RangeSet.of(marks);
});
/**
Returns an extension that adds a `cm-activeLineGutter` class to
all gutter elements on the [active
line](https://codemirror.net/6/docs/ref/#view.highlightActiveLine).
*/
function highlightActiveLineGutter() {
  return activeLineGutterHighlighter;
}

// FIXME profile adding a per-Tree TreeNode cache, validating it by
// parent pointer
/// The default maximum length of a `TreeBuffer` node.
var DefaultBufferLength = 1024;
var nextPropID = 0;
var Range = /*#__PURE__*/_createClass(function Range(from, to) {
  _classCallCheck(this, Range);
  this.from = from;
  this.to = to;
}); /// Each [node type](#common.NodeType) or [individual tree](#common.Tree)
/// can have metadata associated with it in props. Instances of this
/// class represent prop names.
var NodeProp = /*#__PURE__*/function () {
  /// Create a new node prop type.
  function NodeProp() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, NodeProp);
    this.id = nextPropID++;
    this.perNode = !!config.perNode;
    this.deserialize = config.deserialize || function () {
      throw new Error("This node type doesn't define a deserialize function");
    };
  }
  /// This is meant to be used with
  /// [`NodeSet.extend`](#common.NodeSet.extend) or
  /// [`LRParser.configure`](#lr.ParserConfig.props) to compute
  /// prop values for each node type in the set. Takes a [match
  /// object](#common.NodeType^match) or function that returns undefined
  /// if the node type doesn't get this prop, and the prop's value if
  /// it does.
  _createClass(NodeProp, [{
    key: "add",
    value: function add(match) {
      var _this = this;
      if (this.perNode) throw new RangeError("Can't add per-node props to node types");
      if (typeof match != "function") match = NodeType.match(match);
      return function (type) {
        var result = match(type);
        return result === undefined ? null : [_this, result];
      };
    }
  }]);
  return NodeProp;
}(); /// Prop that is used to describe matching delimiters. For opening
/// delimiters, this holds an array of node names (written as a
/// space-separated string when declaring this prop in a grammar)
/// for the node types of closing delimiters that match it.
NodeProp.closedBy = new NodeProp({
  deserialize: function deserialize(str) {
    return str.split(" ");
  }
});
/// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is
/// attached to closing delimiters, holding an array of node names
/// of types of matching opening delimiters.
NodeProp.openedBy = new NodeProp({
  deserialize: function deserialize(str) {
    return str.split(" ");
  }
});
/// Used to assign node types to groups (for example, all node
/// types that represent an expression could be tagged with an
/// `"Expression"` group).
NodeProp.group = new NodeProp({
  deserialize: function deserialize(str) {
    return str.split(" ");
  }
});
/// The hash of the [context](#lr.ContextTracker.constructor)
/// that the node was parsed in, if any. Used to limit reuse of
/// contextual nodes.
NodeProp.contextHash = new NodeProp({
  perNode: true
});
/// The distance beyond the end of the node that the tokenizer
/// looked ahead for any of the tokens inside the node. (The LR
/// parser only stores this when it is larger than 25, for
/// efficiency reasons.)
NodeProp.lookAhead = new NodeProp({
  perNode: true
});
/// This per-node prop is used to replace a given node, or part of a
/// node, with another tree. This is useful to include trees from
/// different languages in mixed-language parsers.
NodeProp.mounted = new NodeProp({
  perNode: true
});
var noProps = Object.create(null);
/// Each node in a syntax tree has a node type associated with it.
var NodeType = /*#__PURE__*/function () {
  /// @internal
  function NodeType(
  /// The name of the node type. Not necessarily unique, but if the
  /// grammar was written properly, different node types with the
  /// same name within a node set should play the same semantic
  /// role.
  name,
  /// @internal
  props,
  /// The id of this node in its set. Corresponds to the term ids
  /// used in the parser.
  id) {
    var flags = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    _classCallCheck(this, NodeType);
    this.name = name;
    this.props = props;
    this.id = id;
    this.flags = flags;
  }
  /// Define a node type.
  _createClass(NodeType, [{
    key: "prop",
    value:
    /// Retrieves a node prop for this type. Will return `undefined` if
    /// the prop isn't present on this node.
    function prop(_prop) {
      return this.props[_prop.id];
    }
    /// True when this is the top node of a grammar.
  }, {
    key: "isTop",
    get: function get() {
      return (this.flags & 1 /* NodeFlag.Top */) > 0;
    }
    /// True when this node is produced by a skip rule.
  }, {
    key: "isSkipped",
    get: function get() {
      return (this.flags & 2 /* NodeFlag.Skipped */) > 0;
    }
    /// Indicates whether this is an error node.
  }, {
    key: "isError",
    get: function get() {
      return (this.flags & 4 /* NodeFlag.Error */) > 0;
    }
    /// When true, this node type doesn't correspond to a user-declared
    /// named node, for example because it is used to cache repetition.
  }, {
    key: "isAnonymous",
    get: function get() {
      return (this.flags & 8 /* NodeFlag.Anonymous */) > 0;
    }
    /// Returns true when this node's name or one of its
    /// [groups](#common.NodeProp^group) matches the given string.
  }, {
    key: "is",
    value: function is(name) {
      if (typeof name == 'string') {
        if (this.name == name) return true;
        var group = this.prop(NodeProp.group);
        return group ? group.indexOf(name) > -1 : false;
      }
      return this.id == name;
    }
    /// Create a function from node types to arbitrary values by
    /// specifying an object whose property names are node or
    /// [group](#common.NodeProp^group) names. Often useful with
    /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple
    /// names, separated by spaces, in a single property name to map
    /// multiple node names to a single value.
  }], [{
    key: "define",
    value: function define(spec) {
      var props = spec.props && spec.props.length ? Object.create(null) : noProps;
      var flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) | (spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);
      var type = new NodeType(spec.name || "", props, spec.id, flags);
      if (spec.props) {
        var _iterator = _createForOfIteratorHelper(spec.props),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var src = _step.value;
            if (!Array.isArray(src)) src = src(type);
            if (src) {
              if (src[0].perNode) throw new RangeError("Can't store a per-node prop on a node type");
              props[src[0].id] = src[1];
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      return type;
    }
  }, {
    key: "match",
    value: function match(map) {
      var direct = Object.create(null);
      for (var prop in map) {
        var _iterator2 = _createForOfIteratorHelper(prop.split(" ")),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var name = _step2.value;
            direct[name] = map[prop];
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      return function (node) {
        for (var groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
          var found = direct[i < 0 ? node.name : groups[i]];
          if (found) return found;
        }
      };
    }
  }]);
  return NodeType;
}(); /// An empty dummy node type to use when no actual type is available.
NodeType.none = new NodeType("", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);
/// A node set holds a collection of node types. It is used to
/// compactly represent trees by storing their type ids, rather than a
/// full pointer to the type object, in a numeric array. Each parser
/// [has](#lr.LRParser.nodeSet) a node set, and [tree
/// buffers](#common.TreeBuffer) can only store collections of nodes
/// from the same set. A set can have a maximum of 2**16 (65536) node
/// types in it, so that the ids fit into 16-bit typed array slots.
var NodeSet = /*#__PURE__*/function () {
  /// Create a set with the given types. The `id` property of each
  /// type should correspond to its position within the array.
  function NodeSet(
  /// The node types in this set, by id.
  types) {
    _classCallCheck(this, NodeSet);
    this.types = types;
    for (var i = 0; i < types.length; i++) if (types[i].id != i) throw new RangeError("Node type ids should correspond to array positions when creating a node set");
  }
  /// Create a copy of this set with some node properties added. The
  /// arguments to this method can be created with
  /// [`NodeProp.add`](#common.NodeProp.add).
  _createClass(NodeSet, [{
    key: "extend",
    value: function extend() {
      var newTypes = [];
      for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {
        props[_key] = arguments[_key];
      }
      var _iterator3 = _createForOfIteratorHelper(this.types),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var type = _step3.value;
          var newProps = null;
          var _iterator4 = _createForOfIteratorHelper(props),
            _step4;
          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var source = _step4.value;
              var add = source(type);
              if (add) {
                if (!newProps) newProps = Object.assign({}, type.props);
                newProps[add[0].id] = add[1];
              }
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
          newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return new NodeSet(newTypes);
    }
  }]);
  return NodeSet;
}();
var CachedNode = new WeakMap(),
  CachedInnerNode = new WeakMap();
/// Options that control iteration. Can be combined with the `|`
/// operator to enable multiple ones.
var IterMode;
(function (IterMode) {
  /// When enabled, iteration will only visit [`Tree`](#common.Tree)
  /// objects, not nodes packed into
  /// [`TreeBuffer`](#common.TreeBuffer)s.
  IterMode[IterMode["ExcludeBuffers"] = 1] = "ExcludeBuffers";
  /// Enable this to make iteration include anonymous nodes (such as
  /// the nodes that wrap repeated grammar constructs into a balanced
  /// tree).
  IterMode[IterMode["IncludeAnonymous"] = 2] = "IncludeAnonymous";
  /// By default, regular [mounted](#common.NodeProp^mounted) nodes
  /// replace their base node in iteration. Enable this to ignore them
  /// instead.
  IterMode[IterMode["IgnoreMounts"] = 4] = "IgnoreMounts";
  /// This option only applies in
  /// [`enter`](#common.SyntaxNode.enter)-style methods. It tells the
  /// library to not enter mounted overlays if one covers the given
  /// position.
  IterMode[IterMode["IgnoreOverlays"] = 8] = "IgnoreOverlays";
})(IterMode || (IterMode = {}));
/// A piece of syntax tree. There are two ways to approach these
/// trees: the way they are actually stored in memory, and the
/// convenient way.
///
/// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
/// objects. By packing detail information into `TreeBuffer` leaf
/// nodes, the representation is made a lot more memory-efficient.
///
/// However, when you want to actually work with tree nodes, this
/// representation is very awkward, so most client code will want to
/// use the [`TreeCursor`](#common.TreeCursor) or
/// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides
/// a view on some part of this data structure, and can be used to
/// move around to adjacent nodes.
var Tree = /*#__PURE__*/function () {
  /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).
  function Tree(
  /// The type of the top node.
  type,
  /// This node's child nodes.
  children,
  /// The positions (offsets relative to the start of this tree) of
  /// the children.
  positions,
  /// The total length of this tree
  length,
  /// Per-node [node props](#common.NodeProp) to associate with this node.
  props) {
    _classCallCheck(this, Tree);
    this.type = type;
    this.children = children;
    this.positions = positions;
    this.length = length;
    /// @internal
    this.props = null;
    if (props && props.length) {
      this.props = Object.create(null);
      var _iterator5 = _createForOfIteratorHelper(props),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _step5$value = _slicedToArray(_step5.value, 2),
            prop = _step5$value[0],
            value = _step5$value[1];
          this.props[typeof prop == "number" ? prop : prop.id] = value;
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  }
  /// @internal
  _createClass(Tree, [{
    key: "toString",
    value: function toString() {
      var mounted = this.prop(NodeProp.mounted);
      if (mounted && !mounted.overlay) return mounted.tree.toString();
      var children = "";
      var _iterator6 = _createForOfIteratorHelper(this.children),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var ch = _step6.value;
          var str = ch.toString();
          if (str) {
            if (children) children += ",";
            children += str;
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      return !this.type.name ? children : (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children.length ? "(" + children + ")" : "");
    }
    /// Get a [tree cursor](#common.TreeCursor) positioned at the top of
    /// the tree. Mode can be used to [control](#common.IterMode) which
    /// nodes the cursor visits.
  }, {
    key: "cursor",
    value: function cursor() {
      var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      return new TreeCursor(this.topNode, mode);
    }
    /// Get a [tree cursor](#common.TreeCursor) pointing into this tree
    /// at the given position and side (see
    /// [`moveTo`](#common.TreeCursor.moveTo).
  }, {
    key: "cursorAt",
    value: function cursorAt(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var scope = CachedNode.get(this) || this.topNode;
      var cursor = new TreeCursor(scope);
      cursor.moveTo(pos, side);
      CachedNode.set(this, cursor._tree);
      return cursor;
    }
    /// Get a [syntax node](#common.SyntaxNode) object for the top of the
    /// tree.
  }, {
    key: "topNode",
    get: function get() {
      return new TreeNode(this, 0, 0, null);
    }
    /// Get the [syntax node](#common.SyntaxNode) at the given position.
    /// If `side` is -1, this will move into nodes that end at the
    /// position. If 1, it'll move into nodes that start at the
    /// position. With 0, it'll only enter nodes that cover the position
    /// from both sides.
    ///
    /// Note that this will not enter
    /// [overlays](#common.MountedTree.overlay), and you often want
    /// [`resolveInner`](#common.Tree.resolveInner) instead.
  }, {
    key: "resolve",
    value: function resolve(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
      CachedNode.set(this, node);
      return node;
    }
    /// Like [`resolve`](#common.Tree.resolve), but will enter
    /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
    /// pointing into the innermost overlaid tree at the given position
    /// (with parent links going through all parent structure, including
    /// the host trees).
  }, {
    key: "resolveInner",
    value: function resolveInner(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
      CachedInnerNode.set(this, node);
      return node;
    }
    /// Iterate over the tree and its children, calling `enter` for any
    /// node that touches the `from`/`to` region (if given) before
    /// running over such a node's children, and `leave` (if given) when
    /// leaving the node. When `enter` returns `false`, that node will
    /// not have its children iterated over (or `leave` called).
  }, {
    key: "iterate",
    value: function iterate(spec) {
      var enter = spec.enter,
        leave = spec.leave,
        _spec$from = spec.from,
        from = _spec$from === void 0 ? 0 : _spec$from,
        _spec$to = spec.to,
        to = _spec$to === void 0 ? this.length : _spec$to;
      var mode = spec.mode || 0,
        anon = (mode & IterMode.IncludeAnonymous) > 0;
      for (var c = this.cursor(mode | IterMode.IncludeAnonymous);;) {
        var entered = false;
        if (c.from <= to && c.to >= from && (!anon && c.type.isAnonymous || enter(c) !== false)) {
          if (c.firstChild()) continue;
          entered = true;
        }
        for (;;) {
          if (entered && leave && (anon || !c.type.isAnonymous)) leave(c);
          if (c.nextSibling()) break;
          if (!c.parent()) return;
          entered = true;
        }
      }
    }
    /// Get the value of the given [node prop](#common.NodeProp) for this
    /// node. Works with both per-node and per-type props.
  }, {
    key: "prop",
    value: function prop(_prop2) {
      return !_prop2.perNode ? this.type.prop(_prop2) : this.props ? this.props[_prop2.id] : undefined;
    }
    /// Returns the node's [per-node props](#common.NodeProp.perNode) in a
    /// format that can be passed to the [`Tree`](#common.Tree)
    /// constructor.
  }, {
    key: "propValues",
    get: function get() {
      var result = [];
      if (this.props) for (var id in this.props) result.push([+id, this.props[id]]);
      return result;
    }
    /// Balance the direct children of this tree, producing a copy of
    /// which may have children grouped into subtrees with type
    /// [`NodeType.none`](#common.NodeType^none).
  }, {
    key: "balance",
    value: function balance() {
      var _this2 = this;
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.children.length <= 8 /* Balance.BranchFactor */ ? this : balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, function (children, positions, length) {
        return new Tree(_this2.type, children, positions, length, _this2.propValues);
      }, config.makeTree || function (children, positions, length) {
        return new Tree(NodeType.none, children, positions, length);
      });
    }
    /// Build a tree from a postfix-ordered buffer of node information,
    /// or a cursor over such a buffer.
  }], [{
    key: "build",
    value: function build(data) {
      return buildTree(data);
    }
  }]);
  return Tree;
}(); /// The empty tree
Tree.empty = new Tree(NodeType.none, [], [], 0);
var FlatBufferCursor = /*#__PURE__*/function () {
  function FlatBufferCursor(buffer, index) {
    _classCallCheck(this, FlatBufferCursor);
    this.buffer = buffer;
    this.index = index;
  }
  _createClass(FlatBufferCursor, [{
    key: "id",
    get: function get() {
      return this.buffer[this.index - 4];
    }
  }, {
    key: "start",
    get: function get() {
      return this.buffer[this.index - 3];
    }
  }, {
    key: "end",
    get: function get() {
      return this.buffer[this.index - 2];
    }
  }, {
    key: "size",
    get: function get() {
      return this.buffer[this.index - 1];
    }
  }, {
    key: "pos",
    get: function get() {
      return this.index;
    }
  }, {
    key: "next",
    value: function next() {
      this.index -= 4;
    }
  }, {
    key: "fork",
    value: function fork() {
      return new FlatBufferCursor(this.buffer, this.index);
    }
  }]);
  return FlatBufferCursor;
}(); /// Tree buffers contain (type, start, end, endIndex) quads for each
/// node. In such a buffer, nodes are stored in prefix order (parents
/// before children, with the endIndex of the parent indicating which
/// children belong to it).
var TreeBuffer = /*#__PURE__*/function () {
  /// Create a tree buffer.
  function TreeBuffer(
  /// The buffer's content.
  buffer,
  /// The total length of the group of nodes in the buffer.
  length,
  /// The node set used in this buffer.
  set) {
    _classCallCheck(this, TreeBuffer);
    this.buffer = buffer;
    this.length = length;
    this.set = set;
  }
  /// @internal
  _createClass(TreeBuffer, [{
    key: "type",
    get: function get() {
      return NodeType.none;
    }
    /// @internal
  }, {
    key: "toString",
    value: function toString() {
      var result = [];
      for (var index = 0; index < this.buffer.length;) {
        result.push(this.childString(index));
        index = this.buffer[index + 3];
      }
      return result.join(",");
    }
    /// @internal
  }, {
    key: "childString",
    value: function childString(index) {
      var id = this.buffer[index],
        endIndex = this.buffer[index + 3];
      var type = this.set.types[id],
        result = type.name;
      if (/\W/.test(result) && !type.isError) result = JSON.stringify(result);
      index += 4;
      if (endIndex == index) return result;
      var children = [];
      while (index < endIndex) {
        children.push(this.childString(index));
        index = this.buffer[index + 3];
      }
      return result + "(" + children.join(",") + ")";
    }
    /// @internal
  }, {
    key: "findChild",
    value: function findChild(startIndex, endIndex, dir, pos, side) {
      var buffer = this.buffer,
        pick = -1;
      for (var i = startIndex; i != endIndex; i = buffer[i + 3]) {
        if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
          pick = i;
          if (dir > 0) break;
        }
      }
      return pick;
    }
    /// @internal
  }, {
    key: "slice",
    value: function slice(startI, endI, from) {
      var b = this.buffer;
      var copy = new Uint16Array(endI - startI),
        len = 0;
      for (var i = startI, j = 0; i < endI;) {
        copy[j++] = b[i++];
        copy[j++] = b[i++] - from;
        var to = copy[j++] = b[i++] - from;
        copy[j++] = b[i++] - startI;
        len = Math.max(len, to);
      }
      return new TreeBuffer(copy, len, this.set);
    }
  }]);
  return TreeBuffer;
}();
function checkSide(side, pos, from, to) {
  switch (side) {
    case -2 /* Side.Before */:
      return from < pos;
    case -1 /* Side.AtOrBefore */:
      return to >= pos && from < pos;
    case 0 /* Side.Around */:
      return from < pos && to > pos;
    case 1 /* Side.AtOrAfter */:
      return from <= pos && to > pos;
    case 2 /* Side.After */:
      return to > pos;
    case 4 /* Side.DontCare */:
      return true;
  }
}
function _enterUnfinishedNodesBefore(node, pos) {
  var scan = node.childBefore(pos);
  while (scan) {
    var last = scan.lastChild;
    if (!last || last.to != scan.to) break;
    if (last.type.isError && last.from == last.to) {
      node = scan;
      scan = last.prevSibling;
    } else {
      scan = last;
    }
  }
  return node;
}
function resolveNode(node, pos, side, overlays) {
  var _a;
  // Move up to a node that actually holds the position, if possible
  while (node.from == node.to || (side < 1 ? node.from >= pos : node.from > pos) || (side > -1 ? node.to <= pos : node.to < pos)) {
    var parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
    if (!parent) return node;
    node = parent;
  }
  var mode = overlays ? 0 : IterMode.IgnoreOverlays;
  // Must go up out of overlays when those do not overlap with pos
  if (overlays) for (var scan = node, _parent2 = scan.parent; _parent2; scan = _parent2, _parent2 = scan.parent) {
    if (scan instanceof TreeNode && scan.index < 0 && ((_a = _parent2.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from) node = _parent2;
  }
  for (;;) {
    var inner = node.enter(pos, side, mode);
    if (!inner) return node;
    node = inner;
  }
}
var TreeNode = /*#__PURE__*/function () {
  function TreeNode(_tree, from,
  // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)
  index, _parent) {
    _classCallCheck(this, TreeNode);
    this._tree = _tree;
    this.from = from;
    this.index = index;
    this._parent = _parent;
  }
  _createClass(TreeNode, [{
    key: "type",
    get: function get() {
      return this._tree.type;
    }
  }, {
    key: "name",
    get: function get() {
      return this._tree.type.name;
    }
  }, {
    key: "to",
    get: function get() {
      return this.from + this._tree.length;
    }
  }, {
    key: "nextChild",
    value: function nextChild(i, dir, pos, side) {
      var mode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      for (var parent = this;;) {
        for (var _parent$_tree = parent._tree, children = _parent$_tree.children, positions = _parent$_tree.positions, e = dir > 0 ? children.length : -1; i != e; i += dir) {
          var next = children[i],
            start = positions[i] + parent.from;
          if (!checkSide(side, pos, start, start + next.length)) continue;
          if (next instanceof TreeBuffer) {
            if (mode & IterMode.ExcludeBuffers) continue;
            var index = next.findChild(0, next.buffer.length, dir, pos - start, side);
            if (index > -1) return new BufferNode(new BufferContext(parent, next, i, start), null, index);
          } else if (mode & IterMode.IncludeAnonymous || !next.type.isAnonymous || hasChild(next)) {
            var mounted = void 0;
            if (!(mode & IterMode.IgnoreMounts) && next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay) return new TreeNode(mounted.tree, start, i, parent);
            var inner = new TreeNode(next, start, i, parent);
            return mode & IterMode.IncludeAnonymous || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
          }
        }
        if (mode & IterMode.IncludeAnonymous || !parent.type.isAnonymous) return null;
        if (parent.index >= 0) i = parent.index + dir;else i = dir < 0 ? -1 : parent._parent._tree.children.length;
        parent = parent._parent;
        if (!parent) return null;
      }
    }
  }, {
    key: "firstChild",
    get: function get() {
      return this.nextChild(0, 1, 0, 4 /* Side.DontCare */);
    }
  }, {
    key: "lastChild",
    get: function get() {
      return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */);
    }
  }, {
    key: "childAfter",
    value: function childAfter(pos) {
      return this.nextChild(0, 1, pos, 2 /* Side.After */);
    }
  }, {
    key: "childBefore",
    value: function childBefore(pos) {
      return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */);
    }
  }, {
    key: "enter",
    value: function enter(pos, side) {
      var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var mounted;
      if (!(mode & IterMode.IgnoreOverlays) && (mounted = this._tree.prop(NodeProp.mounted)) && mounted.overlay) {
        var rPos = pos - this.from;
        var _iterator7 = _createForOfIteratorHelper(mounted.overlay),
          _step7;
        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var _step7$value = _step7.value,
              from = _step7$value.from,
              to = _step7$value.to;
            if ((side > 0 ? from <= rPos : from < rPos) && (side < 0 ? to >= rPos : to > rPos)) return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }
      }
      return this.nextChild(0, 1, pos, side, mode);
    }
  }, {
    key: "nextSignificantParent",
    value: function nextSignificantParent() {
      var val = this;
      while (val.type.isAnonymous && val._parent) val = val._parent;
      return val;
    }
  }, {
    key: "parent",
    get: function get() {
      return this._parent ? this._parent.nextSignificantParent() : null;
    }
  }, {
    key: "nextSibling",
    get: function get() {
      return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;
    }
  }, {
    key: "prevSibling",
    get: function get() {
      return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;
    }
  }, {
    key: "cursor",
    value: function cursor() {
      var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      return new TreeCursor(this, mode);
    }
  }, {
    key: "tree",
    get: function get() {
      return this._tree;
    }
  }, {
    key: "toTree",
    value: function toTree() {
      return this._tree;
    }
  }, {
    key: "resolve",
    value: function resolve(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return resolveNode(this, pos, side, false);
    }
  }, {
    key: "resolveInner",
    value: function resolveInner(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return resolveNode(this, pos, side, true);
    }
  }, {
    key: "enterUnfinishedNodesBefore",
    value: function enterUnfinishedNodesBefore(pos) {
      return _enterUnfinishedNodesBefore(this, pos);
    }
  }, {
    key: "getChild",
    value: function getChild(type) {
      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var r = _getChildren(this, type, before, after);
      return r.length ? r[0] : null;
    }
  }, {
    key: "getChildren",
    value: function getChildren(type) {
      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      return _getChildren(this, type, before, after);
    }
    /// @internal
  }, {
    key: "toString",
    value: function toString() {
      return this._tree.toString();
    }
  }, {
    key: "node",
    get: function get() {
      return this;
    }
  }, {
    key: "matchContext",
    value: function matchContext(context) {
      return matchNodeContext(this, context);
    }
  }]);
  return TreeNode;
}();
function _getChildren(node, type, before, after) {
  var cur = node.cursor(),
    result = [];
  if (!cur.firstChild()) return result;
  if (before != null) while (!cur.type.is(before)) if (!cur.nextSibling()) return result;
  for (;;) {
    if (after != null && cur.type.is(after)) return result;
    if (cur.type.is(type)) result.push(cur.node);
    if (!cur.nextSibling()) return after == null ? result : [];
  }
}
function matchNodeContext(node, context) {
  var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : context.length - 1;
  for (var p = node.parent; i >= 0; p = p.parent) {
    if (!p) return false;
    if (!p.type.isAnonymous) {
      if (context[i] && context[i] != p.name) return false;
      i--;
    }
  }
  return true;
}
var BufferContext = /*#__PURE__*/_createClass(function BufferContext(parent, buffer, index, start) {
  _classCallCheck(this, BufferContext);
  this.parent = parent;
  this.buffer = buffer;
  this.index = index;
  this.start = start;
});
var BufferNode = /*#__PURE__*/function () {
  function BufferNode(context, _parent, index) {
    _classCallCheck(this, BufferNode);
    this.context = context;
    this._parent = _parent;
    this.index = index;
    this.type = context.buffer.set.types[context.buffer.buffer[index]];
  }
  _createClass(BufferNode, [{
    key: "name",
    get: function get() {
      return this.type.name;
    }
  }, {
    key: "from",
    get: function get() {
      return this.context.start + this.context.buffer.buffer[this.index + 1];
    }
  }, {
    key: "to",
    get: function get() {
      return this.context.start + this.context.buffer.buffer[this.index + 2];
    }
  }, {
    key: "child",
    value: function child(dir, pos, side) {
      var buffer = this.context.buffer;
      var index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
      return index < 0 ? null : new BufferNode(this.context, this, index);
    }
  }, {
    key: "firstChild",
    get: function get() {
      return this.child(1, 0, 4 /* Side.DontCare */);
    }
  }, {
    key: "lastChild",
    get: function get() {
      return this.child(-1, 0, 4 /* Side.DontCare */);
    }
  }, {
    key: "childAfter",
    value: function childAfter(pos) {
      return this.child(1, pos, 2 /* Side.After */);
    }
  }, {
    key: "childBefore",
    value: function childBefore(pos) {
      return this.child(-1, pos, -2 /* Side.Before */);
    }
  }, {
    key: "enter",
    value: function enter(pos, side) {
      var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      if (mode & IterMode.ExcludeBuffers) return null;
      var buffer = this.context.buffer;
      var index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
      return index < 0 ? null : new BufferNode(this.context, this, index);
    }
  }, {
    key: "parent",
    get: function get() {
      return this._parent || this.context.parent.nextSignificantParent();
    }
  }, {
    key: "externalSibling",
    value: function externalSibling(dir) {
      return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);
    }
  }, {
    key: "nextSibling",
    get: function get() {
      var buffer = this.context.buffer;
      var after = buffer.buffer[this.index + 3];
      if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length)) return new BufferNode(this.context, this._parent, after);
      return this.externalSibling(1);
    }
  }, {
    key: "prevSibling",
    get: function get() {
      var buffer = this.context.buffer;
      var parentStart = this._parent ? this._parent.index + 4 : 0;
      if (this.index == parentStart) return this.externalSibling(-1);
      return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
    }
  }, {
    key: "cursor",
    value: function cursor() {
      var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      return new TreeCursor(this, mode);
    }
  }, {
    key: "tree",
    get: function get() {
      return null;
    }
  }, {
    key: "toTree",
    value: function toTree() {
      var children = [],
        positions = [];
      var buffer = this.context.buffer;
      var startI = this.index + 4,
        endI = buffer.buffer[this.index + 3];
      if (endI > startI) {
        var from = buffer.buffer[this.index + 1];
        children.push(buffer.slice(startI, endI, from));
        positions.push(0);
      }
      return new Tree(this.type, children, positions, this.to - this.from);
    }
  }, {
    key: "resolve",
    value: function resolve(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return resolveNode(this, pos, side, false);
    }
  }, {
    key: "resolveInner",
    value: function resolveInner(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return resolveNode(this, pos, side, true);
    }
  }, {
    key: "enterUnfinishedNodesBefore",
    value: function enterUnfinishedNodesBefore(pos) {
      return _enterUnfinishedNodesBefore(this, pos);
    }
    /// @internal
  }, {
    key: "toString",
    value: function toString() {
      return this.context.buffer.childString(this.index);
    }
  }, {
    key: "getChild",
    value: function getChild(type) {
      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var r = _getChildren(this, type, before, after);
      return r.length ? r[0] : null;
    }
  }, {
    key: "getChildren",
    value: function getChildren(type) {
      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      return _getChildren(this, type, before, after);
    }
  }, {
    key: "node",
    get: function get() {
      return this;
    }
  }, {
    key: "matchContext",
    value: function matchContext(context) {
      return matchNodeContext(this, context);
    }
  }]);
  return BufferNode;
}(); /// A tree cursor object focuses on a given node in a syntax tree, and
/// allows you to move to adjacent nodes.
var TreeCursor = /*#__PURE__*/function () {
  /// @internal
  function TreeCursor(node) {
    var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    _classCallCheck(this, TreeCursor);
    this.mode = mode;
    /// @internal
    this.buffer = null;
    this.stack = [];
    /// @internal
    this.index = 0;
    this.bufferNode = null;
    if (node instanceof TreeNode) {
      this.yieldNode(node);
    } else {
      this._tree = node.context.parent;
      this.buffer = node.context;
      for (var n = node._parent; n; n = n._parent) this.stack.unshift(n.index);
      this.bufferNode = node;
      this.yieldBuf(node.index);
    }
  }
  _createClass(TreeCursor, [{
    key: "name",
    get:
    /// Shorthand for `.type.name`.
    function get() {
      return this.type.name;
    }
  }, {
    key: "yieldNode",
    value: function yieldNode(node) {
      if (!node) return false;
      this._tree = node;
      this.type = node.type;
      this.from = node.from;
      this.to = node.to;
      return true;
    }
  }, {
    key: "yieldBuf",
    value: function yieldBuf(index, type) {
      this.index = index;
      var _this$buffer = this.buffer,
        start = _this$buffer.start,
        buffer = _this$buffer.buffer;
      this.type = type || buffer.set.types[buffer.buffer[index]];
      this.from = start + buffer.buffer[index + 1];
      this.to = start + buffer.buffer[index + 2];
      return true;
    }
  }, {
    key: "yield",
    value: function _yield(node) {
      if (!node) return false;
      if (node instanceof TreeNode) {
        this.buffer = null;
        return this.yieldNode(node);
      }
      this.buffer = node.context;
      return this.yieldBuf(node.index, node.type);
    }
    /// @internal
  }, {
    key: "toString",
    value: function toString() {
      return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
    }
    /// @internal
  }, {
    key: "enterChild",
    value: function enterChild(dir, pos, side) {
      if (!this.buffer) return this["yield"](this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
      var buffer = this.buffer.buffer;
      var index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
      if (index < 0) return false;
      this.stack.push(this.index);
      return this.yieldBuf(index);
    }
    /// Move the cursor to this node's first child. When this returns
    /// false, the node has no child, and the cursor has not been moved.
  }, {
    key: "firstChild",
    value: function firstChild() {
      return this.enterChild(1, 0, 4 /* Side.DontCare */);
    }
    /// Move the cursor to this node's last child.
  }, {
    key: "lastChild",
    value: function lastChild() {
      return this.enterChild(-1, 0, 4 /* Side.DontCare */);
    }
    /// Move the cursor to the first child that ends after `pos`.
  }, {
    key: "childAfter",
    value: function childAfter(pos) {
      return this.enterChild(1, pos, 2 /* Side.After */);
    }
    /// Move to the last child that starts before `pos`.
  }, {
    key: "childBefore",
    value: function childBefore(pos) {
      return this.enterChild(-1, pos, -2 /* Side.Before */);
    }
    /// Move the cursor to the child around `pos`. If side is -1 the
    /// child may end at that position, when 1 it may start there. This
    /// will also enter [overlaid](#common.MountedTree.overlay)
    /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is
    /// set to false.
  }, {
    key: "enter",
    value: function enter(pos, side) {
      var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.mode;
      if (!this.buffer) return this["yield"](this._tree.enter(pos, side, mode));
      return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
    }
    /// Move to the node's parent node, if this isn't the top node.
  }, {
    key: "parent",
    value: function parent() {
      if (!this.buffer) return this.yieldNode(this.mode & IterMode.IncludeAnonymous ? this._tree._parent : this._tree.parent);
      if (this.stack.length) return this.yieldBuf(this.stack.pop());
      var parent = this.mode & IterMode.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
      this.buffer = null;
      return this.yieldNode(parent);
    }
    /// @internal
  }, {
    key: "sibling",
    value: function sibling(dir) {
      if (!this.buffer) return !this._tree._parent ? false : this["yield"](this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));
      var buffer = this.buffer.buffer,
        d = this.stack.length - 1;
      if (dir < 0) {
        var parentStart = d < 0 ? 0 : this.stack[d] + 4;
        if (this.index != parentStart) return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
      } else {
        var after = buffer.buffer[this.index + 3];
        if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3])) return this.yieldBuf(after);
      }
      return d < 0 ? this["yield"](this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;
    }
    /// Move to this node's next sibling, if any.
  }, {
    key: "nextSibling",
    value: function nextSibling() {
      return this.sibling(1);
    }
    /// Move to this node's previous sibling, if any.
  }, {
    key: "prevSibling",
    value: function prevSibling() {
      return this.sibling(-1);
    }
  }, {
    key: "atLastNode",
    value: function atLastNode(dir) {
      var index,
        parent,
        buffer = this.buffer;
      if (buffer) {
        if (dir > 0) {
          if (this.index < buffer.buffer.buffer.length) return false;
        } else {
          for (var i = 0; i < this.index; i++) if (buffer.buffer.buffer[i + 3] < this.index) return false;
        }
        index = buffer.index;
        parent = buffer.parent;
      } else {
        var _this$_tree = this._tree;
        index = _this$_tree.index;
        parent = _this$_tree._parent;
      }
      for (; parent; _parent3 = parent, index = _parent3.index, parent = _parent3._parent, _parent3) {
        var _parent3;
        if (index > -1) for (var _i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; _i != e; _i += dir) {
          var child = parent._tree.children[_i];
          if (this.mode & IterMode.IncludeAnonymous || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child)) return false;
        }
      }
      return true;
    }
  }, {
    key: "move",
    value: function move(dir, enter) {
      if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */)) return true;
      for (;;) {
        if (this.sibling(dir)) return true;
        if (this.atLastNode(dir) || !this.parent()) return false;
      }
    }
    /// Move to the next node in a
    /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
    /// traversal, going from a node to its first child or, if the
    /// current node is empty or `enter` is false, its next sibling or
    /// the next sibling of the first parent node that has one.
  }, {
    key: "next",
    value: function next() {
      var enter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      return this.move(1, enter);
    }
    /// Move to the next node in a last-to-first pre-order traveral. A
    /// node is followed by its last child or, if it has none, its
    /// previous sibling or the previous sibling of the first parent
    /// node that has one.
  }, {
    key: "prev",
    value: function prev() {
      var enter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      return this.move(-1, enter);
    }
    /// Move the cursor to the innermost node that covers `pos`. If
    /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,
    /// it will enter nodes that start at `pos`.
  }, {
    key: "moveTo",
    value: function moveTo(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      // Move up to a node that actually holds the position, if possible
      while (this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos)) if (!this.parent()) break;
      // Then scan down into child nodes as far as possible
      while (this.enterChild(1, pos, side)) {}
      return this;
    }
    /// Get a [syntax node](#common.SyntaxNode) at the cursor's current
    /// position.
  }, {
    key: "node",
    get: function get() {
      if (!this.buffer) return this._tree;
      var cache = this.bufferNode,
        result = null,
        depth = 0;
      if (cache && cache.context == this.buffer) {
        scan: for (var index = this.index, d = this.stack.length; d >= 0;) {
          for (var c = cache; c; c = c._parent) if (c.index == index) {
            if (index == this.index) return c;
            result = c;
            depth = d + 1;
            break scan;
          }
          index = this.stack[--d];
        }
      }
      for (var i = depth; i < this.stack.length; i++) result = new BufferNode(this.buffer, result, this.stack[i]);
      return this.bufferNode = new BufferNode(this.buffer, result, this.index);
    }
    /// Get the [tree](#common.Tree) that represents the current node, if
    /// any. Will return null when the node is in a [tree
    /// buffer](#common.TreeBuffer).
  }, {
    key: "tree",
    get: function get() {
      return this.buffer ? null : this._tree._tree;
    }
    /// Iterate over the current node and all its descendants, calling
    /// `enter` when entering a node and `leave`, if given, when leaving
    /// one. When `enter` returns `false`, any children of that node are
    /// skipped, and `leave` isn't called for it.
  }, {
    key: "iterate",
    value: function iterate(enter, leave) {
      for (var depth = 0;;) {
        var mustLeave = false;
        if (this.type.isAnonymous || enter(this) !== false) {
          if (this.firstChild()) {
            depth++;
            continue;
          }
          if (!this.type.isAnonymous) mustLeave = true;
        }
        for (;;) {
          if (mustLeave && leave) leave(this);
          mustLeave = this.type.isAnonymous;
          if (this.nextSibling()) break;
          if (!depth) return;
          this.parent();
          depth--;
          mustLeave = true;
        }
      }
    }
    /// Test whether the current node matches a given context—a sequence
    /// of direct parent node names. Empty strings in the context array
    /// are treated as wildcards.
  }, {
    key: "matchContext",
    value: function matchContext(context) {
      if (!this.buffer) return matchNodeContext(this.node, context);
      var buffer = this.buffer.buffer,
        types = buffer.set.types;
      for (var i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {
        if (d < 0) return matchNodeContext(this.node, context, i);
        var type = types[buffer.buffer[this.stack[d]]];
        if (!type.isAnonymous) {
          if (context[i] && context[i] != type.name) return false;
          i--;
        }
      }
      return true;
    }
  }]);
  return TreeCursor;
}();
function hasChild(tree) {
  return tree.children.some(function (ch) {
    return ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch);
  });
}
function buildTree(data) {
  var _a;
  var buffer = data.buffer,
    nodeSet = data.nodeSet,
    _data$maxBufferLength = data.maxBufferLength,
    maxBufferLength = _data$maxBufferLength === void 0 ? DefaultBufferLength : _data$maxBufferLength,
    _data$reused = data.reused,
    reused = _data$reused === void 0 ? [] : _data$reused,
    _data$minRepeatType = data.minRepeatType,
    minRepeatType = _data$minRepeatType === void 0 ? nodeSet.types.length : _data$minRepeatType;
  var cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
  var types = nodeSet.types;
  var contextHash = 0,
    lookAhead = 0;
  function takeNode(parentStart, minPos, children, positions, inRepeat) {
    var id = cursor.id,
      start = cursor.start,
      end = cursor.end,
      size = cursor.size;
    var lookAheadAtStart = lookAhead;
    while (size < 0) {
      cursor.next();
      if (size == -1 /* SpecialRecord.Reuse */) {
        var _node = reused[id];
        children.push(_node);
        positions.push(start - parentStart);
        return;
      } else if (size == -3 /* SpecialRecord.ContextChange */) {
        // Context change
        contextHash = id;
        return;
      } else if (size == -4 /* SpecialRecord.LookAhead */) {
        lookAhead = id;
        return;
      } else {
        throw new RangeError("Unrecognized record size: ".concat(size));
      }
    }
    var type = types[id],
      node,
      buffer;
    var startPos = start - parentStart;
    if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
      // Small enough for a buffer, and no reused nodes inside
      var _data = new Uint16Array(buffer.size - buffer.skip);
      var endPos = cursor.pos - buffer.size,
        index = _data.length;
      while (cursor.pos > endPos) index = copyToBuffer(buffer.start, _data, index);
      node = new TreeBuffer(_data, end - buffer.start, nodeSet);
      startPos = buffer.start - parentStart;
    } else {
      // Make it a node
      var _endPos = cursor.pos - size;
      cursor.next();
      var localChildren = [],
        localPositions = [];
      var localInRepeat = id >= minRepeatType ? id : -1;
      var lastGroup = 0,
        lastEnd = end;
      while (cursor.pos > _endPos) {
        if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
          if (cursor.end <= lastEnd - maxBufferLength) {
            makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);
            lastGroup = localChildren.length;
            lastEnd = cursor.end;
          }
          cursor.next();
        } else {
          takeNode(start, _endPos, localChildren, localPositions, localInRepeat);
        }
      }
      if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length) makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);
      localChildren.reverse();
      localPositions.reverse();
      if (localInRepeat > -1 && lastGroup > 0) {
        var make = makeBalanced(type);
        node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
      } else {
        node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);
      }
    }
    children.push(node);
    positions.push(startPos);
  }
  function makeBalanced(type) {
    return function (children, positions, length) {
      var lookAhead = 0,
        lastI = children.length - 1,
        last,
        lookAheadProp;
      if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {
        if (!lastI && last.type == type && last.length == length) return last;
        if (lookAheadProp = last.prop(NodeProp.lookAhead)) lookAhead = positions[lastI] + last.length + lookAheadProp;
      }
      return makeTree(type, children, positions, length, lookAhead);
    };
  }
  function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {
    var localChildren = [],
      localPositions = [];
    while (children.length > i) {
      localChildren.push(children.pop());
      localPositions.push(positions.pop() + base - from);
    }
    children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));
    positions.push(from - base);
  }
  function makeTree(type, children, positions, length) {
    var lookAhead = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
    var props = arguments.length > 5 ? arguments[5] : undefined;
    if (contextHash) {
      var pair = [NodeProp.contextHash, contextHash];
      props = props ? [pair].concat(props) : [pair];
    }
    if (lookAhead > 25) {
      var _pair = [NodeProp.lookAhead, lookAhead];
      props = props ? [_pair].concat(props) : [_pair];
    }
    return new Tree(type, children, positions, length, props);
  }
  function findBufferSize(maxSize, inRepeat) {
    // Scan through the buffer to find previous siblings that fit
    // together in a TreeBuffer, and don't contain any reused nodes
    // (which can't be stored in a buffer).
    // If `inRepeat` is > -1, ignore node boundaries of that type for
    // nesting, but make sure the end falls either at the start
    // (`maxSize`) or before such a node.
    var fork = cursor.fork();
    var size = 0,
      start = 0,
      skip = 0,
      minStart = fork.end - maxBufferLength;
    var result = {
      size: 0,
      start: 0,
      skip: 0
    };
    scan: for (var minPos = fork.pos - maxSize; fork.pos > minPos;) {
      var _nodeSize = fork.size;
      // Pretend nested repeat nodes of the same type don't exist
      if (fork.id == inRepeat && _nodeSize >= 0) {
        // Except that we store the current state as a valid return
        // value.
        result.size = size;
        result.start = start;
        result.skip = skip;
        skip += 4;
        size += 4;
        fork.next();
        continue;
      }
      var startPos = fork.pos - _nodeSize;
      if (_nodeSize < 0 || startPos < minPos || fork.start < minStart) break;
      var localSkipped = fork.id >= minRepeatType ? 4 : 0;
      var nodeStart = fork.start;
      fork.next();
      while (fork.pos > startPos) {
        if (fork.size < 0) {
          if (fork.size == -3 /* SpecialRecord.ContextChange */) localSkipped += 4;else break scan;
        } else if (fork.id >= minRepeatType) {
          localSkipped += 4;
        }
        fork.next();
      }
      start = nodeStart;
      size += _nodeSize;
      skip += localSkipped;
    }
    if (inRepeat < 0 || size == maxSize) {
      result.size = size;
      result.start = start;
      result.skip = skip;
    }
    return result.size > 4 ? result : undefined;
  }
  function copyToBuffer(bufferStart, buffer, index) {
    var id = cursor.id,
      start = cursor.start,
      end = cursor.end,
      size = cursor.size;
    cursor.next();
    if (size >= 0 && id < minRepeatType) {
      var startIndex = index;
      if (size > 4) {
        var endPos = cursor.pos - (size - 4);
        while (cursor.pos > endPos) index = copyToBuffer(bufferStart, buffer, index);
      }
      buffer[--index] = startIndex;
      buffer[--index] = end - bufferStart;
      buffer[--index] = start - bufferStart;
      buffer[--index] = id;
    } else if (size == -3 /* SpecialRecord.ContextChange */) {
      contextHash = id;
    } else if (size == -4 /* SpecialRecord.LookAhead */) {
      lookAhead = id;
    }
    return index;
  }
  var children = [],
    positions = [];
  while (cursor.pos > 0) takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);
  var length = (_a = data.length) !== null && _a !== void 0 ? _a : children.length ? positions[0] + children[0].length : 0;
  return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);
}
var nodeSizeCache = new WeakMap();
function nodeSize(balanceType, node) {
  if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType) return 1;
  var size = nodeSizeCache.get(node);
  if (size == null) {
    size = 1;
    var _iterator8 = _createForOfIteratorHelper(node.children),
      _step8;
    try {
      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
        var child = _step8.value;
        if (child.type != balanceType || !(child instanceof Tree)) {
          size = 1;
          break;
        }
        size += nodeSize(balanceType, child);
      }
    } catch (err) {
      _iterator8.e(err);
    } finally {
      _iterator8.f();
    }
    nodeSizeCache.set(node, size);
  }
  return size;
}
function balanceRange(
// The type the balanced tree's inner nodes.
balanceType,
// The direct children and their positions
children, positions,
// The index range in children/positions to use
from, to,
// The start position of the nodes, relative to their parent.
start,
// Length of the outer node
length,
// Function to build the top node of the balanced tree
mkTop,
// Function to build internal nodes for the balanced tree
mkTree) {
  var total = 0;
  for (var i = from; i < to; i++) total += nodeSize(balanceType, children[i]);
  var maxChild = Math.ceil(total * 1.5 / 8 /* Balance.BranchFactor */);
  var localChildren = [],
    localPositions = [];
  function divide(children, positions, from, to, offset) {
    for (var _i2 = from; _i2 < to;) {
      var groupFrom = _i2,
        groupStart = positions[_i2],
        groupSize = nodeSize(balanceType, children[_i2]);
      _i2++;
      for (; _i2 < to; _i2++) {
        var nextSize = nodeSize(balanceType, children[_i2]);
        if (groupSize + nextSize >= maxChild) break;
        groupSize += nextSize;
      }
      if (_i2 == groupFrom + 1) {
        if (groupSize > maxChild) {
          var only = children[groupFrom]; // Only trees can have a size > 1
          divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);
          continue;
        }
        localChildren.push(children[groupFrom]);
      } else {
        var _length = positions[_i2 - 1] + children[_i2 - 1].length - groupStart;
        localChildren.push(balanceRange(balanceType, children, positions, groupFrom, _i2, groupStart, _length, null, mkTree));
      }
      localPositions.push(groupStart + offset - start);
    }
  }
  divide(children, positions, from, to, 0);
  return (mkTop || mkTree)(localChildren, localPositions, length);
}
/// Provides a way to associate values with pieces of trees. As long
/// as that part of the tree is reused, the associated values can be
/// retrieved from an updated tree.
var NodeWeakMap = /*#__PURE__*/function () {
  function NodeWeakMap() {
    _classCallCheck(this, NodeWeakMap);
    this.map = new WeakMap();
  }
  _createClass(NodeWeakMap, [{
    key: "setBuffer",
    value: function setBuffer(buffer, index, value) {
      var inner = this.map.get(buffer);
      if (!inner) this.map.set(buffer, inner = new Map());
      inner.set(index, value);
    }
  }, {
    key: "getBuffer",
    value: function getBuffer(buffer, index) {
      var inner = this.map.get(buffer);
      return inner && inner.get(index);
    }
    /// Set the value for this syntax node.
  }, {
    key: "set",
    value: function set(node, value) {
      if (node instanceof BufferNode) this.setBuffer(node.context.buffer, node.index, value);else if (node instanceof TreeNode) this.map.set(node.tree, value);
    }
    /// Retrieve value for this syntax node, if it exists in the map.
  }, {
    key: "get",
    value: function get(node) {
      return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index) : node instanceof TreeNode ? this.map.get(node.tree) : undefined;
    }
    /// Set the value for the node that a cursor currently points to.
  }, {
    key: "cursorSet",
    value: function cursorSet(cursor, value) {
      if (cursor.buffer) this.setBuffer(cursor.buffer.buffer, cursor.index, value);else this.map.set(cursor.tree, value);
    }
    /// Retrieve the value for the node that a cursor currently points
    /// to.
  }, {
    key: "cursorGet",
    value: function cursorGet(cursor) {
      return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);
    }
  }]);
  return NodeWeakMap;
}(); /// Tree fragments are used during [incremental
/// parsing](#common.Parser.startParse) to track parts of old trees
/// that can be reused in a new parse. An array of fragments is used
/// to track regions of an old tree whose nodes might be reused in new
/// parses. Use the static
/// [`applyChanges`](#common.TreeFragment^applyChanges) method to
/// update fragments for document changes.
var TreeFragment = /*#__PURE__*/function () {
  /// Construct a tree fragment. You'll usually want to use
  /// [`addTree`](#common.TreeFragment^addTree) and
  /// [`applyChanges`](#common.TreeFragment^applyChanges) instead of
  /// calling this directly.
  function TreeFragment(
  /// The start of the unchanged range pointed to by this fragment.
  /// This refers to an offset in the _updated_ document (as opposed
  /// to the original tree).
  from,
  /// The end of the unchanged range.
  to,
  /// The tree that this fragment is based on.
  tree,
  /// The offset between the fragment's tree and the document that
  /// this fragment can be used against. Add this when going from
  /// document to tree positions, subtract it to go from tree to
  /// document positions.
  offset) {
    var openStart = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    var openEnd = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
    _classCallCheck(this, TreeFragment);
    this.from = from;
    this.to = to;
    this.tree = tree;
    this.offset = offset;
    this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);
  }
  /// Whether the start of the fragment represents the start of a
  /// parse, or the end of a change. (In the second case, it may not
  /// be safe to reuse some nodes at the start, depending on the
  /// parsing algorithm.)
  _createClass(TreeFragment, [{
    key: "openStart",
    get: function get() {
      return (this.open & 1 /* Open.Start */) > 0;
    }
    /// Whether the end of the fragment represents the end of a
    /// full-document parse, or the start of a change.
  }, {
    key: "openEnd",
    get: function get() {
      return (this.open & 2 /* Open.End */) > 0;
    }
    /// Create a set of fragments from a freshly parsed tree, or update
    /// an existing set of fragments by replacing the ones that overlap
    /// with a tree with content from the new tree. When `partial` is
    /// true, the parse is treated as incomplete, and the resulting
    /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
    /// true.
  }], [{
    key: "addTree",
    value: function addTree(tree) {
      var fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var partial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
      var _iterator9 = _createForOfIteratorHelper(fragments),
        _step9;
      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var f = _step9.value;
          if (f.to > tree.length) result.push(f);
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
      return result;
    }
    /// Apply a set of edits to an array of fragments, removing or
    /// splitting fragments as necessary to remove edited ranges, and
    /// adjusting offsets for fragments that moved.
  }, {
    key: "applyChanges",
    value: function applyChanges(fragments, changes) {
      var minGap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 128;
      if (!changes.length) return fragments;
      var result = [];
      var fI = 1,
        nextF = fragments.length ? fragments[0] : null;
      for (var cI = 0, pos = 0, off = 0;; cI++) {
        var nextC = cI < changes.length ? changes[cI] : null;
        var nextPos = nextC ? nextC.fromA : 1e9;
        if (nextPos - pos >= minGap) while (nextF && nextF.from < nextPos) {
          var cut = nextF;
          if (pos >= cut.from || nextPos <= cut.to || off) {
            var fFrom = Math.max(cut.from, pos) - off,
              fTo = Math.min(cut.to, nextPos) - off;
            cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
          }
          if (cut) result.push(cut);
          if (nextF.to > nextPos) break;
          nextF = fI < fragments.length ? fragments[fI++] : null;
        }
        if (!nextC) break;
        pos = nextC.toA;
        off = nextC.toA - nextC.toB;
      }
      return result;
    }
  }]);
  return TreeFragment;
}(); /// A superclass that parsers should extend.
var Parser = /*#__PURE__*/function () {
  function Parser() {
    _classCallCheck(this, Parser);
  }
  _createClass(Parser, [{
    key: "startParse",
    value:
    /// Start a parse, returning a [partial parse](#common.PartialParse)
    /// object. [`fragments`](#common.TreeFragment) can be passed in to
    /// make the parse incremental.
    ///
    /// By default, the entire input is parsed. You can pass `ranges`,
    /// which should be a sorted array of non-empty, non-overlapping
    /// ranges, to parse only those ranges. The tree returned in that
    /// case will start at `ranges[0].from`.
    function startParse(input, fragments, ranges) {
      if (typeof input == "string") input = new StringInput(input);
      ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(function (r) {
        return new Range(r.from, r.to);
      }) : [new Range(0, 0)];
      return this.createParse(input, fragments || [], ranges);
    }
    /// Run a full parse, returning the resulting tree.
  }, {
    key: "parse",
    value: function parse(input, fragments, ranges) {
      var parse = this.startParse(input, fragments, ranges);
      for (;;) {
        var done = parse.advance();
        if (done) return done;
      }
    }
  }]);
  return Parser;
}();
var StringInput = /*#__PURE__*/function () {
  function StringInput(string) {
    _classCallCheck(this, StringInput);
    this.string = string;
  }
  _createClass(StringInput, [{
    key: "length",
    get: function get() {
      return this.string.length;
    }
  }, {
    key: "chunk",
    value: function chunk(from) {
      return this.string.slice(from);
    }
  }, {
    key: "lineChunks",
    get: function get() {
      return false;
    }
  }, {
    key: "read",
    value: function read(from, to) {
      return this.string.slice(from, to);
    }
  }]);
  return StringInput;
}(); /// Create a parse wrapper that, after the inner parse completes,
new NodeProp({
  perNode: true
});

var nextTagID = 0;
/**
Highlighting tags are markers that denote a highlighting category.
They are [associated](#highlight.styleTags) with parts of a syntax
tree by a language mode, and then mapped to an actual CSS style by
a [highlighter](#highlight.Highlighter).

Because syntax tree node types and highlight styles have to be
able to talk the same language, CodeMirror uses a mostly _closed_
[vocabulary](#highlight.tags) of syntax tags (as opposed to
traditional open string-based systems, which make it hard for
highlighting themes to cover all the tokens produced by the
various languages).

It _is_ possible to [define](#highlight.Tag^define) your own
highlighting tags for system-internal use (where you control both
the language package and the highlighter), but such tags will not
be picked up by regular highlighters (though you can derive them
from standard tags to allow highlighters to fall back to those).
*/
var Tag = /*#__PURE__*/function () {
  /**
  @internal
  */
  function Tag(
  /**
  The set of this tag and all its parent tags, starting with
  this one itself and sorted in order of decreasing specificity.
  */
  set,
  /**
  The base unmodified tag that this one is based on, if it's
  modified @internal
  */
  base,
  /**
  The modifiers applied to this.base @internal
  */
  modified) {
    _classCallCheck(this, Tag);
    this.set = set;
    this.base = base;
    this.modified = modified;
    /**
    @internal
    */
    this.id = nextTagID++;
  }
  /**
  Define a new tag. If `parent` is given, the tag is treated as a
  sub-tag of that parent, and
  [highlighters](#highlight.tagHighlighter) that don't mention
  this tag will try to fall back to the parent tag (or grandparent
  tag, etc).
  */
  _createClass(Tag, null, [{
    key: "define",
    value: function define(parent) {
      if (parent === null || parent === void 0 ? void 0 : parent.base) throw new Error("Can not derive from a modified tag");
      var tag = new Tag([], null, []);
      tag.set.push(tag);
      if (parent) {
        var _iterator = _createForOfIteratorHelper(parent.set),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _t = _step.value;
            tag.set.push(_t);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      return tag;
    }
    /**
    Define a tag _modifier_, which is a function that, given a tag,
    will return a tag that is a subtag of the original. Applying the
    same modifier to a twice tag will return the same value (`m1(t1)
    == m1(t1)`) and applying multiple modifiers will, regardless or
    order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
    
    When multiple modifiers are applied to a given base tag, each
    smaller set of modifiers is registered as a parent, so that for
    example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
    `m1(m3(t1)`, and so on.
    */
  }, {
    key: "defineModifier",
    value: function defineModifier() {
      var mod = new Modifier();
      return function (tag) {
        if (tag.modified.indexOf(mod) > -1) return tag;
        return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort(function (a, b) {
          return a.id - b.id;
        }));
      };
    }
  }]);
  return Tag;
}();
var nextModifierID = 0;
var Modifier = /*#__PURE__*/function () {
  function Modifier() {
    _classCallCheck(this, Modifier);
    this.instances = [];
    this.id = nextModifierID++;
  }
  _createClass(Modifier, null, [{
    key: "get",
    value: function get(base, mods) {
      if (!mods.length) return base;
      var exists = mods[0].instances.find(function (t) {
        return t.base == base && sameArray(mods, t.modified);
      });
      if (exists) return exists;
      var set = [],
        tag = new Tag(set, base, mods);
      var _iterator2 = _createForOfIteratorHelper(mods),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var m = _step2.value;
          m.instances.push(tag);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      var configs = powerSet(mods);
      var _iterator3 = _createForOfIteratorHelper(base.set),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var parent = _step3.value;
          if (!parent.modified.length) {
            var _iterator4 = _createForOfIteratorHelper(configs),
              _step4;
            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var config = _step4.value;
                set.push(Modifier.get(parent, config));
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return tag;
    }
  }]);
  return Modifier;
}();
function sameArray(a, b) {
  return a.length == b.length && a.every(function (x, i) {
    return x == b[i];
  });
}
function powerSet(array) {
  var sets = [[]];
  for (var i = 0; i < array.length; i++) {
    for (var j = 0, e = sets.length; j < e; j++) {
      sets.push(sets[j].concat(array[i]));
    }
  }
  return sets.sort(function (a, b) {
    return b.length - a.length;
  });
}
/**
This function is used to add a set of tags to a language syntax
via [`NodeSet.extend`](#common.NodeSet.extend) or
[`LRParser.configure`](#lr.LRParser.configure).

The argument object maps node selectors to [highlighting
tags](#highlight.Tag) or arrays of tags.

Node selectors may hold one or more (space-separated) node paths.
Such a path can be a [node name](#common.NodeType.name), or
multiple node names (or `*` wildcards) separated by slash
characters, as in `"Block/Declaration/VariableName"`. Such a path
matches the final node but only if its direct parent nodes are the
other nodes mentioned. A `*` in such a path matches any parent,
but only a single level—wildcards that match multiple parents
aren't supported, both for efficiency reasons and because Lezer
trees make it rather hard to reason about what they would match.)

A path can be ended with `/...` to indicate that the tag assigned
to the node should also apply to all child nodes, even if they
match their own style (by default, only the innermost style is
used).

When a path ends in `!`, as in `Attribute!`, no further matching
happens for the node's child nodes, and the entire node gets the
given style.

In this notation, node names that contain `/`, `!`, `*`, or `...`
must be quoted as JSON strings.

For example:

```javascript
parser.withProps(
  styleTags({
    // Style Number and BigNumber nodes
    "Number BigNumber": tags.number,
    // Style Escape nodes whose parent is String
    "String/Escape": tags.escape,
    // Style anything inside Attributes nodes
    "Attributes!": tags.meta,
    // Add a style to all content inside Italic nodes
    "Italic/...": tags.emphasis,
    // Style InvalidString nodes as both `string` and `invalid`
    "InvalidString": [tags.string, tags.invalid],
    // Style the node named "/" as punctuation
    '"/"': tags.punctuation
  })
)
```
*/
function styleTags(spec) {
  var byName = Object.create(null);
  for (var prop in spec) {
    var _tags = spec[prop];
    if (!Array.isArray(_tags)) _tags = [_tags];
    var _iterator5 = _createForOfIteratorHelper(prop.split(" ")),
      _step5;
    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var part = _step5.value;
        if (part) {
          var pieces = [],
            mode = 2 /* Normal */,
            rest = part;
          for (var pos = 0;;) {
            if (rest == "..." && pos > 0 && pos + 3 == part.length) {
              mode = 1 /* Inherit */;
              break;
            }
            var m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
            if (!m) throw new RangeError("Invalid path: " + part);
            pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
            pos += m[0].length;
            if (pos == part.length) break;
            var next = part[pos++];
            if (pos == part.length && next == "!") {
              mode = 0 /* Opaque */;
              break;
            }
            if (next != "/") throw new RangeError("Invalid path: " + part);
            rest = part.slice(pos);
          }
          var last = pieces.length - 1,
            inner = pieces[last];
          if (!inner) throw new RangeError("Invalid path: " + part);
          var rule = new Rule(_tags, mode, last > 0 ? pieces.slice(0, last) : null);
          byName[inner] = rule.sort(byName[inner]);
        }
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
  }
  return ruleNodeProp.add(byName);
}
var ruleNodeProp = new NodeProp();
var Rule = /*#__PURE__*/function () {
  function Rule(tags, mode, context, next) {
    _classCallCheck(this, Rule);
    this.tags = tags;
    this.mode = mode;
    this.context = context;
    this.next = next;
  }
  _createClass(Rule, [{
    key: "opaque",
    get: function get() {
      return this.mode == 0 /* Opaque */;
    }
  }, {
    key: "inherit",
    get: function get() {
      return this.mode == 1 /* Inherit */;
    }
  }, {
    key: "sort",
    value: function sort(other) {
      if (!other || other.depth < this.depth) {
        this.next = other;
        return this;
      }
      other.next = this.sort(other.next);
      return other;
    }
  }, {
    key: "depth",
    get: function get() {
      return this.context ? this.context.length : 0;
    }
  }]);
  return Rule;
}();
Rule.empty = new Rule([], 2 /* Normal */, null);
/**
Define a [highlighter](#highlight.Highlighter) from an array of
tag/class pairs. Classes associated with more specific tags will
take precedence.
*/
function tagHighlighter(tags, options) {
  var map = Object.create(null);
  var _iterator6 = _createForOfIteratorHelper(tags),
    _step6;
  try {
    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
      var style = _step6.value;
      if (!Array.isArray(style.tag)) map[style.tag.id] = style["class"];else {
        var _iterator9 = _createForOfIteratorHelper(style.tag),
          _step9;
        try {
          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
            var tag = _step9.value;
            map[tag.id] = style["class"];
          }
        } catch (err) {
          _iterator9.e(err);
        } finally {
          _iterator9.f();
        }
      }
    }
  } catch (err) {
    _iterator6.e(err);
  } finally {
    _iterator6.f();
  }
  var _ref = options || {},
    scope = _ref.scope,
    _ref$all = _ref.all,
    all = _ref$all === void 0 ? null : _ref$all;
  return {
    style: function style(tags) {
      var cls = all;
      var _iterator7 = _createForOfIteratorHelper(tags),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var tag = _step7.value;
          var _iterator8 = _createForOfIteratorHelper(tag.set),
            _step8;
          try {
            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
              var sub = _step8.value;
              var tagClass = map[sub.id];
              if (tagClass) {
                cls = cls ? cls + " " + tagClass : tagClass;
                break;
              }
            }
          } catch (err) {
            _iterator8.e(err);
          } finally {
            _iterator8.f();
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      return cls;
    },
    scope: scope
  };
}
function highlightTags(highlighters, tags) {
  var result = null;
  var _iterator10 = _createForOfIteratorHelper(highlighters),
    _step10;
  try {
    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
      var highlighter = _step10.value;
      var value = highlighter.style(tags);
      if (value) result = result ? result + " " + value : value;
    }
  } catch (err) {
    _iterator10.e(err);
  } finally {
    _iterator10.f();
  }
  return result;
}
/**
Highlight the given [tree](#common.Tree) with the given
[highlighter](#highlight.Highlighter).
*/
function highlightTree(tree, highlighter,
/**
Assign styling to a region of the text. Will be called, in order
of position, for any ranges where more than zero classes apply.
`classes` is a space separated string of CSS classes.
*/
putStyle) {
  var from = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var to = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : tree.length;
  var builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
  builder.highlightRange(tree.cursor(), from, to, "", builder.highlighters);
  builder.flush(to);
}
var HighlightBuilder = /*#__PURE__*/function () {
  function HighlightBuilder(at, highlighters, span) {
    _classCallCheck(this, HighlightBuilder);
    this.at = at;
    this.highlighters = highlighters;
    this.span = span;
    this["class"] = "";
  }
  _createClass(HighlightBuilder, [{
    key: "startSpan",
    value: function startSpan(at, cls) {
      if (cls != this["class"]) {
        this.flush(at);
        if (at > this.at) this.at = at;
        this["class"] = cls;
      }
    }
  }, {
    key: "flush",
    value: function flush(to) {
      if (to > this.at && this["class"]) this.span(this.at, to, this["class"]);
    }
  }, {
    key: "highlightRange",
    value: function highlightRange(cursor, from, to, inheritedClass, highlighters) {
      var type = cursor.type,
        start = cursor.from,
        end = cursor.to;
      if (start >= to || end <= from) return;
      if (type.isTop) highlighters = this.highlighters.filter(function (h) {
        return !h.scope || h.scope(type);
      });
      var cls = inheritedClass;
      var rule = getStyleTags(cursor) || Rule.empty;
      var tagCls = highlightTags(highlighters, rule.tags);
      if (tagCls) {
        if (cls) cls += " ";
        cls += tagCls;
        if (rule.mode == 1 /* Inherit */) inheritedClass += (inheritedClass ? " " : "") + tagCls;
      }
      this.startSpan(Math.max(from, start), cls);
      if (rule.opaque) return;
      var mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
      if (mounted && mounted.overlay) {
        var inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
        var innerHighlighters = this.highlighters.filter(function (h) {
          return !h.scope || h.scope(mounted.tree.type);
        });
        var hasChild = cursor.firstChild();
        for (var i = 0, pos = start;; i++) {
          var next = i < mounted.overlay.length ? mounted.overlay[i] : null;
          var nextPos = next ? next.from + start : end;
          var rangeFrom = Math.max(from, pos),
            rangeTo = Math.min(to, nextPos);
          if (rangeFrom < rangeTo && hasChild) {
            while (cursor.from < rangeTo) {
              this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);
              this.startSpan(Math.min(rangeTo, cursor.to), cls);
              if (cursor.to >= nextPos || !cursor.nextSibling()) break;
            }
          }
          if (!next || nextPos > to) break;
          pos = next.to + start;
          if (pos > from) {
            this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), "", innerHighlighters);
            this.startSpan(Math.min(to, pos), cls);
          }
        }
        if (hasChild) cursor.parent();
      } else if (cursor.firstChild()) {
        if (mounted) inheritedClass = "";
        do {
          if (cursor.to <= from) continue;
          if (cursor.from >= to) break;
          this.highlightRange(cursor, from, to, inheritedClass, highlighters);
          this.startSpan(Math.min(to, cursor.to), cls);
        } while (cursor.nextSibling());
        cursor.parent();
      }
    }
  }]);
  return HighlightBuilder;
}();
/**
Match a syntax node's [highlight rules](#highlight.styleTags). If
there's a match, return its set of tags, and whether it is
opaque (uses a `!`) or applies to all child nodes (`/...`).
*/
function getStyleTags(node) {
  var rule = node.type.prop(ruleNodeProp);
  while (rule && rule.context && !node.matchContext(rule.context)) rule = rule.next;
  return rule || null;
}
var t = Tag.define;
var comment = t(),
  name$1 = t(),
  typeName = t(name$1),
  propertyName = t(name$1),
  literal = t(),
  string = t(literal),
  number = t(literal),
  content = t(),
  heading = t(content),
  keyword = t(),
  operator = t(),
  punctuation = t(),
  bracket = t(punctuation),
  meta = t();
/**
The default set of highlighting [tags](#highlight.Tag).

This collection is heavily biased towards programming languages,
and necessarily incomplete. A full ontology of syntactic
constructs would fill a stack of books, and be impractical to
write themes for. So try to make do with this set. If all else
fails, [open an
issue](https://github.com/codemirror/codemirror.next) to propose a
new tag, or [define](#highlight.Tag^define) a local custom tag for
your use case.

Note that it is not obligatory to always attach the most specific
tag possible to an element—if your grammar can't easily
distinguish a certain type of element (such as a local variable),
it is okay to style it as its more general variant (a variable).

For tags that extend some parent tag, the documentation links to
the parent.
*/
var tags = {
  /**
  A comment.
  */
  comment: comment,
  /**
  A line [comment](#highlight.tags.comment).
  */
  lineComment: t(comment),
  /**
  A block [comment](#highlight.tags.comment).
  */
  blockComment: t(comment),
  /**
  A documentation [comment](#highlight.tags.comment).
  */
  docComment: t(comment),
  /**
  Any kind of identifier.
  */
  name: name$1,
  /**
  The [name](#highlight.tags.name) of a variable.
  */
  variableName: t(name$1),
  /**
  A type [name](#highlight.tags.name).
  */
  typeName: typeName,
  /**
  A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
  */
  tagName: t(typeName),
  /**
  A property or field [name](#highlight.tags.name).
  */
  propertyName: propertyName,
  /**
  An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
  */
  attributeName: t(propertyName),
  /**
  The [name](#highlight.tags.name) of a class.
  */
  className: t(name$1),
  /**
  A label [name](#highlight.tags.name).
  */
  labelName: t(name$1),
  /**
  A namespace [name](#highlight.tags.name).
  */
  namespace: t(name$1),
  /**
  The [name](#highlight.tags.name) of a macro.
  */
  macroName: t(name$1),
  /**
  A literal value.
  */
  literal: literal,
  /**
  A string [literal](#highlight.tags.literal).
  */
  string: string,
  /**
  A documentation [string](#highlight.tags.string).
  */
  docString: t(string),
  /**
  A character literal (subtag of [string](#highlight.tags.string)).
  */
  character: t(string),
  /**
  An attribute value (subtag of [string](#highlight.tags.string)).
  */
  attributeValue: t(string),
  /**
  A number [literal](#highlight.tags.literal).
  */
  number: number,
  /**
  An integer [number](#highlight.tags.number) literal.
  */
  integer: t(number),
  /**
  A floating-point [number](#highlight.tags.number) literal.
  */
  "float": t(number),
  /**
  A boolean [literal](#highlight.tags.literal).
  */
  bool: t(literal),
  /**
  Regular expression [literal](#highlight.tags.literal).
  */
  regexp: t(literal),
  /**
  An escape [literal](#highlight.tags.literal), for example a
  backslash escape in a string.
  */
  escape: t(literal),
  /**
  A color [literal](#highlight.tags.literal).
  */
  color: t(literal),
  /**
  A URL [literal](#highlight.tags.literal).
  */
  url: t(literal),
  /**
  A language keyword.
  */
  keyword: keyword,
  /**
  The [keyword](#highlight.tags.keyword) for the self or this
  object.
  */
  self: t(keyword),
  /**
  The [keyword](#highlight.tags.keyword) for null.
  */
  "null": t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) denoting some atomic value.
  */
  atom: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) that represents a unit.
  */
  unit: t(keyword),
  /**
  A modifier [keyword](#highlight.tags.keyword).
  */
  modifier: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) that acts as an operator.
  */
  operatorKeyword: t(keyword),
  /**
  A control-flow related [keyword](#highlight.tags.keyword).
  */
  controlKeyword: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) that defines something.
  */
  definitionKeyword: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) related to defining or
  interfacing with modules.
  */
  moduleKeyword: t(keyword),
  /**
  An operator.
  */
  operator: operator,
  /**
  An [operator](#highlight.tags.operator) that dereferences something.
  */
  derefOperator: t(operator),
  /**
  Arithmetic-related [operator](#highlight.tags.operator).
  */
  arithmeticOperator: t(operator),
  /**
  Logical [operator](#highlight.tags.operator).
  */
  logicOperator: t(operator),
  /**
  Bit [operator](#highlight.tags.operator).
  */
  bitwiseOperator: t(operator),
  /**
  Comparison [operator](#highlight.tags.operator).
  */
  compareOperator: t(operator),
  /**
  [Operator](#highlight.tags.operator) that updates its operand.
  */
  updateOperator: t(operator),
  /**
  [Operator](#highlight.tags.operator) that defines something.
  */
  definitionOperator: t(operator),
  /**
  Type-related [operator](#highlight.tags.operator).
  */
  typeOperator: t(operator),
  /**
  Control-flow [operator](#highlight.tags.operator).
  */
  controlOperator: t(operator),
  /**
  Program or markup punctuation.
  */
  punctuation: punctuation,
  /**
  [Punctuation](#highlight.tags.punctuation) that separates
  things.
  */
  separator: t(punctuation),
  /**
  Bracket-style [punctuation](#highlight.tags.punctuation).
  */
  bracket: bracket,
  /**
  Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
  tokens).
  */
  angleBracket: t(bracket),
  /**
  Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
  tokens).
  */
  squareBracket: t(bracket),
  /**
  Parentheses (usually `(` and `)` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  paren: t(bracket),
  /**
  Braces (usually `{` and `}` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  brace: t(bracket),
  /**
  Content, for example plain text in XML or markup documents.
  */
  content: content,
  /**
  [Content](#highlight.tags.content) that represents a heading.
  */
  heading: heading,
  /**
  A level 1 [heading](#highlight.tags.heading).
  */
  heading1: t(heading),
  /**
  A level 2 [heading](#highlight.tags.heading).
  */
  heading2: t(heading),
  /**
  A level 3 [heading](#highlight.tags.heading).
  */
  heading3: t(heading),
  /**
  A level 4 [heading](#highlight.tags.heading).
  */
  heading4: t(heading),
  /**
  A level 5 [heading](#highlight.tags.heading).
  */
  heading5: t(heading),
  /**
  A level 6 [heading](#highlight.tags.heading).
  */
  heading6: t(heading),
  /**
  A prose separator (such as a horizontal rule).
  */
  contentSeparator: t(content),
  /**
  [Content](#highlight.tags.content) that represents a list.
  */
  list: t(content),
  /**
  [Content](#highlight.tags.content) that represents a quote.
  */
  quote: t(content),
  /**
  [Content](#highlight.tags.content) that is emphasized.
  */
  emphasis: t(content),
  /**
  [Content](#highlight.tags.content) that is styled strong.
  */
  strong: t(content),
  /**
  [Content](#highlight.tags.content) that is part of a link.
  */
  link: t(content),
  /**
  [Content](#highlight.tags.content) that is styled as code or
  monospace.
  */
  monospace: t(content),
  /**
  [Content](#highlight.tags.content) that has a strike-through
  style.
  */
  strikethrough: t(content),
  /**
  Inserted text in a change-tracking format.
  */
  inserted: t(),
  /**
  Deleted text.
  */
  deleted: t(),
  /**
  Changed text.
  */
  changed: t(),
  /**
  An invalid or unsyntactic element.
  */
  invalid: t(),
  /**
  Metadata or meta-instruction.
  */
  meta: meta,
  /**
  [Metadata](#highlight.tags.meta) that applies to the entire
  document.
  */
  documentMeta: t(meta),
  /**
  [Metadata](#highlight.tags.meta) that annotates or adds
  attributes to a given syntactic element.
  */
  annotation: t(meta),
  /**
  Processing instruction or preprocessor directive. Subtag of
  [meta](#highlight.tags.meta).
  */
  processingInstruction: t(meta),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that a
  given element is being defined. Expected to be used with the
  various [name](#highlight.tags.name) tags.
  */
  definition: Tag.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that
  something is constant. Mostly expected to be used with
  [variable names](#highlight.tags.variableName).
  */
  constant: Tag.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) used to indicate that
  a [variable](#highlight.tags.variableName) or [property
  name](#highlight.tags.propertyName) is being called or defined
  as a function.
  */
  "function": Tag.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that can be applied to
  [names](#highlight.tags.name) to indicate that they belong to
  the language's standard environment.
  */
  standard: Tag.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates a given
  [names](#highlight.tags.name) is local to some scope.
  */
  local: Tag.defineModifier(),
  /**
  A generic variant [modifier](#highlight.Tag^defineModifier) that
  can be used to tag language-specific alternative variants of
  some common tag. It is recommended for themes to define special
  forms of at least the [string](#highlight.tags.string) and
  [variable name](#highlight.tags.variableName) tags, since those
  come up a lot.
  */
  special: Tag.defineModifier()
};
/**
This is a highlighter that adds stable, predictable classes to
tokens, for styling with external CSS.

The following tags are mapped to their name prefixed with `"tok-"`
(for example `"tok-comment"`):

* [`link`](#highlight.tags.link)
* [`heading`](#highlight.tags.heading)
* [`emphasis`](#highlight.tags.emphasis)
* [`strong`](#highlight.tags.strong)
* [`keyword`](#highlight.tags.keyword)
* [`atom`](#highlight.tags.atom)
* [`bool`](#highlight.tags.bool)
* [`url`](#highlight.tags.url)
* [`labelName`](#highlight.tags.labelName)
* [`inserted`](#highlight.tags.inserted)
* [`deleted`](#highlight.tags.deleted)
* [`literal`](#highlight.tags.literal)
* [`string`](#highlight.tags.string)
* [`number`](#highlight.tags.number)
* [`variableName`](#highlight.tags.variableName)
* [`typeName`](#highlight.tags.typeName)
* [`namespace`](#highlight.tags.namespace)
* [`className`](#highlight.tags.className)
* [`macroName`](#highlight.tags.macroName)
* [`propertyName`](#highlight.tags.propertyName)
* [`operator`](#highlight.tags.operator)
* [`comment`](#highlight.tags.comment)
* [`meta`](#highlight.tags.meta)
* [`punctuation`](#highlight.tags.punctuation)
* [`invalid`](#highlight.tags.invalid)

In addition, these mappings are provided:

* [`regexp`](#highlight.tags.regexp),
  [`escape`](#highlight.tags.escape), and
  [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)
  are mapped to `"tok-string2"`
* [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)
  to `"tok-variableName2"`
* [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)
  to `"tok-variableName tok-local"`
* [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)
  to `"tok-variableName tok-definition"`
* [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)
  to `"tok-propertyName tok-definition"`
*/
tagHighlighter([{
  tag: tags.link,
  "class": "tok-link"
}, {
  tag: tags.heading,
  "class": "tok-heading"
}, {
  tag: tags.emphasis,
  "class": "tok-emphasis"
}, {
  tag: tags.strong,
  "class": "tok-strong"
}, {
  tag: tags.keyword,
  "class": "tok-keyword"
}, {
  tag: tags.atom,
  "class": "tok-atom"
}, {
  tag: tags.bool,
  "class": "tok-bool"
}, {
  tag: tags.url,
  "class": "tok-url"
}, {
  tag: tags.labelName,
  "class": "tok-labelName"
}, {
  tag: tags.inserted,
  "class": "tok-inserted"
}, {
  tag: tags.deleted,
  "class": "tok-deleted"
}, {
  tag: tags.literal,
  "class": "tok-literal"
}, {
  tag: tags.string,
  "class": "tok-string"
}, {
  tag: tags.number,
  "class": "tok-number"
}, {
  tag: [tags.regexp, tags.escape, tags.special(tags.string)],
  "class": "tok-string2"
}, {
  tag: tags.variableName,
  "class": "tok-variableName"
}, {
  tag: tags.local(tags.variableName),
  "class": "tok-variableName tok-local"
}, {
  tag: tags.definition(tags.variableName),
  "class": "tok-variableName tok-definition"
}, {
  tag: tags.special(tags.variableName),
  "class": "tok-variableName2"
}, {
  tag: tags.definition(tags.propertyName),
  "class": "tok-propertyName tok-definition"
}, {
  tag: tags.typeName,
  "class": "tok-typeName"
}, {
  tag: tags.namespace,
  "class": "tok-namespace"
}, {
  tag: tags.className,
  "class": "tok-className"
}, {
  tag: tags.macroName,
  "class": "tok-macroName"
}, {
  tag: tags.propertyName,
  "class": "tok-propertyName"
}, {
  tag: tags.operator,
  "class": "tok-operator"
}, {
  tag: tags.comment,
  "class": "tok-comment"
}, {
  tag: tags.meta,
  "class": "tok-meta"
}, {
  tag: tags.invalid,
  "class": "tok-invalid"
}, {
  tag: tags.punctuation,
  "class": "tok-punctuation"
}]);

var _a;
/**
Node prop stored in a parser's top syntax node to provide the
facet that stores language-specific data for that language.
*/
var languageDataProp = /*@__PURE__*/new NodeProp();
/**
Helper function to define a facet (to be added to the top syntax
node(s) for a language via
[`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be
used to associate language data with the language. You
probably only need this when subclassing
[`Language`](https://codemirror.net/6/docs/ref/#language.Language).
*/
function defineLanguageFacet(baseData) {
  return Facet.define({
    combine: baseData ? function (values) {
      return values.concat(baseData);
    } : undefined
  });
}
/**
Syntax node prop used to register sublanguages. Should be added to
the top level node type for the language.
*/
var sublanguageProp = /*@__PURE__*/new NodeProp();
/**
A language object manages parsing and per-language
[metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
managed as a [Lezer](https://lezer.codemirror.net) tree. The class
can be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)
subclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or
via the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass
for stream parsers.
*/
var Language = /*#__PURE__*/function () {
  /**
  Construct a language object. If you need to invoke this
  directly, first define a data facet with
  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
  configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
  to the language's outer syntax node.
  */
  function Language(
  /**
  The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet
  used for this language.
  */
  data, parser) {
    var extraExtensions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
    _classCallCheck(this, Language);
    this.data = data;
    this.name = name;
    // Kludge to define EditorState.tree as a debugging helper,
    // without the EditorState package actually knowing about
    // languages and lezer trees.
    if (!EditorState.prototype.hasOwnProperty("tree")) Object.defineProperty(EditorState.prototype, "tree", {
      get: function get() {
        return syntaxTree(this);
      }
    });
    this.parser = parser;
    this.extension = [language.of(this), EditorState.languageData.of(function (state, pos, side) {
      var top = topNodeAt(state, pos, side),
        data = top.type.prop(languageDataProp);
      if (!data) return [];
      var base = state.facet(data),
        sub = top.type.prop(sublanguageProp);
      if (sub) {
        var innerNode = top.resolve(pos - top.from, side);
        var _iterator = _createForOfIteratorHelper(sub),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var sublang = _step.value;
            if (sublang.test(innerNode, state)) {
              var _data = state.facet(sublang.facet);
              return sublang.type == "replace" ? _data : _data.concat(base);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      return base;
    })].concat(extraExtensions);
  }
  /**
  Query whether this language is active at the given position.
  */
  _createClass(Language, [{
    key: "isActiveAt",
    value: function isActiveAt(state, pos) {
      var side = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
      return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;
    }
    /**
    Find the document regions that were parsed using this language.
    The returned regions will _include_ any nested languages rooted
    in this language, when those exist.
    */
  }, {
    key: "findRegions",
    value: function findRegions(state) {
      var _this = this;
      var lang = state.facet(language);
      if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data) return [{
        from: 0,
        to: state.doc.length
      }];
      if (!lang || !lang.allowsNesting) return [];
      var result = [];
      var explore = function explore(tree, from) {
        if (tree.prop(languageDataProp) == _this.data) {
          result.push({
            from: from,
            to: from + tree.length
          });
          return;
        }
        var mount = tree.prop(NodeProp.mounted);
        if (mount) {
          if (mount.tree.prop(languageDataProp) == _this.data) {
            if (mount.overlay) {
              var _iterator2 = _createForOfIteratorHelper(mount.overlay),
                _step2;
              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                  var r = _step2.value;
                  result.push({
                    from: r.from + from,
                    to: r.to + from
                  });
                }
              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }
            } else result.push({
              from: from,
              to: from + tree.length
            });
            return;
          } else if (mount.overlay) {
            var size = result.length;
            explore(mount.tree, mount.overlay[0].from + from);
            if (result.length > size) return;
          }
        }
        for (var i = 0; i < tree.children.length; i++) {
          var ch = tree.children[i];
          if (ch instanceof Tree) explore(ch, tree.positions[i] + from);
        }
      };
      explore(syntaxTree(state), 0);
      return result;
    }
    /**
    Indicates whether this language allows nested languages. The
    default implementation returns true.
    */
  }, {
    key: "allowsNesting",
    get: function get() {
      return true;
    }
  }]);
  return Language;
}();
/**
@internal
*/
Language.setState = /*@__PURE__*/StateEffect.define();
function topNodeAt(state, pos, side) {
  var topLang = state.facet(language),
    tree = syntaxTree(state).topNode;
  if (!topLang || topLang.allowsNesting) {
    for (var node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers)) if (node.type.isTop) tree = node;
  }
  return tree;
}
/**
A subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer
[LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)
parsers.
*/
var LRLanguage = /*#__PURE__*/function (_Language) {
  _inherits(LRLanguage, _Language);
  var _super = _createSuper(LRLanguage);
  function LRLanguage(data, parser, name) {
    var _this2;
    _classCallCheck(this, LRLanguage);
    _this2 = _super.call(this, data, parser, [], name);
    _this2.parser = parser;
    return _this2;
  }
  /**
  Define a language from a parser.
  */
  _createClass(LRLanguage, [{
    key: "configure",
    value:
    /**
    Create a new instance of this language with a reconfigured
    version of its parser and optionally a new name.
    */
    function configure(options, name) {
      return new LRLanguage(this.data, this.parser.configure(options), name || this.name);
    }
  }, {
    key: "allowsNesting",
    get: function get() {
      return this.parser.hasWrappers();
    }
  }], [{
    key: "define",
    value: function define(spec) {
      var data = defineLanguageFacet(spec.languageData);
      return new LRLanguage(data, spec.parser.configure({
        props: [languageDataProp.add(function (type) {
          return type.isTop ? data : undefined;
        })]
      }), spec.name);
    }
  }]);
  return LRLanguage;
}(Language);
/**
Get the syntax tree for a state, which is the current (possibly
incomplete) parse tree of the active
[language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no
language available.
*/
function syntaxTree(state) {
  var field = state.field(Language.state, false);
  return field ? field.tree : Tree.empty;
}
/**
Lezer-style
[`Input`](https://lezer.codemirror.net/docs/ref#common.Input)
object for a [`Text`](https://codemirror.net/6/docs/ref/#state.Text) object.
*/
var DocInput = /*#__PURE__*/function () {
  /**
  Create an input object for the given document.
  */
  function DocInput(doc) {
    _classCallCheck(this, DocInput);
    this.doc = doc;
    this.cursorPos = 0;
    this.string = "";
    this.cursor = doc.iter();
  }
  _createClass(DocInput, [{
    key: "length",
    get: function get() {
      return this.doc.length;
    }
  }, {
    key: "syncTo",
    value: function syncTo(pos) {
      this.string = this.cursor.next(pos - this.cursorPos).value;
      this.cursorPos = pos + this.string.length;
      return this.cursorPos - this.string.length;
    }
  }, {
    key: "chunk",
    value: function chunk(pos) {
      this.syncTo(pos);
      return this.string;
    }
  }, {
    key: "lineChunks",
    get: function get() {
      return true;
    }
  }, {
    key: "read",
    value: function read(from, to) {
      var stringStart = this.cursorPos - this.string.length;
      if (from < stringStart || to >= this.cursorPos) return this.doc.sliceString(from, to);else return this.string.slice(from - stringStart, to - stringStart);
    }
  }]);
  return DocInput;
}();
var currentContext = null;
/**
A parse context provided to parsers working on the editor content.
*/
var ParseContext = /*#__PURE__*/function () {
  function ParseContext(parser,
  /**
  The current editor state.
  */
  state) {
    var fragments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var
    /**
    @internal
    */
    tree = arguments.length > 3 ? arguments[3] : undefined;
    var
    /**
    @internal
    */
    treeLen = arguments.length > 4 ? arguments[4] : undefined;
    var
    /**
    The current editor viewport (or some overapproximation
    thereof). Intended to be used for opportunistically avoiding
    work (in which case
    [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)
    should be called to make sure the parser is restarted when the
    skipped region becomes visible).
    */
    viewport = arguments.length > 5 ? arguments[5] : undefined;
    var
    /**
    @internal
    */
    skipped = arguments.length > 6 ? arguments[6] : undefined;
    var
    /**
    This is where skipping parsers can register a promise that,
    when resolved, will schedule a new parse. It is cleared when
    the parse worker picks up the promise. @internal
    */
    scheduleOn = arguments.length > 7 ? arguments[7] : undefined;
    _classCallCheck(this, ParseContext);
    this.parser = parser;
    this.state = state;
    this.fragments = fragments;
    this.tree = tree;
    this.treeLen = treeLen;
    this.viewport = viewport;
    this.skipped = skipped;
    this.scheduleOn = scheduleOn;
    this.parse = null;
    /**
    @internal
    */
    this.tempSkipped = [];
  }
  /**
  @internal
  */
  _createClass(ParseContext, [{
    key: "startParse",
    value: function startParse() {
      return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
    }
    /**
    @internal
    */
  }, {
    key: "work",
    value: function work(until, upto) {
      var _this3 = this;
      if (upto != null && upto >= this.state.doc.length) upto = undefined;
      if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
        this.takeTree();
        return true;
      }
      return this.withContext(function () {
        var _a;
        if (typeof until == "number") {
          var endTime = Date.now() + until;
          until = function until() {
            return Date.now() > endTime;
          };
        }
        if (!_this3.parse) _this3.parse = _this3.startParse();
        if (upto != null && (_this3.parse.stoppedAt == null || _this3.parse.stoppedAt > upto) && upto < _this3.state.doc.length) _this3.parse.stopAt(upto);
        for (;;) {
          var done = _this3.parse.advance();
          if (done) {
            _this3.fragments = _this3.withoutTempSkipped(TreeFragment.addTree(done, _this3.fragments, _this3.parse.stoppedAt != null));
            _this3.treeLen = (_a = _this3.parse.stoppedAt) !== null && _a !== void 0 ? _a : _this3.state.doc.length;
            _this3.tree = done;
            _this3.parse = null;
            if (_this3.treeLen < (upto !== null && upto !== void 0 ? upto : _this3.state.doc.length)) _this3.parse = _this3.startParse();else return true;
          }
          if (until()) return false;
        }
      });
    }
    /**
    @internal
    */
  }, {
    key: "takeTree",
    value: function takeTree() {
      var _this4 = this;
      var pos, tree;
      if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
        if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos) this.parse.stopAt(pos);
        this.withContext(function () {
          while (!(tree = _this4.parse.advance())) {}
        });
        this.treeLen = pos;
        this.tree = tree;
        this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
        this.parse = null;
      }
    }
  }, {
    key: "withContext",
    value: function withContext(f) {
      var prev = currentContext;
      currentContext = this;
      try {
        return f();
      } finally {
        currentContext = prev;
      }
    }
  }, {
    key: "withoutTempSkipped",
    value: function withoutTempSkipped(fragments) {
      for (var r; r = this.tempSkipped.pop();) fragments = cutFragments(fragments, r.from, r.to);
      return fragments;
    }
    /**
    @internal
    */
  }, {
    key: "changes",
    value: function changes(_changes, newState) {
      var fragments = this.fragments,
        tree = this.tree,
        treeLen = this.treeLen,
        viewport = this.viewport,
        skipped = this.skipped;
      this.takeTree();
      if (!_changes.empty) {
        var ranges = [];
        _changes.iterChangedRanges(function (fromA, toA, fromB, toB) {
          return ranges.push({
            fromA: fromA,
            toA: toA,
            fromB: fromB,
            toB: toB
          });
        });
        fragments = TreeFragment.applyChanges(fragments, ranges);
        tree = Tree.empty;
        treeLen = 0;
        viewport = {
          from: _changes.mapPos(viewport.from, -1),
          to: _changes.mapPos(viewport.to, 1)
        };
        if (this.skipped.length) {
          skipped = [];
          var _iterator3 = _createForOfIteratorHelper(this.skipped),
            _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var r = _step3.value;
              var from = _changes.mapPos(r.from, 1),
                to = _changes.mapPos(r.to, -1);
              if (from < to) skipped.push({
                from: from,
                to: to
              });
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        }
      }
      return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
    }
    /**
    @internal
    */
  }, {
    key: "updateViewport",
    value: function updateViewport(viewport) {
      if (this.viewport.from == viewport.from && this.viewport.to == viewport.to) return false;
      this.viewport = viewport;
      var startLen = this.skipped.length;
      for (var i = 0; i < this.skipped.length; i++) {
        var _this$skipped$i = this.skipped[i],
          from = _this$skipped$i.from,
          to = _this$skipped$i.to;
        if (from < viewport.to && to > viewport.from) {
          this.fragments = cutFragments(this.fragments, from, to);
          this.skipped.splice(i--, 1);
        }
      }
      if (this.skipped.length >= startLen) return false;
      this.reset();
      return true;
    }
    /**
    @internal
    */
  }, {
    key: "reset",
    value: function reset() {
      if (this.parse) {
        this.takeTree();
        this.parse = null;
      }
    }
    /**
    Notify the parse scheduler that the given region was skipped
    because it wasn't in view, and the parse should be restarted
    when it comes into view.
    */
  }, {
    key: "skipUntilInView",
    value: function skipUntilInView(from, to) {
      this.skipped.push({
        from: from,
        to: to
      });
    }
    /**
    Returns a parser intended to be used as placeholder when
    asynchronously loading a nested parser. It'll skip its input and
    mark it as not-really-parsed, so that the next update will parse
    it again.
    
    When `until` is given, a reparse will be scheduled when that
    promise resolves.
    */
  }, {
    key: "isDone",
    value:
    /**
    @internal
    */
    function isDone(upto) {
      upto = Math.min(upto, this.state.doc.length);
      var frags = this.fragments;
      return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
    }
    /**
    Get the context for the current parse, or `null` if no editor
    parse is in progress.
    */
  }], [{
    key: "create",
    value: function create(parser, state, viewport) {
      return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);
    }
  }, {
    key: "getSkippingParser",
    value: function getSkippingParser(until) {
      return new ( /*#__PURE__*/function (_Parser) {
        _inherits(_class, _Parser);
        var _super2 = _createSuper(_class);
        function _class() {
          _classCallCheck(this, _class);
          return _super2.apply(this, arguments);
        }
        _createClass(_class, [{
          key: "createParse",
          value: function createParse(input, fragments, ranges) {
            var from = ranges[0].from,
              to = ranges[ranges.length - 1].to;
            var parser = {
              parsedPos: from,
              advance: function advance() {
                var cx = currentContext;
                if (cx) {
                  var _iterator4 = _createForOfIteratorHelper(ranges),
                    _step4;
                  try {
                    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                      var r = _step4.value;
                      cx.tempSkipped.push(r);
                    }
                  } catch (err) {
                    _iterator4.e(err);
                  } finally {
                    _iterator4.f();
                  }
                  if (until) cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
                }
                this.parsedPos = to;
                return new Tree(NodeType.none, [], [], to - from);
              },
              stoppedAt: null,
              stopAt: function stopAt() {}
            };
            return parser;
          }
        }]);
        return _class;
      }(Parser))();
    }
  }, {
    key: "get",
    value: function get() {
      return currentContext;
    }
  }]);
  return ParseContext;
}();
function cutFragments(fragments, from, to) {
  return TreeFragment.applyChanges(fragments, [{
    fromA: from,
    toA: to,
    fromB: from,
    toB: to
  }]);
}
var LanguageState = /*#__PURE__*/function () {
  function LanguageState(
  // A mutable parse state that is used to preserve work done during
  // the lifetime of a state when moving to the next state.
  context) {
    _classCallCheck(this, LanguageState);
    this.context = context;
    this.tree = context.tree;
  }
  _createClass(LanguageState, [{
    key: "apply",
    value: function apply(tr) {
      if (!tr.docChanged && this.tree == this.context.tree) return this;
      var newCx = this.context.changes(tr.changes, tr.state);
      // If the previous parse wasn't done, go forward only up to its
      // end position or the end of the viewport, to avoid slowing down
      // state updates with parse work beyond the viewport.
      var upto = this.context.treeLen == tr.startState.doc.length ? undefined : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
      if (!newCx.work(20 /* Work.Apply */, upto)) newCx.takeTree();
      return new LanguageState(newCx);
    }
  }], [{
    key: "init",
    value: function init(state) {
      var vpTo = Math.min(3000 /* Work.InitViewport */, state.doc.length);
      var parseState = ParseContext.create(state.facet(language).parser, state, {
        from: 0,
        to: vpTo
      });
      if (!parseState.work(20 /* Work.Apply */, vpTo)) parseState.takeTree();
      return new LanguageState(parseState);
    }
  }]);
  return LanguageState;
}();
Language.state = /*@__PURE__*/StateField.define({
  create: LanguageState.init,
  update: function update(value, tr) {
    var _iterator5 = _createForOfIteratorHelper(tr.effects),
      _step5;
    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var e = _step5.value;
        if (e.is(Language.setState)) return e.value;
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
    if (tr.startState.facet(language) != tr.state.facet(language)) return LanguageState.init(tr.state);
    return value.apply(tr);
  }
});
var requestIdle = function requestIdle(callback) {
  var timeout = setTimeout(function () {
    return callback();
  }, 500 /* Work.MaxPause */);
  return function () {
    return clearTimeout(timeout);
  };
};
if (typeof requestIdleCallback != "undefined") requestIdle = function requestIdle(callback) {
  var idle = -1,
    timeout = setTimeout(function () {
      idle = requestIdleCallback(callback, {
        timeout: 500 /* Work.MaxPause */ - 100 /* Work.MinPause */
      });
    }, 100 /* Work.MinPause */);
  return function () {
    return idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
  };
};
var isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending) ? function () {
  return navigator.scheduling.isInputPending();
} : null;
var parseWorker = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {
  function ParseWorker(view) {
    _classCallCheck(this, ParseWorker);
    this.view = view;
    this.working = null;
    this.workScheduled = 0;
    // End of the current time chunk
    this.chunkEnd = -1;
    // Milliseconds of budget left for this chunk
    this.chunkBudget = -1;
    this.work = this.work.bind(this);
    this.scheduleWork();
  }
  _createClass(ParseWorker, [{
    key: "update",
    value: function update(_update) {
      var cx = this.view.state.field(Language.state).context;
      if (cx.updateViewport(_update.view.viewport) || this.view.viewport.to > cx.treeLen) this.scheduleWork();
      if (_update.docChanged) {
        if (this.view.hasFocus) this.chunkBudget += 50 /* Work.ChangeBonus */;
        this.scheduleWork();
      }
      this.checkAsyncSchedule(cx);
    }
  }, {
    key: "scheduleWork",
    value: function scheduleWork() {
      if (this.working) return;
      var state = this.view.state,
        field = state.field(Language.state);
      if (field.tree != field.context.tree || !field.context.isDone(state.doc.length)) this.working = requestIdle(this.work);
    }
  }, {
    key: "work",
    value: function work(deadline) {
      this.working = null;
      var now = Date.now();
      if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) {
        // Start a new chunk
        this.chunkEnd = now + 30000 /* Work.ChunkTime */;
        this.chunkBudget = 3000 /* Work.ChunkBudget */;
      }

      if (this.chunkBudget <= 0) return; // No more budget
      var _this$view = this.view,
        state = _this$view.state,
        vpTo = _this$view.viewport.to,
        field = state.field(Language.state);
      if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* Work.MaxParseAhead */)) return;
      var endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Work.Slice */, deadline && !isInputPending ? Math.max(25 /* Work.MinSlice */, deadline.timeRemaining() - 5) : 1e9);
      var viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;
      var done = field.context.work(function () {
        return isInputPending && isInputPending() || Date.now() > endTime;
      }, vpTo + (viewportFirst ? 0 : 100000 /* Work.MaxParseAhead */));
      this.chunkBudget -= Date.now() - now;
      if (done || this.chunkBudget <= 0) {
        field.context.takeTree();
        this.view.dispatch({
          effects: Language.setState.of(new LanguageState(field.context))
        });
      }
      if (this.chunkBudget > 0 && !(done && !viewportFirst)) this.scheduleWork();
      this.checkAsyncSchedule(field.context);
    }
  }, {
    key: "checkAsyncSchedule",
    value: function checkAsyncSchedule(cx) {
      var _this5 = this;
      if (cx.scheduleOn) {
        this.workScheduled++;
        cx.scheduleOn.then(function () {
          return _this5.scheduleWork();
        })["catch"](function (err) {
          return logException(_this5.view.state, err);
        }).then(function () {
          return _this5.workScheduled--;
        });
        cx.scheduleOn = null;
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.working) this.working();
    }
  }, {
    key: "isWorking",
    value: function isWorking() {
      return !!(this.working || this.workScheduled > 0);
    }
  }]);
  return ParseWorker;
}(), {
  eventHandlers: {
    focus: function focus() {
      this.scheduleWork();
    }
  }
});
/**
The facet used to associate a language with an editor state. Used
by `Language` object's `extension` property (so you don't need to
manually wrap your languages in this). Can be used to access the
current language on a state.
*/
var language = /*@__PURE__*/Facet.define({
  combine: function combine(languages) {
    return languages.length ? languages[0] : null;
  },
  enables: function enables(language) {
    return [Language.state, parseWorker, EditorView.contentAttributes.compute([language], function (state) {
      var lang = state.facet(language);
      return lang && lang.name ? {
        "data-language": lang.name
      } : {};
    })];
  }
});
/**
This class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an
optional set of supporting extensions. Language packages are
encouraged to export a function that optionally takes a
configuration object and returns a `LanguageSupport` instance, as
the main way for client code to use the package.
*/
var LanguageSupport = /*#__PURE__*/_createClass(
/**
Create a language support object.
*/
function LanguageSupport(
/**
The language object.
*/
language) {
  var support = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  _classCallCheck(this, LanguageSupport);
  this.language = language;
  this.support = support;
  this.extension = [language, support];
});
/**
Facet that defines a way to provide a function that computes the
appropriate indentation depth, as a column number (see
[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)), at the start of a given
line. A return value of `null` indicates no indentation can be
determined, and the line should inherit the indentation of the one
above it. A return value of `undefined` defers to the next indent
service.
*/
var indentService = /*@__PURE__*/Facet.define();
/**
Facet for overriding the unit by which indentation happens. Should
be a string consisting either entirely of the same whitespace
character. When not set, this defaults to 2 spaces.
*/
var indentUnit = /*@__PURE__*/Facet.define({
  combine: function combine(values) {
    if (!values.length) return "  ";
    var unit = values[0];
    if (!unit || /\S/.test(unit) || Array.from(unit).some(function (e) {
      return e != unit[0];
    })) throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
    return unit;
  }
});
/**
Return the _column width_ of an indent unit in the state.
Determined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)
facet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that
contains tabs.
*/
function getIndentUnit(state) {
  var unit = state.facet(indentUnit);
  return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
}
/**
Create an indentation string that covers columns 0 to `cols`.
Will use tabs for as much of the columns as possible when the
[`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains
tabs.
*/
function indentString(state, cols) {
  var result = "",
    ts = state.tabSize,
    ch = state.facet(indentUnit)[0];
  if (ch == "\t") {
    while (cols >= ts) {
      result += "\t";
      cols -= ts;
    }
    ch = " ";
  }
  for (var i = 0; i < cols; i++) result += ch;
  return result;
}
/**
Get the indentation, as a column number, at the given position.
Will first consult any [indent services](https://codemirror.net/6/docs/ref/#language.indentService)
that are registered, and if none of those return an indentation,
this will check the syntax tree for the [indent node
prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp) and use that if found. Returns a
number when an indentation could be determined, and null
otherwise.
*/
function getIndentation(context, pos) {
  if (context instanceof EditorState) context = new IndentContext(context);
  var _iterator11 = _createForOfIteratorHelper(context.state.facet(indentService)),
    _step11;
  try {
    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
      var service = _step11.value;
      var result = service(context, pos);
      if (result !== undefined) return result;
    }
  } catch (err) {
    _iterator11.e(err);
  } finally {
    _iterator11.f();
  }
  var tree = syntaxTree(context.state);
  return tree ? syntaxIndentation(context, tree, pos) : null;
}
/**
Indentation contexts are used when calling [indentation
services](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities
useful in indentation logic, and can selectively override the
indentation reported for some lines.
*/
var IndentContext = /*#__PURE__*/function () {
  /**
  Create an indent context.
  */
  function IndentContext(
  /**
  The editor state.
  */
  state) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, IndentContext);
    this.state = state;
    this.options = options;
    this.unit = getIndentUnit(state);
  }
  /**
  Get a description of the line at the given position, taking
  [simulated line
  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  into account. If there is such a break at `pos`, the `bias`
  argument determines whether the part of the line line before or
  after the break is used.
  */
  _createClass(IndentContext, [{
    key: "lineAt",
    value: function lineAt(pos) {
      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var line = this.state.doc.lineAt(pos);
      var _this$options = this.options,
        simulateBreak = _this$options.simulateBreak,
        simulateDoubleBreak = _this$options.simulateDoubleBreak;
      if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
        if (simulateDoubleBreak && simulateBreak == pos) return {
          text: "",
          from: pos
        };else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos) return {
          text: line.text.slice(simulateBreak - line.from),
          from: simulateBreak
        };else return {
          text: line.text.slice(0, simulateBreak - line.from),
          from: line.from
        };
      }
      return line;
    }
    /**
    Get the text directly after `pos`, either the entire line
    or the next 100 characters, whichever is shorter.
    */
  }, {
    key: "textAfterPos",
    value: function textAfterPos(pos) {
      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak) return "";
      var _this$lineAt = this.lineAt(pos, bias),
        text = _this$lineAt.text,
        from = _this$lineAt.from;
      return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
    }
    /**
    Find the column for the given position.
    */
  }, {
    key: "column",
    value: function column(pos) {
      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var _this$lineAt2 = this.lineAt(pos, bias),
        text = _this$lineAt2.text,
        from = _this$lineAt2.from;
      var result = this.countColumn(text, pos - from);
      var override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
      if (override > -1) result += override - this.countColumn(text, text.search(/\S|$/));
      return result;
    }
    /**
    Find the column position (taking tabs into account) of the given
    position in the given string.
    */
  }, {
    key: "countColumn",
    value: function countColumn$1(line) {
      var pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : line.length;
      return countColumn(line, this.state.tabSize, pos);
    }
    /**
    Find the indentation column of the line at the given point.
    */
  }, {
    key: "lineIndent",
    value: function lineIndent(pos) {
      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var _this$lineAt3 = this.lineAt(pos, bias),
        text = _this$lineAt3.text,
        from = _this$lineAt3.from;
      var override = this.options.overrideIndentation;
      if (override) {
        var overriden = override(from);
        if (overriden > -1) return overriden;
      }
      return this.countColumn(text, text.search(/\S|$/));
    }
    /**
    Returns the [simulated line
    break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
    for this context, if any.
    */
  }, {
    key: "simulatedBreak",
    get: function get() {
      return this.options.simulateBreak || null;
    }
  }]);
  return IndentContext;
}();
/**
A syntax tree node prop used to associate indentation strategies
with node types. Such a strategy is a function from an indentation
context to a column number (see also
[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)) or null, where null
indicates that no definitive indentation can be determined.
*/
var indentNodeProp = /*@__PURE__*/new NodeProp();
// Compute the indentation for a given position from the syntax tree.
function syntaxIndentation(cx, ast, pos) {
  return indentFrom(ast.resolveInner(pos).enterUnfinishedNodesBefore(pos), pos, cx);
}
function ignoreClosed(cx) {
  return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
}
function indentStrategy(tree) {
  var strategy = tree.type.prop(indentNodeProp);
  if (strategy) return strategy;
  var first = tree.firstChild,
    close;
  if (first && (close = first.type.prop(NodeProp.closedBy))) {
    var last = tree.lastChild,
      closed = last && close.indexOf(last.name) > -1;
    return function (cx) {
      return delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
    };
  }
  return tree.parent == null ? topIndent : null;
}
function indentFrom(node, pos, base) {
  for (; node; node = node.parent) {
    var strategy = indentStrategy(node);
    if (strategy) return strategy(TreeIndentContext.create(base, pos, node));
  }
  return null;
}
function topIndent() {
  return 0;
}
/**
Objects of this type provide context information and helper
methods to indentation functions registered on syntax nodes.
*/
var TreeIndentContext = /*#__PURE__*/function (_IndentContext) {
  _inherits(TreeIndentContext, _IndentContext);
  var _super3 = _createSuper(TreeIndentContext);
  function TreeIndentContext(base,
  /**
  The position at which indentation is being computed.
  */
  pos,
  /**
  The syntax tree node to which the indentation strategy
  applies.
  */
  node) {
    var _this7;
    _classCallCheck(this, TreeIndentContext);
    _this7 = _super3.call(this, base.state, base.options);
    _this7.base = base;
    _this7.pos = pos;
    _this7.node = node;
    return _this7;
  }
  /**
  @internal
  */
  _createClass(TreeIndentContext, [{
    key: "textAfter",
    get:
    /**
    Get the text directly after `this.pos`, either the entire line
    or the next 100 characters, whichever is shorter.
    */
    function get() {
      return this.textAfterPos(this.pos);
    }
    /**
    Get the indentation at the reference line for `this.node`, which
    is the line on which it starts, unless there is a node that is
    _not_ a parent of this node covering the start of that line. If
    so, the line at the start of that node is tried, again skipping
    on if it is covered by another such node.
    */
  }, {
    key: "baseIndent",
    get: function get() {
      var line = this.state.doc.lineAt(this.node.from);
      // Skip line starts that are covered by a sibling (or cousin, etc)
      for (;;) {
        var atBreak = this.node.resolve(line.from);
        while (atBreak.parent && atBreak.parent.from == atBreak.from) atBreak = atBreak.parent;
        if (isParent(atBreak, this.node)) break;
        line = this.state.doc.lineAt(atBreak.from);
      }
      return this.lineIndent(line.from);
    }
    /**
    Continue looking for indentations in the node's parent nodes,
    and return the result of that.
    */
  }, {
    key: "continue",
    value: function _continue() {
      var parent = this.node.parent;
      return parent ? indentFrom(parent, this.pos, this.base) : 0;
    }
  }], [{
    key: "create",
    value: function create(base, pos, node) {
      return new TreeIndentContext(base, pos, node);
    }
  }]);
  return TreeIndentContext;
}(IndentContext);
function isParent(parent, of) {
  for (var cur = of; cur; cur = cur.parent) if (parent == cur) return true;
  return false;
}
// Check whether a delimited node is aligned (meaning there are
// non-skipped nodes on the same line as the opening delimiter). And
// if so, return the opening token.
function bracketedAligned(context) {
  var tree = context.node;
  var openToken = tree.childAfter(tree.from),
    last = tree.lastChild;
  if (!openToken) return null;
  var sim = context.options.simulateBreak;
  var openLine = context.state.doc.lineAt(openToken.from);
  var lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
  for (var pos = openToken.to;;) {
    var next = tree.childAfter(pos);
    if (!next || next == last) return null;
    if (!next.type.isSkipped) return next.from < lineEnd ? openToken : null;
    pos = next.to;
  }
}
/**
An indentation strategy for delimited (usually bracketed) nodes.
Will, by default, indent one unit more than the parent's base
indent unless the line starts with a closing token. When `align`
is true and there are non-skipped nodes on the node's opening
line, the content of the node will be aligned with the end of the
opening node, like this:

    foo(bar,
        baz)
*/
function delimitedIndent(_ref) {
  var closing = _ref.closing,
    _ref$align = _ref.align,
    align = _ref$align === void 0 ? true : _ref$align,
    _ref$units = _ref.units,
    units = _ref$units === void 0 ? 1 : _ref$units;
  return function (context) {
    return delimitedStrategy(context, align, units, closing);
  };
}
function delimitedStrategy(context, align, units, closing, closedAt) {
  var after = context.textAfter,
    space = after.match(/^\s*/)[0].length;
  var closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
  var aligned = align ? bracketedAligned(context) : null;
  if (aligned) return closed ? context.column(aligned.from) : context.column(aligned.to);
  return context.baseIndent + (closed ? 0 : context.unit * units);
}
/**
An indentation strategy that aligns a node's content to its base
indentation.
*/
var flatIndent = function flatIndent(context) {
  return context.baseIndent;
};
/**
Creates an indentation strategy that, by default, indents
continued lines one unit more than the node's base indentation.
You can provide `except` to prevent indentation of lines that
match a pattern (for example `/^else\b/` in `if`/`else`
constructs), and you can change the amount of units used with the
`units` option.
*/
function continuedIndent() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    except = _ref2.except,
    _ref2$units = _ref2.units,
    units = _ref2$units === void 0 ? 1 : _ref2$units;
  return function (context) {
    var matchExcept = except && except.test(context.textAfter);
    return context.baseIndent + (matchExcept ? 0 : units * context.unit);
  };
}
var DontIndentBeyond = 200;
/**
Enables reindentation on input. When a language defines an
`indentOnInput` field in its [language
data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular
expression, the line at the cursor will be reindented whenever new
text is typed and the input from the start of the line up to the
cursor matches that regexp.

To avoid unneccesary reindents, it is recommended to start the
regexp with `^` (usually followed by `\s*`), and end it with `$`.
For example, `/^\s*\}$/` will reindent when a closing brace is
added at the start of a line.
*/
function indentOnInput() {
  return EditorState.transactionFilter.of(function (tr) {
    if (!tr.docChanged || !tr.isUserEvent("input.type") && !tr.isUserEvent("input.complete")) return tr;
    var rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
    if (!rules.length) return tr;
    var doc = tr.newDoc,
      head = tr.newSelection.main.head,
      line = doc.lineAt(head);
    if (head > line.from + DontIndentBeyond) return tr;
    var lineStart = doc.sliceString(line.from, head);
    if (!rules.some(function (r) {
      return r.test(lineStart);
    })) return tr;
    var state = tr.state,
      last = -1,
      changes = [];
    var _iterator12 = _createForOfIteratorHelper(state.selection.ranges),
      _step12;
    try {
      for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
        var _head = _step12.value.head;
        var _line = state.doc.lineAt(_head);
        if (_line.from == last) continue;
        last = _line.from;
        var indent = getIndentation(state, _line.from);
        if (indent == null) continue;
        var cur = /^\s*/.exec(_line.text)[0];
        var norm = indentString(state, indent);
        if (cur != norm) changes.push({
          from: _line.from,
          to: _line.from + cur.length,
          insert: norm
        });
      }
    } catch (err) {
      _iterator12.e(err);
    } finally {
      _iterator12.f();
    }
    return changes.length ? [tr, {
      changes: changes,
      sequential: true
    }] : tr;
  });
}

/**
A facet that registers a code folding service. When called with
the extent of a line, such a function should return a foldable
range that starts on that line (but continues beyond it), if one
can be found.
*/
var foldService = /*@__PURE__*/Facet.define();
/**
This node prop is used to associate folding information with
syntax node types. Given a syntax node, it should check whether
that tree is foldable and return the range that can be collapsed
when it is.
*/
var foldNodeProp = /*@__PURE__*/new NodeProp();
/**
[Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but
the first and the last child of a syntax node. Useful for nodes
that start and end with delimiters.
*/
function foldInside(node) {
  var first = node.firstChild,
    last = node.lastChild;
  return first && first.to < last.from ? {
    from: first.to,
    to: last.type.isError ? node.to : last.from
  } : null;
}
function syntaxFolding(state, start, end) {
  var tree = syntaxTree(state);
  if (tree.length < end) return null;
  var inner = tree.resolveInner(end, 1);
  var found = null;
  for (var cur = inner; cur; cur = cur.parent) {
    if (cur.to <= end || cur.from > end) continue;
    if (found && cur.from < start) break;
    var prop = cur.type.prop(foldNodeProp);
    if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {
      var value = prop(cur, state);
      if (value && value.from <= end && value.from >= start && value.to > end) found = value;
    }
  }
  return found;
}
function isUnfinished(node) {
  var ch = node.lastChild;
  return ch && ch.to == node.to && ch.type.isError;
}
/**
Check whether the given line is foldable. First asks any fold
services registered through
[`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return
a result, tries to query the [fold node
prop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end
of the line.
*/
function foldable(state, lineStart, lineEnd) {
  var _iterator13 = _createForOfIteratorHelper(state.facet(foldService)),
    _step13;
  try {
    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
      var service = _step13.value;
      var result = service(state, lineStart, lineEnd);
      if (result) return result;
    }
  } catch (err) {
    _iterator13.e(err);
  } finally {
    _iterator13.f();
  }
  return syntaxFolding(state, lineStart, lineEnd);
}
function mapRange(range, mapping) {
  var from = mapping.mapPos(range.from, 1),
    to = mapping.mapPos(range.to, -1);
  return from >= to ? undefined : {
    from: from,
    to: to
  };
}
/**
State effect that can be attached to a transaction to fold the
given range. (You probably only need this in exceptional
circumstances—usually you'll just want to let
[`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode) and the [fold
gutter](https://codemirror.net/6/docs/ref/#language.foldGutter) create the transactions.)
*/
var foldEffect = /*@__PURE__*/StateEffect.define({
  map: mapRange
});
/**
State effect that unfolds the given range (if it was folded).
*/
var unfoldEffect = /*@__PURE__*/StateEffect.define({
  map: mapRange
});
function selectedLines(view) {
  var lines = [];
  var _iterator14 = _createForOfIteratorHelper(view.state.selection.ranges),
    _step14;
  try {
    var _loop = function _loop() {
      var head = _step14.value.head;
      if (lines.some(function (l) {
        return l.from <= head && l.to >= head;
      })) return "continue";
      lines.push(view.lineBlockAt(head));
    };
    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
      var _ret = _loop();
      if (_ret === "continue") continue;
    }
  } catch (err) {
    _iterator14.e(err);
  } finally {
    _iterator14.f();
  }
  return lines;
}
/**
The state field that stores the folded ranges (as a [decoration
set](https://codemirror.net/6/docs/ref/#view.DecorationSet)). Can be passed to
[`EditorState.toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) and
[`fromJSON`](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) to serialize the fold
state.
*/
var foldState = /*@__PURE__*/StateField.define({
  create: function create() {
    return Decoration.none;
  },
  update: function update(folded, tr) {
    folded = folded.map(tr.changes);
    var _iterator15 = _createForOfIteratorHelper(tr.effects),
      _step15;
    try {
      var _loop2 = function _loop2() {
        var e = _step15.value;
        if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to)) folded = folded.update({
          add: [foldWidget.range(e.value.from, e.value.to)]
        });else if (e.is(unfoldEffect)) folded = folded.update({
          filter: function filter(from, to) {
            return e.value.from != from || e.value.to != to;
          },
          filterFrom: e.value.from,
          filterTo: e.value.to
        });
      };
      for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
        _loop2();
      }
      // Clear folded ranges that cover the selection head
    } catch (err) {
      _iterator15.e(err);
    } finally {
      _iterator15.f();
    }
    if (tr.selection) {
      var onSelection = false,
        head = tr.selection.main.head;
      folded.between(head, head, function (a, b) {
        if (a < head && b > head) onSelection = true;
      });
      if (onSelection) folded = folded.update({
        filterFrom: head,
        filterTo: head,
        filter: function filter(a, b) {
          return b <= head || a >= head;
        }
      });
    }
    return folded;
  },
  provide: function provide(f) {
    return EditorView.decorations.from(f);
  },
  toJSON: function toJSON(folded, state) {
    var ranges = [];
    folded.between(0, state.doc.length, function (from, to) {
      ranges.push(from, to);
    });
    return ranges;
  },
  fromJSON: function fromJSON(value) {
    if (!Array.isArray(value) || value.length % 2) throw new RangeError("Invalid JSON for fold state");
    var ranges = [];
    for (var i = 0; i < value.length;) {
      var from = value[i++],
        to = value[i++];
      if (typeof from != "number" || typeof to != "number") throw new RangeError("Invalid JSON for fold state");
      ranges.push(foldWidget.range(from, to));
    }
    return Decoration.set(ranges, true);
  }
});
function findFold(state, from, to) {
  var _a;
  var found = null;
  (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, function (from, to) {
    if (!found || found.from > from) found = {
      from: from,
      to: to
    };
  });
  return found;
}
function foldExists(folded, from, to) {
  var found = false;
  folded.between(from, from, function (a, b) {
    if (a == from && b == to) found = true;
  });
  return found;
}
function maybeEnable(state, other) {
  return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));
}
/**
Fold the lines that are selected, if possible.
*/
var foldCode = function foldCode(view) {
  var _iterator16 = _createForOfIteratorHelper(selectedLines(view)),
    _step16;
  try {
    for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
      var line = _step16.value;
      var range = foldable(view.state, line.from, line.to);
      if (range) {
        view.dispatch({
          effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)])
        });
        return true;
      }
    }
  } catch (err) {
    _iterator16.e(err);
  } finally {
    _iterator16.f();
  }
  return false;
};
/**
Unfold folded ranges on selected lines.
*/
var unfoldCode = function unfoldCode(view) {
  if (!view.state.field(foldState, false)) return false;
  var effects = [];
  var _iterator17 = _createForOfIteratorHelper(selectedLines(view)),
    _step17;
  try {
    for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
      var line = _step17.value;
      var folded = findFold(view.state, line.from, line.to);
      if (folded) effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
    }
  } catch (err) {
    _iterator17.e(err);
  } finally {
    _iterator17.f();
  }
  if (effects.length) view.dispatch({
    effects: effects
  });
  return effects.length > 0;
};
function announceFold(view, range) {
  var fold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var lineFrom = view.state.doc.lineAt(range.from).number,
    lineTo = view.state.doc.lineAt(range.to).number;
  return EditorView.announce.of("".concat(view.state.phrase(fold ? "Folded lines" : "Unfolded lines"), " ").concat(lineFrom, " ").concat(view.state.phrase("to"), " ").concat(lineTo, "."));
}
/**
Fold all top-level foldable ranges. Note that, in most cases,
folding information will depend on the [syntax
tree](https://codemirror.net/6/docs/ref/#language.syntaxTree), and folding everything may not work
reliably when the document hasn't been fully parsed (either
because the editor state was only just initialized, or because the
document is so big that the parser decided not to parse it
entirely).
*/
var foldAll = function foldAll(view) {
  var state = view.state,
    effects = [];
  for (var pos = 0; pos < state.doc.length;) {
    var line = view.lineBlockAt(pos),
      range = foldable(state, line.from, line.to);
    if (range) effects.push(foldEffect.of(range));
    pos = (range ? view.lineBlockAt(range.to) : line).to + 1;
  }
  if (effects.length) view.dispatch({
    effects: maybeEnable(view.state, effects)
  });
  return !!effects.length;
};
/**
Unfold all folded code.
*/
var unfoldAll = function unfoldAll(view) {
  var field = view.state.field(foldState, false);
  if (!field || !field.size) return false;
  var effects = [];
  field.between(0, view.state.doc.length, function (from, to) {
    effects.push(unfoldEffect.of({
      from: from,
      to: to
    }));
  });
  view.dispatch({
    effects: effects
  });
  return true;
};
/**
Default fold-related key bindings.

 - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode).
 - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#language.unfoldCode).
 - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#language.foldAll).
 - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#language.unfoldAll).
*/
var foldKeymap = [{
  key: "Ctrl-Shift-[",
  mac: "Cmd-Alt-[",
  run: foldCode
}, {
  key: "Ctrl-Shift-]",
  mac: "Cmd-Alt-]",
  run: unfoldCode
}, {
  key: "Ctrl-Alt-[",
  run: foldAll
}, {
  key: "Ctrl-Alt-]",
  run: unfoldAll
}];
var defaultConfig = {
  placeholderDOM: null,
  placeholderText: "…"
};
var foldConfig = /*@__PURE__*/Facet.define({
  combine: function combine(values) {
    return combineConfig(values, defaultConfig);
  }
});
/**
Create an extension that configures code folding.
*/
function codeFolding(config) {
  var result = [foldState, baseTheme$1$2];
  if (config) result.push(foldConfig.of(config));
  return result;
}
var foldWidget = /*@__PURE__*/Decoration.replace({
  widget: /*@__PURE__*/new ( /*#__PURE__*/function (_WidgetType) {
    _inherits(_class2, _WidgetType);
    var _super4 = _createSuper(_class2);
    function _class2() {
      _classCallCheck(this, _class2);
      return _super4.apply(this, arguments);
    }
    _createClass(_class2, [{
      key: "toDOM",
      value: function toDOM(view) {
        var state = view.state,
          conf = state.facet(foldConfig);
        var onclick = function onclick(event) {
          var line = view.lineBlockAt(view.posAtDOM(event.target));
          var folded = findFold(view.state, line.from, line.to);
          if (folded) view.dispatch({
            effects: unfoldEffect.of(folded)
          });
          event.preventDefault();
        };
        if (conf.placeholderDOM) return conf.placeholderDOM(view, onclick);
        var element = document.createElement("span");
        element.textContent = conf.placeholderText;
        element.setAttribute("aria-label", state.phrase("folded code"));
        element.title = state.phrase("unfold");
        element.className = "cm-foldPlaceholder";
        element.onclick = onclick;
        return element;
      }
    }]);
    return _class2;
  }(WidgetType))()
});
var foldGutterDefaults = {
  openText: "⌄",
  closedText: "›",
  markerDOM: null,
  domEventHandlers: {},
  foldingChanged: function foldingChanged() {
    return false;
  }
};
var FoldMarker = /*#__PURE__*/function (_GutterMarker) {
  _inherits(FoldMarker, _GutterMarker);
  var _super5 = _createSuper(FoldMarker);
  function FoldMarker(config, open) {
    var _this8;
    _classCallCheck(this, FoldMarker);
    _this8 = _super5.call(this);
    _this8.config = config;
    _this8.open = open;
    return _this8;
  }
  _createClass(FoldMarker, [{
    key: "eq",
    value: function eq(other) {
      return this.config == other.config && this.open == other.open;
    }
  }, {
    key: "toDOM",
    value: function toDOM(view) {
      if (this.config.markerDOM) return this.config.markerDOM(this.open);
      var span = document.createElement("span");
      span.textContent = this.open ? this.config.openText : this.config.closedText;
      span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
      return span;
    }
  }]);
  return FoldMarker;
}(GutterMarker);
/**
Create an extension that registers a fold gutter, which shows a
fold status indicator before foldable lines (which can be clicked
to fold or unfold the line).
*/
function foldGutter() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);
  var canFold = new FoldMarker(fullConfig, true),
    canUnfold = new FoldMarker(fullConfig, false);
  var _markers = ViewPlugin.fromClass( /*#__PURE__*/function () {
    function _class3(view) {
      _classCallCheck(this, _class3);
      this.from = view.viewport.from;
      this.markers = this.buildMarkers(view);
    }
    _createClass(_class3, [{
      key: "update",
      value: function update(_update2) {
        if (_update2.docChanged || _update2.viewportChanged || _update2.startState.facet(language) != _update2.state.facet(language) || _update2.startState.field(foldState, false) != _update2.state.field(foldState, false) || syntaxTree(_update2.startState) != syntaxTree(_update2.state) || fullConfig.foldingChanged(_update2)) this.markers = this.buildMarkers(_update2.view);
      }
    }, {
      key: "buildMarkers",
      value: function buildMarkers(view) {
        var builder = new RangeSetBuilder();
        var _iterator19 = _createForOfIteratorHelper(view.viewportLineBlocks),
          _step19;
        try {
          for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
            var line = _step19.value;
            var mark = findFold(view.state, line.from, line.to) ? canUnfold : foldable(view.state, line.from, line.to) ? canFold : null;
            if (mark) builder.add(line.from, line.from, mark);
          }
        } catch (err) {
          _iterator19.e(err);
        } finally {
          _iterator19.f();
        }
        return builder.finish();
      }
    }]);
    return _class3;
  }());
  var domEventHandlers = fullConfig.domEventHandlers;
  return [_markers, gutter({
    "class": "cm-foldGutter",
    markers: function markers(view) {
      var _a;
      return ((_a = view.plugin(_markers)) === null || _a === void 0 ? void 0 : _a.markers) || RangeSet.empty;
    },
    initialSpacer: function initialSpacer() {
      return new FoldMarker(fullConfig, false);
    },
    domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), {
      click: function click(view, line, event) {
        if (domEventHandlers.click && domEventHandlers.click(view, line, event)) return true;
        var folded = findFold(view.state, line.from, line.to);
        if (folded) {
          view.dispatch({
            effects: unfoldEffect.of(folded)
          });
          return true;
        }
        var range = foldable(view.state, line.from, line.to);
        if (range) {
          view.dispatch({
            effects: foldEffect.of(range)
          });
          return true;
        }
        return false;
      }
    })
  }), codeFolding()];
}
var baseTheme$1$2 = /*@__PURE__*/EditorView.baseTheme({
  ".cm-foldPlaceholder": {
    backgroundColor: "#eee",
    border: "1px solid #ddd",
    color: "#888",
    borderRadius: ".2em",
    margin: "0 1px",
    padding: "0 1px",
    cursor: "pointer"
  },
  ".cm-foldGutter span": {
    padding: "0 1px",
    cursor: "pointer"
  }
});

/**
A highlight style associates CSS styles with higlighting
[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).
*/
var HighlightStyle = /*#__PURE__*/function () {
  function HighlightStyle(
  /**
  The tag styles used to create this highlight style.
  */
  specs, options) {
    _classCallCheck(this, HighlightStyle);
    this.specs = specs;
    var modSpec;
    function def(spec) {
      var cls = StyleModule.newName();
      (modSpec || (modSpec = Object.create(null)))["." + cls] = spec;
      return cls;
    }
    var all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : undefined;
    var scopeOpt = options.scope;
    this.scope = scopeOpt instanceof Language ? function (type) {
      return type.prop(languageDataProp) == scopeOpt.data;
    } : scopeOpt ? function (type) {
      return type == scopeOpt;
    } : undefined;
    this.style = tagHighlighter(specs.map(function (style) {
      return {
        tag: style.tag,
        "class": style["class"] || def(Object.assign({}, style, {
          tag: null
        }))
      };
    }), {
      all: all
    }).style;
    this.module = modSpec ? new StyleModule(modSpec) : null;
    this.themeType = options.themeType;
  }
  /**
  Create a highlighter style that associates the given styles to
  the given tags. The specs must be objects that hold a style tag
  or array of tags in their `tag` property, and either a single
  `class` property providing a static CSS class (for highlighter
  that rely on external styling), or a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
  set of CSS properties (which define the styling for those tags).
  
  The CSS rules created for a highlighter will be emitted in the
  order of the spec's properties. That means that for elements that
  have multiple tags associated with them, styles defined further
  down in the list will have a higher CSS precedence than styles
  defined earlier.
  */
  _createClass(HighlightStyle, null, [{
    key: "define",
    value: function define(specs, options) {
      return new HighlightStyle(specs, options || {});
    }
  }]);
  return HighlightStyle;
}();
var highlighterFacet = /*@__PURE__*/Facet.define();
var fallbackHighlighter = /*@__PURE__*/Facet.define({
  combine: function combine(values) {
    return values.length ? [values[0]] : null;
  }
});
function getHighlighters(state) {
  var main = state.facet(highlighterFacet);
  return main.length ? main : state.facet(fallbackHighlighter);
}
/**
Wrap a highlighter in an editor extension that uses it to apply
syntax highlighting to the editor content.

When multiple (non-fallback) styles are provided, the styling
applied is the union of the classes they emit.
*/
function syntaxHighlighting(highlighter, options) {
  var ext = [treeHighlighter],
    themeType;
  if (highlighter instanceof HighlightStyle) {
    if (highlighter.module) ext.push(EditorView.styleModule.of(highlighter.module));
    themeType = highlighter.themeType;
  }
  if (options === null || options === void 0 ? void 0 : options.fallback) ext.push(fallbackHighlighter.of(highlighter));else if (themeType) ext.push(highlighterFacet.computeN([EditorView.darkTheme], function (state) {
    return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
  }));else ext.push(highlighterFacet.of(highlighter));
  return ext;
}
var TreeHighlighter = /*#__PURE__*/function () {
  function TreeHighlighter(view) {
    _classCallCheck(this, TreeHighlighter);
    this.markCache = Object.create(null);
    this.tree = syntaxTree(view.state);
    this.decorations = this.buildDeco(view, getHighlighters(view.state));
  }
  _createClass(TreeHighlighter, [{
    key: "update",
    value: function update(_update3) {
      var tree = syntaxTree(_update3.state),
        highlighters = getHighlighters(_update3.state);
      var styleChange = highlighters != getHighlighters(_update3.startState);
      if (tree.length < _update3.view.viewport.to && !styleChange && tree.type == this.tree.type) {
        this.decorations = this.decorations.map(_update3.changes);
      } else if (tree != this.tree || _update3.viewportChanged || styleChange) {
        this.tree = tree;
        this.decorations = this.buildDeco(_update3.view, highlighters);
      }
    }
  }, {
    key: "buildDeco",
    value: function buildDeco(view, highlighters) {
      var _this9 = this;
      if (!highlighters || !this.tree.length) return Decoration.none;
      var builder = new RangeSetBuilder();
      var _iterator21 = _createForOfIteratorHelper(view.visibleRanges),
        _step21;
      try {
        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
          var _step21$value = _step21.value,
            from = _step21$value.from,
            to = _step21$value.to;
          highlightTree(this.tree, highlighters, function (from, to, style) {
            builder.add(from, to, _this9.markCache[style] || (_this9.markCache[style] = Decoration.mark({
              "class": style
            })));
          }, from, to);
        }
      } catch (err) {
        _iterator21.e(err);
      } finally {
        _iterator21.f();
      }
      return builder.finish();
    }
  }]);
  return TreeHighlighter;
}();
var treeHighlighter = /*@__PURE__*/Prec.high( /*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {
  decorations: function decorations(v) {
    return v.decorations;
  }
}));
/**
A default highlight style (works well with light themes).
*/
var defaultHighlightStyle = /*@__PURE__*/HighlightStyle.define([{
  tag: tags.meta,
  color: "#404740"
}, {
  tag: tags.link,
  textDecoration: "underline"
}, {
  tag: tags.heading,
  textDecoration: "underline",
  fontWeight: "bold"
}, {
  tag: tags.emphasis,
  fontStyle: "italic"
}, {
  tag: tags.strong,
  fontWeight: "bold"
}, {
  tag: tags.strikethrough,
  textDecoration: "line-through"
}, {
  tag: tags.keyword,
  color: "#708"
}, {
  tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],
  color: "#219"
}, {
  tag: [tags.literal, tags.inserted],
  color: "#164"
}, {
  tag: [tags.string, tags.deleted],
  color: "#a11"
}, {
  tag: [tags.regexp, tags.escape, /*@__PURE__*/tags.special(tags.string)],
  color: "#e40"
}, {
  tag: /*@__PURE__*/tags.definition(tags.variableName),
  color: "#00f"
}, {
  tag: /*@__PURE__*/tags.local(tags.variableName),
  color: "#30a"
}, {
  tag: [tags.typeName, tags.namespace],
  color: "#085"
}, {
  tag: tags.className,
  color: "#167"
}, {
  tag: [/*@__PURE__*/tags.special(tags.variableName), tags.macroName],
  color: "#256"
}, {
  tag: /*@__PURE__*/tags.definition(tags.propertyName),
  color: "#00c"
}, {
  tag: tags.comment,
  color: "#940"
}, {
  tag: tags.invalid,
  color: "#f00"
}]);
var baseTheme$3 = /*@__PURE__*/EditorView.baseTheme({
  "&.cm-focused .cm-matchingBracket": {
    backgroundColor: "#328c8252"
  },
  "&.cm-focused .cm-nonmatchingBracket": {
    backgroundColor: "#bb555544"
  }
});
var DefaultScanDist = 10000,
  DefaultBrackets = "()[]{}";
var bracketMatchingConfig = /*@__PURE__*/Facet.define({
  combine: function combine(configs) {
    return combineConfig(configs, {
      afterCursor: true,
      brackets: DefaultBrackets,
      maxScanDistance: DefaultScanDist,
      renderMatch: defaultRenderMatch
    });
  }
});
var matchingMark = /*@__PURE__*/Decoration.mark({
    "class": "cm-matchingBracket"
  }),
  nonmatchingMark = /*@__PURE__*/Decoration.mark({
    "class": "cm-nonmatchingBracket"
  });
function defaultRenderMatch(match) {
  var decorations = [];
  var mark = match.matched ? matchingMark : nonmatchingMark;
  decorations.push(mark.range(match.start.from, match.start.to));
  if (match.end) decorations.push(mark.range(match.end.from, match.end.to));
  return decorations;
}
var bracketMatchingState = /*@__PURE__*/StateField.define({
  create: function create() {
    return Decoration.none;
  },
  update: function update(deco, tr) {
    if (!tr.docChanged && !tr.selection) return deco;
    var decorations = [];
    var config = tr.state.facet(bracketMatchingConfig);
    var _iterator22 = _createForOfIteratorHelper(tr.state.selection.ranges),
      _step22;
    try {
      for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
        var range = _step22.value;
        if (!range.empty) continue;
        var match = matchBrackets(tr.state, range.head, -1, config) || range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config) || config.afterCursor && (matchBrackets(tr.state, range.head, 1, config) || range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config));
        if (match) decorations = decorations.concat(config.renderMatch(match, tr.state));
      }
    } catch (err) {
      _iterator22.e(err);
    } finally {
      _iterator22.f();
    }
    return Decoration.set(decorations, true);
  },
  provide: function provide(f) {
    return EditorView.decorations.from(f);
  }
});
var bracketMatchingUnique = [bracketMatchingState, baseTheme$3];
/**
Create an extension that enables bracket matching. Whenever the
cursor is next to a bracket, that bracket and the one it matches
are highlighted. Or, when no matching bracket is found, another
highlighting style is used to indicate this.
*/
function bracketMatching() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return [bracketMatchingConfig.of(config), bracketMatchingUnique];
}
/**
When larger syntax nodes, such as HTML tags, are marked as
opening/closing, it can be a bit messy to treat the whole node as
a matchable bracket. This node prop allows you to define, for such
a node, a ‘handle’—the part of the node that is highlighted, and
that the cursor must be on to activate highlighting in the first
place.
*/
var bracketMatchingHandle = /*@__PURE__*/new NodeProp();
function matchingNodes(node, dir, brackets) {
  var byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
  if (byProp) return byProp;
  if (node.name.length == 1) {
    var index = brackets.indexOf(node.name);
    if (index > -1 && index % 2 == (dir < 0 ? 1 : 0)) return [brackets[index + dir]];
  }
  return null;
}
function findHandle(node) {
  var hasHandle = node.type.prop(bracketMatchingHandle);
  return hasHandle ? hasHandle(node.node) : node;
}
/**
Find the matching bracket for the token at `pos`, scanning
direction `dir`. Only the `brackets` and `maxScanDistance`
properties are used from `config`, if given. Returns null if no
bracket was found at `pos`, or a match result otherwise.
*/
function matchBrackets(state, pos, dir) {
  var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var maxScanDistance = config.maxScanDistance || DefaultScanDist,
    brackets = config.brackets || DefaultBrackets;
  var tree = syntaxTree(state),
    node = tree.resolveInner(pos, dir);
  for (var cur = node; cur; cur = cur.parent) {
    var matches = matchingNodes(cur.type, dir, brackets);
    if (matches && cur.from < cur.to) {
      var handle = findHandle(cur);
      if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to)) return matchMarkedBrackets(state, pos, dir, cur, handle, matches, brackets);
    }
  }
  return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
}
function matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {
  var parent = token.parent,
    firstToken = {
      from: handle.from,
      to: handle.to
    };
  var depth = 0,
    cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
  if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to))) do {
    if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
      if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
        var endHandle = findHandle(cursor);
        return {
          start: firstToken,
          end: endHandle ? {
            from: endHandle.from,
            to: endHandle.to
          } : undefined,
          matched: true
        };
      } else if (matchingNodes(cursor.type, dir, brackets)) {
        depth++;
      } else if (matchingNodes(cursor.type, -dir, brackets)) {
        if (depth == 0) {
          var _endHandle = findHandle(cursor);
          return {
            start: firstToken,
            end: _endHandle && _endHandle.from < _endHandle.to ? {
              from: _endHandle.from,
              to: _endHandle.to
            } : undefined,
            matched: false
          };
        }
        depth--;
      }
    }
  } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
  return {
    start: firstToken,
    matched: false
  };
}
function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
  var startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
  var bracket = brackets.indexOf(startCh);
  if (bracket < 0 || bracket % 2 == 0 != dir > 0) return null;
  var startToken = {
    from: dir < 0 ? pos - 1 : pos,
    to: dir > 0 ? pos + 1 : pos
  };
  var iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0),
    depth = 0;
  for (var distance = 0; !iter.next().done && distance <= maxScanDistance;) {
    var text = iter.value;
    if (dir < 0) distance += text.length;
    var basePos = pos + distance * dir;
    for (var _pos2 = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; _pos2 != end; _pos2 += dir) {
      var found = brackets.indexOf(text[_pos2]);
      if (found < 0 || tree.resolveInner(basePos + _pos2, 1).type != tokenType) continue;
      if (found % 2 == 0 == dir > 0) {
        depth++;
      } else if (depth == 1) {
        // Closing
        return {
          start: startToken,
          end: {
            from: basePos + _pos2,
            to: basePos + _pos2 + 1
          },
          matched: found >> 1 == bracket >> 1
        };
      } else {
        depth--;
      }
    }
    if (dir > 0) distance += text.length;
  }
  return iter.done ? {
    start: startToken,
    matched: false
  } : null;
}
var noTokens = /*@__PURE__*/Object.create(null);
var typeArray = [NodeType.none];
var warned = [];
var defaultTable = /*@__PURE__*/Object.create(null);
for (var _i = 0, _arr = [["variable", "variableName"], ["variable-2", "variableName.special"], ["string-2", "string.special"], ["def", "variableName.definition"], ["tag", "tagName"], ["attribute", "attributeName"], ["type", "typeName"], ["builtin", "variableName.standard"], ["qualifier", "modifier"], ["error", "invalid"], ["header", "heading"], ["property", "propertyName"]]; _i < _arr.length; _i++) {
  var _arr$_i = _slicedToArray(_arr[_i], 2),
    legacyName = _arr$_i[0],
    name = _arr$_i[1];
  defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);
}
function warnForPart(part, msg) {
  if (warned.indexOf(part) > -1) return;
  warned.push(part);
  console.warn(msg);
}
function createTokenType(extra, tagStr) {
  var tag = null;
  var _iterator24 = _createForOfIteratorHelper(tagStr.split(".")),
    _step24;
  try {
    for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
      var part = _step24.value;
      var value = extra[part] || tags[part];
      if (!value) {
        warnForPart(part, "Unknown highlighting tag ".concat(part));
      } else if (typeof value == "function") {
        if (!tag) warnForPart(part, "Modifier ".concat(part, " used at start of tag"));else tag = value(tag);
      } else {
        if (tag) warnForPart(part, "Tag ".concat(part, " used as modifier"));else tag = value;
      }
    }
  } catch (err) {
    _iterator24.e(err);
  } finally {
    _iterator24.f();
  }
  if (!tag) return 0;
  var name = tagStr.replace(/ /g, "_"),
    type = NodeType.define({
      id: typeArray.length,
      name: name,
      props: [styleTags(_defineProperty({}, name, tag))]
    });
  typeArray.push(type);
  return type.id;
}

/**
Comment or uncomment the current selection. Will use line comments
if available, otherwise falling back to block comments.
*/
var toggleComment = function toggleComment(target) {
  var state = target.state,
    line = state.doc.lineAt(state.selection.main.from),
    config = getConfig(target.state, line.from);
  return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;
};
function command(f, option) {
  return function (_ref) {
    var state = _ref.state,
      dispatch = _ref.dispatch;
    if (state.readOnly) return false;
    var tr = f(option, state);
    if (!tr) return false;
    dispatch(state.update(tr));
    return true;
  };
}
/**
Comment or uncomment the current selection using line comments.
The line comment syntax is taken from the
[`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
*/
var toggleLineComment = /*@__PURE__*/command(changeLineComment, 0 /* CommentOption.Toggle */);
/**
Comment or uncomment the current selection using block comments.
The block comment syntax is taken from the
[`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
*/
var toggleBlockComment = /*@__PURE__*/command(changeBlockComment, 0 /* CommentOption.Toggle */);
/**
Comment or uncomment the lines around the current selection using
block comments.
*/
var toggleBlockCommentByLine = /*@__PURE__*/command(function (o, s) {
  return changeBlockComment(o, s, selectedLineRanges(s));
}, 0 /* CommentOption.Toggle */);
function getConfig(state, pos) {
  var data = state.languageDataAt("commentTokens", pos);
  return data.length ? data[0] : {};
}
var SearchMargin = 50;
/**
Determines if the given range is block-commented in the given
state.
*/
function findBlockComment(state, _ref2, from, to) {
  var open = _ref2.open,
    close = _ref2.close;
  var textBefore = state.sliceDoc(from - SearchMargin, from);
  var textAfter = state.sliceDoc(to, to + SearchMargin);
  var spaceBefore = /\s*$/.exec(textBefore)[0].length,
    spaceAfter = /^\s*/.exec(textAfter)[0].length;
  var beforeOff = textBefore.length - spaceBefore;
  if (textBefore.slice(beforeOff - open.length, beforeOff) == open && textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
    return {
      open: {
        pos: from - spaceBefore,
        margin: spaceBefore && 1
      },
      close: {
        pos: to + spaceAfter,
        margin: spaceAfter && 1
      }
    };
  }
  var startText, endText;
  if (to - from <= 2 * SearchMargin) {
    startText = endText = state.sliceDoc(from, to);
  } else {
    startText = state.sliceDoc(from, from + SearchMargin);
    endText = state.sliceDoc(to - SearchMargin, to);
  }
  var startSpace = /^\s*/.exec(startText)[0].length,
    endSpace = /\s*$/.exec(endText)[0].length;
  var endOff = endText.length - endSpace - close.length;
  if (startText.slice(startSpace, startSpace + open.length) == open && endText.slice(endOff, endOff + close.length) == close) {
    return {
      open: {
        pos: from + startSpace + open.length,
        margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0
      },
      close: {
        pos: to - endSpace - close.length,
        margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0
      }
    };
  }
  return null;
}
function selectedLineRanges(state) {
  var ranges = [];
  var _iterator = _createForOfIteratorHelper(state.selection.ranges),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var r = _step.value;
      var fromLine = state.doc.lineAt(r.from);
      var toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);
      var last = ranges.length - 1;
      if (last >= 0 && ranges[last].to > fromLine.from) ranges[last].to = toLine.to;else ranges.push({
        from: fromLine.from + /^\s*/.exec(fromLine.text)[0].length,
        to: toLine.to
      });
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return ranges;
}
// Performs toggle, comment and uncomment of block comments in
// languages that support them.
function changeBlockComment(option, state) {
  var ranges = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : state.selection.ranges;
  var tokens = ranges.map(function (r) {
    return getConfig(state, r.from).block;
  });
  if (!tokens.every(function (c) {
    return c;
  })) return null;
  var comments = ranges.map(function (r, i) {
    return findBlockComment(state, tokens[i], r.from, r.to);
  });
  if (option != 2 /* CommentOption.Uncomment */ && !comments.every(function (c) {
    return c;
  })) {
    return {
      changes: state.changes(ranges.map(function (range, i) {
        if (comments[i]) return [];
        return [{
          from: range.from,
          insert: tokens[i].open + " "
        }, {
          from: range.to,
          insert: " " + tokens[i].close
        }];
      }))
    };
  } else if (option != 1 /* CommentOption.Comment */ && comments.some(function (c) {
    return c;
  })) {
    var changes = [];
    for (var i = 0, comment; i < comments.length; i++) if (comment = comments[i]) {
      var token = tokens[i],
        _comment = comment,
        open = _comment.open,
        close = _comment.close;
      changes.push({
        from: open.pos - token.open.length,
        to: open.pos + open.margin
      }, {
        from: close.pos - close.margin,
        to: close.pos + token.close.length
      });
    }
    return {
      changes: changes
    };
  }
  return null;
}
// Performs toggle, comment and uncomment of line comments.
function changeLineComment(option, state) {
  var ranges = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : state.selection.ranges;
  var lines = [];
  var prevLine = -1;
  var _iterator2 = _createForOfIteratorHelper(ranges),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _step2$value = _step2.value,
        _from = _step2$value.from,
        _to = _step2$value.to;
      var startI = lines.length,
        minIndent = 1e9;
      var _token2 = getConfig(state, _from).line;
      if (!_token2) continue;
      for (var pos = _from; pos <= _to;) {
        var _line2 = state.doc.lineAt(pos);
        if (_line2.from > prevLine && (_from == _to || _to > _line2.from)) {
          prevLine = _line2.from;
          var _indent = /^\s*/.exec(_line2.text)[0].length;
          var _empty = _indent == _line2.length;
          var _comment2 = _line2.text.slice(_indent, _indent + _token2.length) == _token2 ? _indent : -1;
          if (_indent < _line2.text.length && _indent < minIndent) minIndent = _indent;
          lines.push({
            line: _line2,
            comment: _comment2,
            token: _token2,
            indent: _indent,
            empty: _empty,
            single: false
          });
        }
        pos = _line2.to + 1;
      }
      if (minIndent < 1e9) for (var i = startI; i < lines.length; i++) if (lines[i].indent < lines[i].line.text.length) lines[i].indent = minIndent;
      if (lines.length == startI + 1) lines[startI].single = true;
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  if (option != 2 /* CommentOption.Uncomment */ && lines.some(function (l) {
    return l.comment < 0 && (!l.empty || l.single);
  })) {
    var changes = [];
    var _iterator3 = _createForOfIteratorHelper(lines),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var _step3$value = _step3.value,
          line = _step3$value.line,
          token = _step3$value.token,
          indent = _step3$value.indent,
          empty = _step3$value.empty,
          single = _step3$value.single;
        if (single || !empty) changes.push({
          from: line.from + indent,
          insert: token + " "
        });
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
    var changeSet = state.changes(changes);
    return {
      changes: changeSet,
      selection: state.selection.map(changeSet, 1)
    };
  } else if (option != 1 /* CommentOption.Comment */ && lines.some(function (l) {
    return l.comment >= 0;
  })) {
    var _changes = [];
    var _iterator4 = _createForOfIteratorHelper(lines),
      _step4;
    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var _step4$value = _step4.value,
          _line = _step4$value.line,
          comment = _step4$value.comment,
          _token = _step4$value.token;
        if (comment >= 0) {
          var from = _line.from + comment,
            to = from + _token.length;
          if (_line.text[to - _line.from] == " ") to++;
          _changes.push({
            from: from,
            to: to
          });
        }
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
    return {
      changes: _changes
    };
  }
  return null;
}
var fromHistory = /*@__PURE__*/Annotation.define();
/**
Transaction annotation that will prevent that transaction from
being combined with other transactions in the undo history. Given
`"before"`, it'll prevent merging with previous transactions. With
`"after"`, subsequent transactions won't be combined with this
one. With `"full"`, the transaction is isolated on both sides.
*/
var isolateHistory = /*@__PURE__*/Annotation.define();
/**
This facet provides a way to register functions that, given a
transaction, provide a set of effects that the history should
store when inverting the transaction. This can be used to
integrate some kinds of effects in the history, so that they can
be undone (and redone again).
*/
var invertedEffects = /*@__PURE__*/Facet.define();
var historyConfig = /*@__PURE__*/Facet.define({
  combine: function combine(configs) {
    return combineConfig(configs, {
      minDepth: 100,
      newGroupDelay: 500,
      joinToEvent: function joinToEvent(_t, isAdjacent) {
        return isAdjacent;
      }
    }, {
      minDepth: Math.max,
      newGroupDelay: Math.min,
      joinToEvent: function joinToEvent(a, b) {
        return function (tr, adj) {
          return a(tr, adj) || b(tr, adj);
        };
      }
    });
  }
});
function changeEnd(changes) {
  var end = 0;
  changes.iterChangedRanges(function (_, to) {
    return end = to;
  });
  return end;
}
var historyField_ = /*@__PURE__*/StateField.define({
  create: function create() {
    return HistoryState.empty;
  },
  update: function update(state, tr) {
    var config = tr.state.facet(historyConfig);
    var fromHist = tr.annotation(fromHistory);
    if (fromHist) {
      var selection = tr.docChanged ? EditorSelection.single(changeEnd(tr.changes)) : undefined;
      var item = HistEvent.fromTransaction(tr, selection),
        from = fromHist.side;
      var other = from == 0 /* BranchName.Done */ ? state.undone : state.done;
      if (item) other = updateBranch(other, other.length, config.minDepth, item);else other = _addSelection(other, tr.startState.selection);
      return new HistoryState(from == 0 /* BranchName.Done */ ? fromHist.rest : other, from == 0 /* BranchName.Done */ ? other : fromHist.rest);
    }
    var isolate = tr.annotation(isolateHistory);
    if (isolate == "full" || isolate == "before") state = state.isolate();
    if (tr.annotation(Transaction.addToHistory) === false) return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
    var event = HistEvent.fromTransaction(tr);
    var time = tr.annotation(Transaction.time),
      userEvent = tr.annotation(Transaction.userEvent);
    if (event) state = state.addChanges(event, time, userEvent, config, tr);else if (tr.selection) state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);
    if (isolate == "full" || isolate == "after") state = state.isolate();
    return state;
  },
  toJSON: function toJSON(value) {
    return {
      done: value.done.map(function (e) {
        return e.toJSON();
      }),
      undone: value.undone.map(function (e) {
        return e.toJSON();
      })
    };
  },
  fromJSON: function fromJSON(json) {
    return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
  }
});
/**
Create a history extension with the given configuration.
*/
function history() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return [historyField_, historyConfig.of(config), EditorView.domEventHandlers({
    beforeinput: function beforeinput(e, view) {
      var command = e.inputType == "historyUndo" ? undo : e.inputType == "historyRedo" ? redo : null;
      if (!command) return false;
      e.preventDefault();
      return command(view);
    }
  })];
}
function cmd(side, selection) {
  return function (_ref3) {
    var state = _ref3.state,
      dispatch = _ref3.dispatch;
    if (!selection && state.readOnly) return false;
    var historyState = state.field(historyField_, false);
    if (!historyState) return false;
    var tr = historyState.pop(side, state, selection);
    if (!tr) return false;
    dispatch(tr);
    return true;
  };
}
/**
Undo a single group of history events. Returns false if no group
was available.
*/
var undo = /*@__PURE__*/cmd(0 /* BranchName.Done */, false);
/**
Redo a group of history events. Returns false if no group was
available.
*/
var redo = /*@__PURE__*/cmd(1 /* BranchName.Undone */, false);
/**
Undo a change or selection change.
*/
var undoSelection = /*@__PURE__*/cmd(0 /* BranchName.Done */, true);
/**
Redo a change or selection change.
*/
var redoSelection = /*@__PURE__*/cmd(1 /* BranchName.Undone */, true);
// History events store groups of changes or effects that need to be
// undone/redone together.
var HistEvent = /*#__PURE__*/function () {
  function HistEvent(
  // The changes in this event. Normal events hold at least one
  // change or effect. But it may be necessary to store selection
  // events before the first change, in which case a special type of
  // instance is created which doesn't hold any changes, with
  // changes == startSelection == undefined
  changes,
  // The effects associated with this event
  effects,
  // Accumulated mapping (from addToHistory==false) that should be
  // applied to events below this one.
  mapped,
  // The selection before this event
  startSelection,
  // Stores selection changes after this event, to be used for
  // selection undo/redo.
  selectionsAfter) {
    _classCallCheck(this, HistEvent);
    this.changes = changes;
    this.effects = effects;
    this.mapped = mapped;
    this.startSelection = startSelection;
    this.selectionsAfter = selectionsAfter;
  }
  _createClass(HistEvent, [{
    key: "setSelAfter",
    value: function setSelAfter(after) {
      return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var _a, _b, _c;
      return {
        changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),
        mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
        startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
        selectionsAfter: this.selectionsAfter.map(function (s) {
          return s.toJSON();
        })
      };
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON(json) {
      return new HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
    }
    // This does not check `addToHistory` and such, it assumes the
    // transaction needs to be converted to an item. Returns null when
    // there are no changes or effects in the transaction.
  }, {
    key: "fromTransaction",
    value: function fromTransaction(tr, selection) {
      var effects = none$1;
      var _iterator5 = _createForOfIteratorHelper(tr.startState.facet(invertedEffects)),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var invert = _step5.value;
          var result = invert(tr);
          if (result.length) effects = effects.concat(result);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      if (!effects.length && tr.changes.empty) return null;
      return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, selection || tr.startState.selection, none$1);
    }
  }, {
    key: "selection",
    value: function selection(selections) {
      return new HistEvent(undefined, none$1, undefined, undefined, selections);
    }
  }]);
  return HistEvent;
}();
function updateBranch(branch, to, maxLen, newEvent) {
  var start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
  var newBranch = branch.slice(start, to);
  newBranch.push(newEvent);
  return newBranch;
}
function isAdjacent(a, b) {
  var ranges = [],
    isAdjacent = false;
  a.iterChangedRanges(function (f, t) {
    return ranges.push(f, t);
  });
  b.iterChangedRanges(function (_f, _t, f, t) {
    for (var i = 0; i < ranges.length;) {
      var from = ranges[i++],
        to = ranges[i++];
      if (t >= from && f <= to) isAdjacent = true;
    }
  });
  return isAdjacent;
}
function eqSelectionShape(a, b) {
  return a.ranges.length == b.ranges.length && a.ranges.filter(function (r, i) {
    return r.empty != b.ranges[i].empty;
  }).length === 0;
}
function conc(a, b) {
  return !a.length ? b : !b.length ? a : a.concat(b);
}
var none$1 = [];
var MaxSelectionsPerEvent = 200;
function _addSelection(branch, selection) {
  if (!branch.length) {
    return [HistEvent.selection([selection])];
  } else {
    var lastEvent = branch[branch.length - 1];
    var sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
    if (sels.length && sels[sels.length - 1].eq(selection)) return branch;
    sels.push(selection);
    return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
  }
}
// Assumes the top item has one or more selectionAfter values
function popSelection(branch) {
  var last = branch[branch.length - 1];
  var newBranch = branch.slice();
  newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
  return newBranch;
}
// Add a mapping to the top event in the given branch. If this maps
// away all the changes and effects in that item, drop it and
// propagate the mapping to the next item.
function addMappingToBranch(branch, mapping) {
  if (!branch.length) return branch;
  var length = branch.length,
    selections = none$1;
  while (length) {
    var event = mapEvent(branch[length - 1], mapping, selections);
    if (event.changes && !event.changes.empty || event.effects.length) {
      // Event survived mapping
      var result = branch.slice(0, length);
      result[length - 1] = event;
      return result;
    } else {
      // Drop this event, since there's no changes or effects left
      mapping = event.mapped;
      length--;
      selections = event.selectionsAfter;
    }
  }
  return selections.length ? [HistEvent.selection(selections)] : none$1;
}
function mapEvent(event, mapping, extraSelections) {
  var selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(function (s) {
    return s.map(mapping);
  }) : none$1, extraSelections);
  // Change-less events don't store mappings (they are always the last event in a branch)
  if (!event.changes) return HistEvent.selection(selections);
  var mappedChanges = event.changes.map(mapping),
    before = mapping.mapDesc(event.changes, true);
  var fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
  return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
}
var joinableUserEvent = /^(input\.type|delete)($|\.)/;
var HistoryState = /*#__PURE__*/function () {
  function HistoryState(done, undone) {
    var prevTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var prevUserEvent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
    _classCallCheck(this, HistoryState);
    this.done = done;
    this.undone = undone;
    this.prevTime = prevTime;
    this.prevUserEvent = prevUserEvent;
  }
  _createClass(HistoryState, [{
    key: "isolate",
    value: function isolate() {
      return this.prevTime ? new HistoryState(this.done, this.undone) : this;
    }
  }, {
    key: "addChanges",
    value: function addChanges(event, time, userEvent, config, tr) {
      var done = this.done,
        lastEvent = done[done.length - 1];
      if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes && (!userEvent || joinableUserEvent.test(userEvent)) && (!lastEvent.selectionsAfter.length && time - this.prevTime < config.newGroupDelay && config.joinToEvent(tr, isAdjacent(lastEvent.changes, event.changes)) ||
      // For compose (but not compose.start) events, always join with previous event
      userEvent == "input.type.compose")) {
        done = updateBranch(done, done.length - 1, config.minDepth, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none$1));
      } else {
        done = updateBranch(done, done.length, config.minDepth, event);
      }
      return new HistoryState(done, none$1, time, userEvent);
    }
  }, {
    key: "addSelection",
    value: function addSelection(selection, time, userEvent, newGroupDelay) {
      var last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none$1;
      if (last.length > 0 && time - this.prevTime < newGroupDelay && userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) && eqSelectionShape(last[last.length - 1], selection)) return this;
      return new HistoryState(_addSelection(this.done, selection), this.undone, time, userEvent);
    }
  }, {
    key: "addMapping",
    value: function addMapping(mapping) {
      return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
    }
  }, {
    key: "pop",
    value: function pop(side, state, selection) {
      var branch = side == 0 /* BranchName.Done */ ? this.done : this.undone;
      if (branch.length == 0) return null;
      var event = branch[branch.length - 1];
      if (selection && event.selectionsAfter.length) {
        return state.update({
          selection: event.selectionsAfter[event.selectionsAfter.length - 1],
          annotations: fromHistory.of({
            side: side,
            rest: popSelection(branch)
          }),
          userEvent: side == 0 /* BranchName.Done */ ? "select.undo" : "select.redo",
          scrollIntoView: true
        });
      } else if (!event.changes) {
        return null;
      } else {
        var rest = branch.length == 1 ? none$1 : branch.slice(0, branch.length - 1);
        if (event.mapped) rest = addMappingToBranch(rest, event.mapped);
        return state.update({
          changes: event.changes,
          selection: event.startSelection,
          effects: event.effects,
          annotations: fromHistory.of({
            side: side,
            rest: rest
          }),
          filter: false,
          userEvent: side == 0 /* BranchName.Done */ ? "undo" : "redo",
          scrollIntoView: true
        });
      }
    }
  }]);
  return HistoryState;
}();
HistoryState.empty = /*@__PURE__*/new HistoryState(none$1, none$1);
/**
Default key bindings for the undo history.

- Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#commands.undo).
- Mod-y (Mod-Shift-z on macOS) + Ctrl-Shift-z on Linux: [`redo`](https://codemirror.net/6/docs/ref/#commands.redo).
- Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#commands.undoSelection).
- Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#commands.redoSelection).
*/
var historyKeymap = [{
  key: "Mod-z",
  run: undo,
  preventDefault: true
}, {
  key: "Mod-y",
  mac: "Mod-Shift-z",
  run: redo,
  preventDefault: true
}, {
  linux: "Ctrl-Shift-z",
  run: redo,
  preventDefault: true
}, {
  key: "Mod-u",
  run: undoSelection,
  preventDefault: true
}, {
  key: "Alt-u",
  mac: "Mod-Shift-u",
  run: redoSelection,
  preventDefault: true
}];
function updateSel(sel, by) {
  return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
}
function setSel(state, selection) {
  return state.update({
    selection: selection,
    scrollIntoView: true,
    userEvent: "select"
  });
}
function moveSel(_ref4, how) {
  var state = _ref4.state,
    dispatch = _ref4.dispatch;
  var selection = updateSel(state.selection, how);
  if (selection.eq(state.selection)) return false;
  dispatch(setSel(state, selection));
  return true;
}
function rangeEnd(range, forward) {
  return EditorSelection.cursor(forward ? range.to : range.from);
}
function cursorByChar(view, forward) {
  return moveSel(view, function (range) {
    return range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward);
  });
}
function ltrAtCursor(view) {
  return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;
}
/**
Move the selection one character to the left (which is backward in
left-to-right text, forward in right-to-left text).
*/
var cursorCharLeft = function cursorCharLeft(view) {
  return cursorByChar(view, !ltrAtCursor(view));
};
/**
Move the selection one character to the right.
*/
var cursorCharRight = function cursorCharRight(view) {
  return cursorByChar(view, ltrAtCursor(view));
};
function cursorByGroup(view, forward) {
  return moveSel(view, function (range) {
    return range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward);
  });
}
/**
Move the selection to the left across one group of word or
non-word (but also non-space) characters.
*/
var cursorGroupLeft = function cursorGroupLeft(view) {
  return cursorByGroup(view, !ltrAtCursor(view));
};
/**
Move the selection one group to the right.
*/
var cursorGroupRight = function cursorGroupRight(view) {
  return cursorByGroup(view, ltrAtCursor(view));
};
function interestingNode(state, node, bracketProp) {
  if (node.type.prop(bracketProp)) return true;
  var len = node.to - node.from;
  return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
}
function moveBySyntax(state, start, forward) {
  var pos = syntaxTree(state).resolveInner(start.head);
  var bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
  // Scan forward through child nodes to see if there's an interesting
  // node ahead.
  for (var at = start.head;;) {
    var next = forward ? pos.childAfter(at) : pos.childBefore(at);
    if (!next) break;
    if (interestingNode(state, next, bracketProp)) pos = next;else at = forward ? next.to : next.from;
  }
  var bracket = pos.type.prop(bracketProp),
    match,
    newPos;
  if (bracket && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched) newPos = forward ? match.end.to : match.end.from;else newPos = forward ? pos.to : pos.from;
  return EditorSelection.cursor(newPos, forward ? -1 : 1);
}
/**
Move the cursor over the next syntactic element to the left.
*/
var cursorSyntaxLeft = function cursorSyntaxLeft(view) {
  return moveSel(view, function (range) {
    return moveBySyntax(view.state, range, !ltrAtCursor(view));
  });
};
/**
Move the cursor over the next syntactic element to the right.
*/
var cursorSyntaxRight = function cursorSyntaxRight(view) {
  return moveSel(view, function (range) {
    return moveBySyntax(view.state, range, ltrAtCursor(view));
  });
};
function cursorByLine(view, forward) {
  return moveSel(view, function (range) {
    if (!range.empty) return rangeEnd(range, forward);
    var moved = view.moveVertically(range, forward);
    return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
  });
}
/**
Move the selection one line up.
*/
var cursorLineUp = function cursorLineUp(view) {
  return cursorByLine(view, false);
};
/**
Move the selection one line down.
*/
var cursorLineDown = function cursorLineDown(view) {
  return cursorByLine(view, true);
};
function pageInfo(view) {
  var selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2;
  var marginTop = 0,
    marginBottom = 0,
    height;
  if (selfScroll) {
    var _iterator6 = _createForOfIteratorHelper(view.state.facet(EditorView.scrollMargins)),
      _step6;
    try {
      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
        var source = _step6.value;
        var margins = source(view);
        if (margins === null || margins === void 0 ? void 0 : margins.top) marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);
        if (margins === null || margins === void 0 ? void 0 : margins.bottom) marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);
      }
    } catch (err) {
      _iterator6.e(err);
    } finally {
      _iterator6.f();
    }
    height = view.scrollDOM.clientHeight - marginTop - marginBottom;
  } else {
    height = (view.dom.ownerDocument.defaultView || window).innerHeight;
  }
  return {
    marginTop: marginTop,
    marginBottom: marginBottom,
    selfScroll: selfScroll,
    height: Math.max(view.defaultLineHeight, height - 5)
  };
}
function cursorByPage(view, forward) {
  var page = pageInfo(view);
  var state = view.state,
    selection = updateSel(state.selection, function (range) {
      return range.empty ? view.moveVertically(range, forward, page.height) : rangeEnd(range, forward);
    });
  if (selection.eq(state.selection)) return false;
  var effect;
  if (page.selfScroll) {
    var startPos = view.coordsAtPos(state.selection.main.head);
    var scrollRect = view.scrollDOM.getBoundingClientRect();
    var scrollTop = scrollRect.top + page.marginTop,
      scrollBottom = scrollRect.bottom - page.marginBottom;
    if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom) effect = EditorView.scrollIntoView(selection.main.head, {
      y: "start",
      yMargin: startPos.top - scrollTop
    });
  }
  view.dispatch(setSel(state, selection), {
    effects: effect
  });
  return true;
}
/**
Move the selection one page up.
*/
var cursorPageUp = function cursorPageUp(view) {
  return cursorByPage(view, false);
};
/**
Move the selection one page down.
*/
var cursorPageDown = function cursorPageDown(view) {
  return cursorByPage(view, true);
};
function moveByLineBoundary(view, start, forward) {
  var line = view.lineBlockAt(start.head),
    moved = view.moveToLineBoundary(start, forward);
  if (moved.head == start.head && moved.head != (forward ? line.to : line.from)) moved = view.moveToLineBoundary(start, forward, false);
  if (!forward && moved.head == line.from && line.length) {
    var space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
    if (space && start.head != line.from + space) moved = EditorSelection.cursor(line.from + space);
  }
  return moved;
}
/**
Move the selection to the next line wrap point, or to the end of
the line if there isn't one left on this line.
*/
var cursorLineBoundaryForward = function cursorLineBoundaryForward(view) {
  return moveSel(view, function (range) {
    return moveByLineBoundary(view, range, true);
  });
};
/**
Move the selection to previous line wrap point, or failing that to
the start of the line. If the line is indented, and the cursor
isn't already at the end of the indentation, this will move to the
end of the indentation instead of the start of the line.
*/
var cursorLineBoundaryBackward = function cursorLineBoundaryBackward(view) {
  return moveSel(view, function (range) {
    return moveByLineBoundary(view, range, false);
  });
};
/**
Move the selection one line wrap point to the left.
*/
var cursorLineBoundaryLeft = function cursorLineBoundaryLeft(view) {
  return moveSel(view, function (range) {
    return moveByLineBoundary(view, range, !ltrAtCursor(view));
  });
};
/**
Move the selection one line wrap point to the right.
*/
var cursorLineBoundaryRight = function cursorLineBoundaryRight(view) {
  return moveSel(view, function (range) {
    return moveByLineBoundary(view, range, ltrAtCursor(view));
  });
};
/**
Move the selection to the start of the line.
*/
var cursorLineStart = function cursorLineStart(view) {
  return moveSel(view, function (range) {
    return EditorSelection.cursor(view.lineBlockAt(range.head).from, 1);
  });
};
/**
Move the selection to the end of the line.
*/
var cursorLineEnd = function cursorLineEnd(view) {
  return moveSel(view, function (range) {
    return EditorSelection.cursor(view.lineBlockAt(range.head).to, -1);
  });
};
function toMatchingBracket(state, dispatch, extend) {
  var found = false,
    selection = updateSel(state.selection, function (range) {
      var matching = matchBrackets(state, range.head, -1) || matchBrackets(state, range.head, 1) || range.head > 0 && matchBrackets(state, range.head - 1, 1) || range.head < state.doc.length && matchBrackets(state, range.head + 1, -1);
      if (!matching || !matching.end) return range;
      found = true;
      var head = matching.start.from == range.head ? matching.end.to : matching.end.from;
      return extend ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);
    });
  if (!found) return false;
  dispatch(setSel(state, selection));
  return true;
}
/**
Move the selection to the bracket matching the one it is currently
on, if any.
*/
var cursorMatchingBracket = function cursorMatchingBracket(_ref5) {
  var state = _ref5.state,
    dispatch = _ref5.dispatch;
  return toMatchingBracket(state, dispatch, false);
};
function extendSel(view, how) {
  var selection = updateSel(view.state.selection, function (range) {
    var head = how(range);
    return EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || undefined);
  });
  if (selection.eq(view.state.selection)) return false;
  view.dispatch(setSel(view.state, selection));
  return true;
}
function selectByChar(view, forward) {
  return extendSel(view, function (range) {
    return view.moveByChar(range, forward);
  });
}
/**
Move the selection head one character to the left, while leaving
the anchor in place.
*/
var selectCharLeft = function selectCharLeft(view) {
  return selectByChar(view, !ltrAtCursor(view));
};
/**
Move the selection head one character to the right.
*/
var selectCharRight = function selectCharRight(view) {
  return selectByChar(view, ltrAtCursor(view));
};
function selectByGroup(view, forward) {
  return extendSel(view, function (range) {
    return view.moveByGroup(range, forward);
  });
}
/**
Move the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to
the left.
*/
var selectGroupLeft = function selectGroupLeft(view) {
  return selectByGroup(view, !ltrAtCursor(view));
};
/**
Move the selection head one group to the right.
*/
var selectGroupRight = function selectGroupRight(view) {
  return selectByGroup(view, ltrAtCursor(view));
};
/**
Move the selection head over the next syntactic element to the left.
*/
var selectSyntaxLeft = function selectSyntaxLeft(view) {
  return extendSel(view, function (range) {
    return moveBySyntax(view.state, range, !ltrAtCursor(view));
  });
};
/**
Move the selection head over the next syntactic element to the right.
*/
var selectSyntaxRight = function selectSyntaxRight(view) {
  return extendSel(view, function (range) {
    return moveBySyntax(view.state, range, ltrAtCursor(view));
  });
};
function selectByLine(view, forward) {
  return extendSel(view, function (range) {
    return view.moveVertically(range, forward);
  });
}
/**
Move the selection head one line up.
*/
var selectLineUp = function selectLineUp(view) {
  return selectByLine(view, false);
};
/**
Move the selection head one line down.
*/
var selectLineDown = function selectLineDown(view) {
  return selectByLine(view, true);
};
function selectByPage(view, forward) {
  return extendSel(view, function (range) {
    return view.moveVertically(range, forward, pageInfo(view).height);
  });
}
/**
Move the selection head one page up.
*/
var selectPageUp = function selectPageUp(view) {
  return selectByPage(view, false);
};
/**
Move the selection head one page down.
*/
var selectPageDown = function selectPageDown(view) {
  return selectByPage(view, true);
};
/**
Move the selection head to the next line boundary.
*/
var selectLineBoundaryForward = function selectLineBoundaryForward(view) {
  return extendSel(view, function (range) {
    return moveByLineBoundary(view, range, true);
  });
};
/**
Move the selection head to the previous line boundary.
*/
var selectLineBoundaryBackward = function selectLineBoundaryBackward(view) {
  return extendSel(view, function (range) {
    return moveByLineBoundary(view, range, false);
  });
};
/**
Move the selection head one line boundary to the left.
*/
var selectLineBoundaryLeft = function selectLineBoundaryLeft(view) {
  return extendSel(view, function (range) {
    return moveByLineBoundary(view, range, !ltrAtCursor(view));
  });
};
/**
Move the selection head one line boundary to the right.
*/
var selectLineBoundaryRight = function selectLineBoundaryRight(view) {
  return extendSel(view, function (range) {
    return moveByLineBoundary(view, range, ltrAtCursor(view));
  });
};
/**
Move the selection head to the start of the line.
*/
var selectLineStart = function selectLineStart(view) {
  return extendSel(view, function (range) {
    return EditorSelection.cursor(view.lineBlockAt(range.head).from);
  });
};
/**
Move the selection head to the end of the line.
*/
var selectLineEnd = function selectLineEnd(view) {
  return extendSel(view, function (range) {
    return EditorSelection.cursor(view.lineBlockAt(range.head).to);
  });
};
/**
Move the selection to the start of the document.
*/
var cursorDocStart = function cursorDocStart(_ref7) {
  var state = _ref7.state,
    dispatch = _ref7.dispatch;
  dispatch(setSel(state, {
    anchor: 0
  }));
  return true;
};
/**
Move the selection to the end of the document.
*/
var cursorDocEnd = function cursorDocEnd(_ref8) {
  var state = _ref8.state,
    dispatch = _ref8.dispatch;
  dispatch(setSel(state, {
    anchor: state.doc.length
  }));
  return true;
};
/**
Move the selection head to the start of the document.
*/
var selectDocStart = function selectDocStart(_ref9) {
  var state = _ref9.state,
    dispatch = _ref9.dispatch;
  dispatch(setSel(state, {
    anchor: state.selection.main.anchor,
    head: 0
  }));
  return true;
};
/**
Move the selection head to the end of the document.
*/
var selectDocEnd = function selectDocEnd(_ref10) {
  var state = _ref10.state,
    dispatch = _ref10.dispatch;
  dispatch(setSel(state, {
    anchor: state.selection.main.anchor,
    head: state.doc.length
  }));
  return true;
};
/**
Select the entire document.
*/
var selectAll = function selectAll(_ref11) {
  var state = _ref11.state,
    dispatch = _ref11.dispatch;
  dispatch(state.update({
    selection: {
      anchor: 0,
      head: state.doc.length
    },
    userEvent: "select"
  }));
  return true;
};
/**
Expand the selection to cover entire lines.
*/
var selectLine = function selectLine(_ref12) {
  var state = _ref12.state,
    dispatch = _ref12.dispatch;
  var ranges = selectedLineBlocks(state).map(function (_ref13) {
    var from = _ref13.from,
      to = _ref13.to;
    return EditorSelection.range(from, Math.min(to + 1, state.doc.length));
  });
  dispatch(state.update({
    selection: EditorSelection.create(ranges),
    userEvent: "select"
  }));
  return true;
};
/**
Select the next syntactic construct that is larger than the
selection. Note that this will only work insofar as the language
[provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full
syntax tree.
*/
var selectParentSyntax = function selectParentSyntax(_ref14) {
  var state = _ref14.state,
    dispatch = _ref14.dispatch;
  var selection = updateSel(state.selection, function (range) {
    var _a;
    var context = syntaxTree(state).resolveInner(range.head, 1);
    while (!(context.from < range.from && context.to >= range.to || context.to > range.to && context.from <= range.from || !((_a = context.parent) === null || _a === void 0 ? void 0 : _a.parent))) context = context.parent;
    return EditorSelection.range(context.to, context.from);
  });
  dispatch(setSel(state, selection));
  return true;
};
/**
Simplify the current selection. When multiple ranges are selected,
reduce it to its main range. Otherwise, if the selection is
non-empty, convert it to a cursor selection.
*/
var simplifySelection = function simplifySelection(_ref15) {
  var state = _ref15.state,
    dispatch = _ref15.dispatch;
  var cur = state.selection,
    selection = null;
  if (cur.ranges.length > 1) selection = EditorSelection.create([cur.main]);else if (!cur.main.empty) selection = EditorSelection.create([EditorSelection.cursor(cur.main.head)]);
  if (!selection) return false;
  dispatch(setSel(state, selection));
  return true;
};
function deleteBy(target, by) {
  if (target.state.readOnly) return false;
  var event = "delete.selection",
    state = target.state;
  var changes = state.changeByRange(function (range) {
    var from = range.from,
      to = range.to;
    if (from == to) {
      var towards = by(from);
      if (towards < from) {
        event = "delete.backward";
        towards = skipAtomic(target, towards, false);
      } else if (towards > from) {
        event = "delete.forward";
        towards = skipAtomic(target, towards, true);
      }
      from = Math.min(from, towards);
      to = Math.max(to, towards);
    } else {
      from = skipAtomic(target, from, false);
      to = skipAtomic(target, to, true);
    }
    return from == to ? {
      range: range
    } : {
      changes: {
        from: from,
        to: to
      },
      range: EditorSelection.cursor(from)
    };
  });
  if (changes.changes.empty) return false;
  target.dispatch(state.update(changes, {
    scrollIntoView: true,
    userEvent: event,
    effects: event == "delete.selection" ? EditorView.announce.of(state.phrase("Selection deleted")) : undefined
  }));
  return true;
}
function skipAtomic(target, pos, forward) {
  if (target instanceof EditorView) {
    var _iterator7 = _createForOfIteratorHelper(target.state.facet(EditorView.atomicRanges).map(function (f) {
        return f(target);
      })),
      _step7;
    try {
      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
        var ranges = _step7.value;
        ranges.between(pos, pos, function (from, to) {
          if (from < pos && to > pos) pos = forward ? to : from;
        });
      }
    } catch (err) {
      _iterator7.e(err);
    } finally {
      _iterator7.f();
    }
  }
  return pos;
}
var deleteByChar = function deleteByChar(target, forward) {
  return deleteBy(target, function (pos) {
    var state = target.state,
      line = state.doc.lineAt(pos),
      before,
      targetPos;
    if (!forward && pos > line.from && pos < line.from + 200 && !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
      if (before[before.length - 1] == "\t") return pos - 1;
      var col = countColumn(before, state.tabSize),
        drop = col % getIndentUnit(state) || getIndentUnit(state);
      for (var i = 0; i < drop && before[before.length - 1 - i] == " "; i++) pos--;
      targetPos = pos;
    } else {
      targetPos = findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;
      if (targetPos == pos && line.number != (forward ? state.doc.lines : 1)) targetPos += forward ? 1 : -1;
    }
    return targetPos;
  });
};
/**
Delete the selection, or, for cursor selections, the character
before the cursor.
*/
var deleteCharBackward = function deleteCharBackward(view) {
  return deleteByChar(view, false);
};
/**
Delete the selection or the character after the cursor.
*/
var deleteCharForward = function deleteCharForward(view) {
  return deleteByChar(view, true);
};
var deleteByGroup = function deleteByGroup(target, forward) {
  return deleteBy(target, function (start) {
    var pos = start,
      state = target.state,
      line = state.doc.lineAt(pos);
    var categorize = state.charCategorizer(pos);
    for (var cat = null;;) {
      if (pos == (forward ? line.to : line.from)) {
        if (pos == start && line.number != (forward ? state.doc.lines : 1)) pos += forward ? 1 : -1;
        break;
      }
      var next = findClusterBreak(line.text, pos - line.from, forward) + line.from;
      var nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
      var nextCat = categorize(nextChar);
      if (cat != null && nextCat != cat) break;
      if (nextChar != " " || pos != start) cat = nextCat;
      pos = next;
    }
    return pos;
  });
};
/**
Delete the selection or backward until the end of the next
[group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of
whitespace when they consist of a single space.
*/
var deleteGroupBackward = function deleteGroupBackward(target) {
  return deleteByGroup(target, false);
};
/**
Delete the selection or forward until the end of the next group.
*/
var deleteGroupForward = function deleteGroupForward(target) {
  return deleteByGroup(target, true);
};
/**
Delete the selection, or, if it is a cursor selection, delete to
the end of the line. If the cursor is directly at the end of the
line, delete the line break after it.
*/
var deleteToLineEnd = function deleteToLineEnd(view) {
  return deleteBy(view, function (pos) {
    var lineEnd = view.lineBlockAt(pos).to;
    return pos < lineEnd ? lineEnd : Math.min(view.state.doc.length, pos + 1);
  });
};
/**
Delete the selection, or, if it is a cursor selection, delete to
the start of the line. If the cursor is directly at the start of the
line, delete the line break before it.
*/
var deleteToLineStart = function deleteToLineStart(view) {
  return deleteBy(view, function (pos) {
    var lineStart = view.lineBlockAt(pos).from;
    return pos > lineStart ? lineStart : Math.max(0, pos - 1);
  });
};
/**
Replace each selection range with a line break, leaving the cursor
on the line before the break.
*/
var splitLine = function splitLine(_ref17) {
  var state = _ref17.state,
    dispatch = _ref17.dispatch;
  if (state.readOnly) return false;
  var changes = state.changeByRange(function (range) {
    return {
      changes: {
        from: range.from,
        to: range.to,
        insert: Text.of(["", ""])
      },
      range: EditorSelection.cursor(range.from)
    };
  });
  dispatch(state.update(changes, {
    scrollIntoView: true,
    userEvent: "input"
  }));
  return true;
};
/**
Flip the characters before and after the cursor(s).
*/
var transposeChars = function transposeChars(_ref18) {
  var state = _ref18.state,
    dispatch = _ref18.dispatch;
  if (state.readOnly) return false;
  var changes = state.changeByRange(function (range) {
    if (!range.empty || range.from == 0 || range.from == state.doc.length) return {
      range: range
    };
    var pos = range.from,
      line = state.doc.lineAt(pos);
    var from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;
    var to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;
    return {
      changes: {
        from: from,
        to: to,
        insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos))
      },
      range: EditorSelection.cursor(to)
    };
  });
  if (changes.changes.empty) return false;
  dispatch(state.update(changes, {
    scrollIntoView: true,
    userEvent: "move.character"
  }));
  return true;
};
function selectedLineBlocks(state) {
  var blocks = [],
    upto = -1;
  var _iterator8 = _createForOfIteratorHelper(state.selection.ranges),
    _step8;
  try {
    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
      var range = _step8.value;
      var startLine = state.doc.lineAt(range.from),
        endLine = state.doc.lineAt(range.to);
      if (!range.empty && range.to == endLine.from) endLine = state.doc.lineAt(range.to - 1);
      if (upto >= startLine.number) {
        var prev = blocks[blocks.length - 1];
        prev.to = endLine.to;
        prev.ranges.push(range);
      } else {
        blocks.push({
          from: startLine.from,
          to: endLine.to,
          ranges: [range]
        });
      }
      upto = endLine.number + 1;
    }
  } catch (err) {
    _iterator8.e(err);
  } finally {
    _iterator8.f();
  }
  return blocks;
}
function moveLine(state, dispatch, forward) {
  if (state.readOnly) return false;
  var changes = [],
    ranges = [];
  var _iterator9 = _createForOfIteratorHelper(selectedLineBlocks(state)),
    _step9;
  try {
    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
      var block = _step9.value;
      if (forward ? block.to == state.doc.length : block.from == 0) continue;
      var nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
      var size = nextLine.length + 1;
      if (forward) {
        changes.push({
          from: block.to,
          to: nextLine.to
        }, {
          from: block.from,
          insert: nextLine.text + state.lineBreak
        });
        var _iterator10 = _createForOfIteratorHelper(block.ranges),
          _step10;
        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            var r = _step10.value;
            ranges.push(EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));
          }
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }
      } else {
        changes.push({
          from: nextLine.from,
          to: block.from
        }, {
          from: block.to,
          insert: state.lineBreak + nextLine.text
        });
        var _iterator11 = _createForOfIteratorHelper(block.ranges),
          _step11;
        try {
          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
            var _r = _step11.value;
            ranges.push(EditorSelection.range(_r.anchor - size, _r.head - size));
          }
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }
      }
    }
  } catch (err) {
    _iterator9.e(err);
  } finally {
    _iterator9.f();
  }
  if (!changes.length) return false;
  dispatch(state.update({
    changes: changes,
    scrollIntoView: true,
    selection: EditorSelection.create(ranges, state.selection.mainIndex),
    userEvent: "move.line"
  }));
  return true;
}
/**
Move the selected lines up one line.
*/
var moveLineUp = function moveLineUp(_ref19) {
  var state = _ref19.state,
    dispatch = _ref19.dispatch;
  return moveLine(state, dispatch, false);
};
/**
Move the selected lines down one line.
*/
var moveLineDown = function moveLineDown(_ref20) {
  var state = _ref20.state,
    dispatch = _ref20.dispatch;
  return moveLine(state, dispatch, true);
};
function copyLine(state, dispatch, forward) {
  if (state.readOnly) return false;
  var changes = [];
  var _iterator12 = _createForOfIteratorHelper(selectedLineBlocks(state)),
    _step12;
  try {
    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
      var block = _step12.value;
      if (forward) changes.push({
        from: block.from,
        insert: state.doc.slice(block.from, block.to) + state.lineBreak
      });else changes.push({
        from: block.to,
        insert: state.lineBreak + state.doc.slice(block.from, block.to)
      });
    }
  } catch (err) {
    _iterator12.e(err);
  } finally {
    _iterator12.f();
  }
  dispatch(state.update({
    changes: changes,
    scrollIntoView: true,
    userEvent: "input.copyline"
  }));
  return true;
}
/**
Create a copy of the selected lines. Keep the selection in the top copy.
*/
var copyLineUp = function copyLineUp(_ref21) {
  var state = _ref21.state,
    dispatch = _ref21.dispatch;
  return copyLine(state, dispatch, false);
};
/**
Create a copy of the selected lines. Keep the selection in the bottom copy.
*/
var copyLineDown = function copyLineDown(_ref22) {
  var state = _ref22.state,
    dispatch = _ref22.dispatch;
  return copyLine(state, dispatch, true);
};
/**
Delete selected lines.
*/
var deleteLine = function deleteLine(view) {
  if (view.state.readOnly) return false;
  var state = view.state,
    changes = state.changes(selectedLineBlocks(state).map(function (_ref23) {
      var from = _ref23.from,
        to = _ref23.to;
      if (from > 0) from--;else if (to < state.doc.length) to++;
      return {
        from: from,
        to: to
      };
    }));
  var selection = updateSel(state.selection, function (range) {
    return view.moveVertically(range, true);
  }).map(changes);
  view.dispatch({
    changes: changes,
    selection: selection,
    scrollIntoView: true,
    userEvent: "delete.line"
  });
  return true;
};
function isBetweenBrackets(state, pos) {
  if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1))) return {
    from: pos,
    to: pos
  };
  var context = syntaxTree(state).resolveInner(pos);
  var before = context.childBefore(pos),
    after = context.childAfter(pos),
    closedBy;
  if (before && after && before.to <= pos && after.from >= pos && (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 && state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from) return {
    from: before.to,
    to: after.from
  };
  return null;
}
/**
Replace the selection with a newline and indent the newly created
line(s). If the current line consists only of whitespace, this
will also delete that whitespace. When the cursor is between
matching brackets, an additional newline will be inserted after
the cursor.
*/
var insertNewlineAndIndent = /*@__PURE__*/newlineAndIndent(false);
/**
Create a blank, indented line below the current line.
*/
var insertBlankLine = /*@__PURE__*/newlineAndIndent(true);
function newlineAndIndent(atEof) {
  return function (_ref25) {
    var state = _ref25.state,
      dispatch = _ref25.dispatch;
    if (state.readOnly) return false;
    var changes = state.changeByRange(function (range) {
      var from = range.from,
        to = range.to,
        line = state.doc.lineAt(from);
      var explode = !atEof && from == to && isBetweenBrackets(state, from);
      if (atEof) from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
      var cx = new IndentContext(state, {
        simulateBreak: from,
        simulateDoubleBreak: !!explode
      });
      var indent = getIndentation(cx, from);
      if (indent == null) indent = /^\s*/.exec(state.doc.lineAt(from).text)[0].length;
      while (to < line.to && /\s/.test(line.text[to - line.from])) to++;
      if (explode) {
        from = explode.from;
        to = explode.to;
      } else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from))) from = line.from;
      var insert = ["", indentString(state, indent)];
      if (explode) insert.push(indentString(state, cx.lineIndent(line.from, -1)));
      return {
        changes: {
          from: from,
          to: to,
          insert: Text.of(insert)
        },
        range: EditorSelection.cursor(from + 1 + insert[1].length)
      };
    });
    dispatch(state.update(changes, {
      scrollIntoView: true,
      userEvent: "input"
    }));
    return true;
  };
}
function changeBySelectedLine(state, f) {
  var atLine = -1;
  return state.changeByRange(function (range) {
    var changes = [];
    for (var pos = range.from; pos <= range.to;) {
      var line = state.doc.lineAt(pos);
      if (line.number > atLine && (range.empty || range.to > line.from)) {
        f(line, changes, range);
        atLine = line.number;
      }
      pos = line.to + 1;
    }
    var changeSet = state.changes(changes);
    return {
      changes: changes,
      range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1))
    };
  });
}
/**
Auto-indent the selected lines. This uses the [indentation service
facet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent
information.
*/
var indentSelection = function indentSelection(_ref26) {
  var state = _ref26.state,
    dispatch = _ref26.dispatch;
  if (state.readOnly) return false;
  var updated = Object.create(null);
  var context = new IndentContext(state, {
    overrideIndentation: function overrideIndentation(start) {
      var found = updated[start];
      return found == null ? -1 : found;
    }
  });
  var changes = changeBySelectedLine(state, function (line, changes, range) {
    var indent = getIndentation(context, line.from);
    if (indent == null) return;
    if (!/\S/.test(line.text)) indent = 0;
    var cur = /^\s*/.exec(line.text)[0];
    var norm = indentString(state, indent);
    if (cur != norm || range.from < line.from + cur.length) {
      updated[line.from] = indent;
      changes.push({
        from: line.from,
        to: line.from + cur.length,
        insert: norm
      });
    }
  });
  if (!changes.changes.empty) dispatch(state.update(changes, {
    userEvent: "indent"
  }));
  return true;
};
/**
Add a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected
lines.
*/
var indentMore = function indentMore(_ref27) {
  var state = _ref27.state,
    dispatch = _ref27.dispatch;
  if (state.readOnly) return false;
  dispatch(state.update(changeBySelectedLine(state, function (line, changes) {
    changes.push({
      from: line.from,
      insert: state.facet(indentUnit)
    });
  }), {
    userEvent: "input.indent"
  }));
  return true;
};
/**
Remove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all
selected lines.
*/
var indentLess = function indentLess(_ref28) {
  var state = _ref28.state,
    dispatch = _ref28.dispatch;
  if (state.readOnly) return false;
  dispatch(state.update(changeBySelectedLine(state, function (line, changes) {
    var space = /^\s*/.exec(line.text)[0];
    if (!space) return;
    var col = countColumn(space, state.tabSize),
      keep = 0;
    var insert = indentString(state, Math.max(0, col - getIndentUnit(state)));
    while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep)) keep++;
    changes.push({
      from: line.from + keep,
      to: line.from + space.length,
      insert: insert.slice(keep)
    });
  }), {
    userEvent: "delete.dedent"
  }));
  return true;
};
/**
Array of key bindings containing the Emacs-style bindings that are
available on macOS by default.

 - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
 - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
 - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
 - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
 - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
 - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
 - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
 - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
 - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)
 - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
 - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)
 - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)
 - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)
 - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)
*/
var emacsStyleKeymap = [{
  key: "Ctrl-b",
  run: cursorCharLeft,
  shift: selectCharLeft,
  preventDefault: true
}, {
  key: "Ctrl-f",
  run: cursorCharRight,
  shift: selectCharRight
}, {
  key: "Ctrl-p",
  run: cursorLineUp,
  shift: selectLineUp
}, {
  key: "Ctrl-n",
  run: cursorLineDown,
  shift: selectLineDown
}, {
  key: "Ctrl-a",
  run: cursorLineStart,
  shift: selectLineStart
}, {
  key: "Ctrl-e",
  run: cursorLineEnd,
  shift: selectLineEnd
}, {
  key: "Ctrl-d",
  run: deleteCharForward
}, {
  key: "Ctrl-h",
  run: deleteCharBackward
}, {
  key: "Ctrl-k",
  run: deleteToLineEnd
}, {
  key: "Ctrl-Alt-h",
  run: deleteGroupBackward
}, {
  key: "Ctrl-o",
  run: splitLine
}, {
  key: "Ctrl-t",
  run: transposeChars
}, {
  key: "Ctrl-v",
  run: cursorPageDown
}];
/**
An array of key bindings closely sticking to platform-standard or
widely used bindings. (This includes the bindings from
[`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`
property changed to `mac`.)

 - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
 - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
 - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)
 - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)
 - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
 - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
 - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
 - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
 - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
 - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
 - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
 - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
 - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
 - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
 - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)
 - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)
 - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
 - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
 - Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)
 - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)
 - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
 - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
 - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
 - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)
 - Cmd-Backspace (macOS): [`deleteToLineStart`](https://codemirror.net/6/docs/ref/#commands.deleteToLineStart).
 - Cmd-Delete (macOS): [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd).
*/
var standardKeymap = /*@__PURE__*/[{
  key: "ArrowLeft",
  run: cursorCharLeft,
  shift: selectCharLeft,
  preventDefault: true
}, {
  key: "Mod-ArrowLeft",
  mac: "Alt-ArrowLeft",
  run: cursorGroupLeft,
  shift: selectGroupLeft,
  preventDefault: true
}, {
  mac: "Cmd-ArrowLeft",
  run: cursorLineBoundaryLeft,
  shift: selectLineBoundaryLeft,
  preventDefault: true
}, {
  key: "ArrowRight",
  run: cursorCharRight,
  shift: selectCharRight,
  preventDefault: true
}, {
  key: "Mod-ArrowRight",
  mac: "Alt-ArrowRight",
  run: cursorGroupRight,
  shift: selectGroupRight,
  preventDefault: true
}, {
  mac: "Cmd-ArrowRight",
  run: cursorLineBoundaryRight,
  shift: selectLineBoundaryRight,
  preventDefault: true
}, {
  key: "ArrowUp",
  run: cursorLineUp,
  shift: selectLineUp,
  preventDefault: true
}, {
  mac: "Cmd-ArrowUp",
  run: cursorDocStart,
  shift: selectDocStart
}, {
  mac: "Ctrl-ArrowUp",
  run: cursorPageUp,
  shift: selectPageUp
}, {
  key: "ArrowDown",
  run: cursorLineDown,
  shift: selectLineDown,
  preventDefault: true
}, {
  mac: "Cmd-ArrowDown",
  run: cursorDocEnd,
  shift: selectDocEnd
}, {
  mac: "Ctrl-ArrowDown",
  run: cursorPageDown,
  shift: selectPageDown
}, {
  key: "PageUp",
  run: cursorPageUp,
  shift: selectPageUp
}, {
  key: "PageDown",
  run: cursorPageDown,
  shift: selectPageDown
}, {
  key: "Home",
  run: cursorLineBoundaryBackward,
  shift: selectLineBoundaryBackward,
  preventDefault: true
}, {
  key: "Mod-Home",
  run: cursorDocStart,
  shift: selectDocStart
}, {
  key: "End",
  run: cursorLineBoundaryForward,
  shift: selectLineBoundaryForward,
  preventDefault: true
}, {
  key: "Mod-End",
  run: cursorDocEnd,
  shift: selectDocEnd
}, {
  key: "Enter",
  run: insertNewlineAndIndent
}, {
  key: "Mod-a",
  run: selectAll
}, {
  key: "Backspace",
  run: deleteCharBackward,
  shift: deleteCharBackward
}, {
  key: "Delete",
  run: deleteCharForward
}, {
  key: "Mod-Backspace",
  mac: "Alt-Backspace",
  run: deleteGroupBackward
}, {
  key: "Mod-Delete",
  mac: "Alt-Delete",
  run: deleteGroupForward
}, {
  mac: "Mod-Backspace",
  run: deleteToLineStart
}, {
  mac: "Mod-Delete",
  run: deleteToLineEnd
}].concat( /*@__PURE__*/emacsStyleKeymap.map(function (b) {
  return {
    mac: b.key,
    run: b.run,
    shift: b.shift
  };
}));
/**
The default keymap. Includes all bindings from
[`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:

- Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)
- Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)
- Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)
- Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)
- Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)
- Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)
- Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)
- Ctrl-Enter (Cmd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)
- Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)
- Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)
- Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)
- Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)
- Ctrl-Alt-\\ (Cmd-Alt-\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)
- Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)
- Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)
- Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#commands.toggleComment).
- Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#commands.toggleBlockComment).
*/
var defaultKeymap = /*@__PURE__*/[{
  key: "Alt-ArrowLeft",
  mac: "Ctrl-ArrowLeft",
  run: cursorSyntaxLeft,
  shift: selectSyntaxLeft
}, {
  key: "Alt-ArrowRight",
  mac: "Ctrl-ArrowRight",
  run: cursorSyntaxRight,
  shift: selectSyntaxRight
}, {
  key: "Alt-ArrowUp",
  run: moveLineUp
}, {
  key: "Shift-Alt-ArrowUp",
  run: copyLineUp
}, {
  key: "Alt-ArrowDown",
  run: moveLineDown
}, {
  key: "Shift-Alt-ArrowDown",
  run: copyLineDown
}, {
  key: "Escape",
  run: simplifySelection
}, {
  key: "Mod-Enter",
  run: insertBlankLine
}, {
  key: "Alt-l",
  mac: "Ctrl-l",
  run: selectLine
}, {
  key: "Mod-i",
  run: selectParentSyntax,
  preventDefault: true
}, {
  key: "Mod-[",
  run: indentLess
}, {
  key: "Mod-]",
  run: indentMore
}, {
  key: "Mod-Alt-\\",
  run: indentSelection
}, {
  key: "Shift-Mod-k",
  run: deleteLine
}, {
  key: "Shift-Mod-\\",
  run: cursorMatchingBracket
}, {
  key: "Mod-/",
  run: toggleComment
}, {
  key: "Alt-A",
  run: toggleBlockComment
}].concat(standardKeymap);

function crelt() {
  var elt = arguments[0];
  if (typeof elt == "string") elt = document.createElement(elt);
  var i = 1,
    next = arguments[1];
  if (next && _typeof(next) == "object" && next.nodeType == null && !Array.isArray(next)) {
    for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {
      var value = next[name];
      if (typeof value == "string") elt.setAttribute(name, value);else if (value != null) elt[name] = value;
    }
    i++;
  }
  for (; i < arguments.length; i++) add(elt, arguments[i]);
  return elt;
}
function add(elt, child) {
  if (typeof child == "string") {
    elt.appendChild(document.createTextNode(child));
  } else if (child == null) ; else if (child.nodeType != null) {
    elt.appendChild(child);
  } else if (Array.isArray(child)) {
    for (var i = 0; i < child.length; i++) add(elt, child[i]);
  } else {
    throw new RangeError("Unsupported child node: " + child);
  }
}

var basicNormalize = typeof String.prototype.normalize == "function" ? function (x) {
  return x.normalize("NFKD");
} : function (x) {
  return x;
};
/**
A search cursor provides an iterator over text matches in a
document.
*/
var SearchCursor = /*#__PURE__*/function () {
  /**
  Create a text cursor. The query is the search string, `from` to
  `to` provides the region to search.
  
  When `normalize` is given, it will be called, on both the query
  string and the content it is matched against, before comparing.
  You can, for example, create a case-insensitive search by
  passing `s => s.toLowerCase()`.
  
  Text is always normalized with
  [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
  (when supported).
  */
  function SearchCursor(text, query) {
    var from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var to = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : text.length;
    var normalize = arguments.length > 4 ? arguments[4] : undefined;
    var test = arguments.length > 5 ? arguments[5] : undefined;
    _classCallCheck(this, SearchCursor);
    this.test = test;
    /**
    The current match (only holds a meaningful value after
    [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when
    `done` is false).
    */
    this.value = {
      from: 0,
      to: 0
    };
    /**
    Whether the end of the iterated region has been reached.
    */
    this.done = false;
    this.matches = [];
    this.buffer = "";
    this.bufferPos = 0;
    this.iter = text.iterRange(from, to);
    this.bufferStart = from;
    this.normalize = normalize ? function (x) {
      return normalize(basicNormalize(x));
    } : basicNormalize;
    this.query = this.normalize(query);
  }
  _createClass(SearchCursor, [{
    key: "peek",
    value: function peek() {
      if (this.bufferPos == this.buffer.length) {
        this.bufferStart += this.buffer.length;
        this.iter.next();
        if (this.iter.done) return -1;
        this.bufferPos = 0;
        this.buffer = this.iter.value;
      }
      return codePointAt(this.buffer, this.bufferPos);
    }
    /**
    Look for the next match. Updates the iterator's
    [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
    [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
    at least once before using the cursor.
    */
  }, {
    key: "next",
    value: function next() {
      while (this.matches.length) this.matches.pop();
      return this.nextOverlapping();
    }
    /**
    The `next` method will ignore matches that partially overlap a
    previous match. This method behaves like `next`, but includes
    such matches.
    */
  }, {
    key: "nextOverlapping",
    value: function nextOverlapping() {
      for (;;) {
        var next = this.peek();
        if (next < 0) {
          this.done = true;
          return this;
        }
        var str = fromCodePoint(next),
          start = this.bufferStart + this.bufferPos;
        this.bufferPos += codePointSize(next);
        var norm = this.normalize(str);
        for (var i = 0, pos = start;; i++) {
          var code = norm.charCodeAt(i);
          var match = this.match(code, pos);
          if (match) {
            this.value = match;
            return this;
          }
          if (i == norm.length - 1) break;
          if (pos == start && i < str.length && str.charCodeAt(i) == code) pos++;
        }
      }
    }
  }, {
    key: "match",
    value: function match(code, pos) {
      var match = null;
      for (var i = 0; i < this.matches.length; i += 2) {
        var index = this.matches[i],
          keep = false;
        if (this.query.charCodeAt(index) == code) {
          if (index == this.query.length - 1) {
            match = {
              from: this.matches[i + 1],
              to: pos + 1
            };
          } else {
            this.matches[i]++;
            keep = true;
          }
        }
        if (!keep) {
          this.matches.splice(i, 2);
          i -= 2;
        }
      }
      if (this.query.charCodeAt(0) == code) {
        if (this.query.length == 1) match = {
          from: pos,
          to: pos + 1
        };else this.matches.push(1, pos);
      }
      if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferPos)) match = null;
      return match;
    }
  }]);
  return SearchCursor;
}();
if (typeof Symbol != "undefined") SearchCursor.prototype[Symbol.iterator] = function () {
  return this;
};
var empty = {
  from: -1,
  to: -1,
  match: /*@__PURE__*/ /.*/.exec("")
};
var baseFlags = "gm" + (/x/.unicode == null ? "" : "u");
/**
This class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)
but searches for a regular expression pattern instead of a plain
string.
*/
var RegExpCursor = /*#__PURE__*/function () {
  /**
  Create a cursor that will search the given range in the given
  document. `query` should be the raw pattern (as you'd pass it to
  `new RegExp`).
  */
  function RegExpCursor(text, query, options) {
    var from = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    var to = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : text.length;
    _classCallCheck(this, RegExpCursor);
    this.text = text;
    this.to = to;
    this.curLine = "";
    /**
    Set to `true` when the cursor has reached the end of the search
    range.
    */
    this.done = false;
    /**
    Will contain an object with the extent of the match and the
    match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)
    sucessfully finds a match.
    */
    this.value = empty;
    if (/\\[sWDnr]|\n|\r|\[\^/.test(query)) return new MultilineRegExpCursor(text, query, options, from, to);
    this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
    this.test = options === null || options === void 0 ? void 0 : options.test;
    this.iter = text.iter();
    var startLine = text.lineAt(from);
    this.curLineStart = startLine.from;
    this.matchPos = toCharEnd(text, from);
    this.getLine(this.curLineStart);
  }
  _createClass(RegExpCursor, [{
    key: "getLine",
    value: function getLine(skip) {
      this.iter.next(skip);
      if (this.iter.lineBreak) {
        this.curLine = "";
      } else {
        this.curLine = this.iter.value;
        if (this.curLineStart + this.curLine.length > this.to) this.curLine = this.curLine.slice(0, this.to - this.curLineStart);
        this.iter.next();
      }
    }
  }, {
    key: "nextLine",
    value: function nextLine() {
      this.curLineStart = this.curLineStart + this.curLine.length + 1;
      if (this.curLineStart > this.to) this.curLine = "";else this.getLine(0);
    }
    /**
    Move to the next match, if there is one.
    */
  }, {
    key: "next",
    value: function next() {
      for (var off = this.matchPos - this.curLineStart;;) {
        this.re.lastIndex = off;
        var match = this.matchPos <= this.to && this.re.exec(this.curLine);
        if (match) {
          var from = this.curLineStart + match.index,
            to = from + match[0].length;
          this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));
          if (from == this.curLineStart + this.curLine.length) this.nextLine();
          if ((from < to || from > this.value.to) && (!this.test || this.test(from, to, match))) {
            this.value = {
              from: from,
              to: to,
              match: match
            };
            return this;
          }
          off = this.matchPos - this.curLineStart;
        } else if (this.curLineStart + this.curLine.length < this.to) {
          this.nextLine();
          off = 0;
        } else {
          this.done = true;
          return this;
        }
      }
    }
  }]);
  return RegExpCursor;
}();
var flattened = /*@__PURE__*/new WeakMap();
// Reusable (partially) flattened document strings
var FlattenedDoc = /*#__PURE__*/function () {
  function FlattenedDoc(from, text) {
    _classCallCheck(this, FlattenedDoc);
    this.from = from;
    this.text = text;
  }
  _createClass(FlattenedDoc, [{
    key: "to",
    get: function get() {
      return this.from + this.text.length;
    }
  }], [{
    key: "get",
    value: function get(doc, from, to) {
      var cached = flattened.get(doc);
      if (!cached || cached.from >= to || cached.to <= from) {
        var flat = new FlattenedDoc(from, doc.sliceString(from, to));
        flattened.set(doc, flat);
        return flat;
      }
      if (cached.from == from && cached.to == to) return cached;
      var text = cached.text,
        cachedFrom = cached.from;
      if (cachedFrom > from) {
        text = doc.sliceString(from, cachedFrom) + text;
        cachedFrom = from;
      }
      if (cached.to < to) text += doc.sliceString(cached.to, to);
      flattened.set(doc, new FlattenedDoc(cachedFrom, text));
      return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));
    }
  }]);
  return FlattenedDoc;
}();
var MultilineRegExpCursor = /*#__PURE__*/function () {
  function MultilineRegExpCursor(text, query, options, from, to) {
    _classCallCheck(this, MultilineRegExpCursor);
    this.text = text;
    this.to = to;
    this.done = false;
    this.value = empty;
    this.matchPos = toCharEnd(text, from);
    this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
    this.test = options === null || options === void 0 ? void 0 : options.test;
    this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Base */));
  }
  _createClass(MultilineRegExpCursor, [{
    key: "chunkEnd",
    value: function chunkEnd(pos) {
      return pos >= this.to ? this.to : this.text.lineAt(pos).to;
    }
  }, {
    key: "next",
    value: function next() {
      for (;;) {
        var off = this.re.lastIndex = this.matchPos - this.flat.from;
        var match = this.re.exec(this.flat.text);
        // Skip empty matches directly after the last match
        if (match && !match[0] && match.index == off) {
          this.re.lastIndex = off + 1;
          match = this.re.exec(this.flat.text);
        }
        if (match) {
          var from = this.flat.from + match.index,
            to = from + match[0].length;
          // If a match goes almost to the end of a noncomplete chunk, try
          // again, since it'll likely be able to match more
          if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) && (!this.test || this.test(from, to, match))) {
            this.value = {
              from: from,
              to: to,
              match: match
            };
            this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));
            return this;
          }
        }
        if (this.flat.to == this.to) {
          this.done = true;
          return this;
        }
        // Grow the flattened doc
        this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
      }
    }
  }]);
  return MultilineRegExpCursor;
}();
if (typeof Symbol != "undefined") {
  RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] = function () {
    return this;
  };
}
function validRegExp(source) {
  try {
    new RegExp(source, baseFlags);
    return true;
  } catch (_a) {
    return false;
  }
}
function toCharEnd(text, pos) {
  if (pos >= text.length) return pos;
  var line = text.lineAt(pos),
    next;
  while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 0xDC00 && next < 0xE000) pos++;
  return pos;
}
function createLineDialog(view) {
  var input = crelt("input", {
    "class": "cm-textfield",
    name: "line"
  });
  var dom = crelt("form", {
    "class": "cm-gotoLine",
    onkeydown: function onkeydown(event) {
      if (event.keyCode == 27) {
        // Escape
        event.preventDefault();
        view.dispatch({
          effects: dialogEffect.of(false)
        });
        view.focus();
      } else if (event.keyCode == 13) {
        // Enter
        event.preventDefault();
        go();
      }
    },
    onsubmit: function onsubmit(event) {
      event.preventDefault();
      go();
    }
  }, crelt("label", view.state.phrase("Go to line"), ": ", input), " ", crelt("button", {
    "class": "cm-button",
    type: "submit"
  }, view.state.phrase("go")));
  function go() {
    var match = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(input.value);
    if (!match) return;
    var state = view.state,
      startLine = state.doc.lineAt(state.selection.main.head);
    var _match = _slicedToArray(match, 5),
      sign = _match[1],
      ln = _match[2],
      cl = _match[3],
      percent = _match[4];
    var col = cl ? +cl.slice(1) : 0;
    var line = ln ? +ln : startLine.number;
    if (ln && percent) {
      var pc = line / 100;
      if (sign) pc = pc * (sign == "-" ? -1 : 1) + startLine.number / state.doc.lines;
      line = Math.round(state.doc.lines * pc);
    } else if (ln && sign) {
      line = line * (sign == "-" ? -1 : 1) + startLine.number;
    }
    var docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));
    view.dispatch({
      effects: dialogEffect.of(false),
      selection: EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length))),
      scrollIntoView: true
    });
    view.focus();
  }
  return {
    dom: dom
  };
}
var dialogEffect = /*@__PURE__*/StateEffect.define();
var dialogField = /*@__PURE__*/StateField.define({
  create: function create() {
    return true;
  },
  update: function update(value, tr) {
    var _iterator = _createForOfIteratorHelper(tr.effects),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var e = _step.value;
        if (e.is(dialogEffect)) value = e.value;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return value;
  },
  provide: function provide(f) {
    return showPanel.from(f, function (val) {
      return val ? createLineDialog : null;
    });
  }
});
/**
Command that shows a dialog asking the user for a line number, and
when a valid position is provided, moves the cursor to that line.

Supports line numbers, relative line offsets prefixed with `+` or
`-`, document percentages suffixed with `%`, and an optional
column position by adding `:` and a second number after the line
number.
*/
var gotoLine = function gotoLine(view) {
  var panel = getPanel(view, createLineDialog);
  if (!panel) {
    var effects = [dialogEffect.of(true)];
    if (view.state.field(dialogField, false) == null) effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$1$1]));
    view.dispatch({
      effects: effects
    });
    panel = getPanel(view, createLineDialog);
  }
  if (panel) panel.dom.querySelector("input").focus();
  return true;
};
var baseTheme$1$1 = /*@__PURE__*/EditorView.baseTheme({
  ".cm-panel.cm-gotoLine": {
    padding: "2px 6px 4px",
    "& label": {
      fontSize: "80%"
    }
  }
});
var defaultHighlightOptions = {
  highlightWordAroundCursor: false,
  minSelectionLength: 1,
  maxMatches: 100,
  wholeWords: false
};
var highlightConfig = /*@__PURE__*/Facet.define({
  combine: function combine(options) {
    return combineConfig(options, defaultHighlightOptions, {
      highlightWordAroundCursor: function highlightWordAroundCursor(a, b) {
        return a || b;
      },
      minSelectionLength: Math.min,
      maxMatches: Math.min
    });
  }
});
/**
This extension highlights text that matches the selection. It uses
the `"cm-selectionMatch"` class for the highlighting. When
`highlightWordAroundCursor` is enabled, the word at the cursor
itself will be highlighted with `"cm-selectionMatch-main"`.
*/
function highlightSelectionMatches(options) {
  var ext = [defaultTheme, matchHighlighter];
  if (options) ext.push(highlightConfig.of(options));
  return ext;
}
var matchDeco = /*@__PURE__*/Decoration.mark({
  "class": "cm-selectionMatch"
});
var mainMatchDeco = /*@__PURE__*/Decoration.mark({
  "class": "cm-selectionMatch cm-selectionMatch-main"
});
// Whether the characters directly outside the given positions are non-word characters
function insideWordBoundaries(check, state, from, to) {
  return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) && (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);
}
// Whether the characters directly at the given positions are word characters
function insideWord(check, state, from, to) {
  return check(state.sliceDoc(from, from + 1)) == CharCategory.Word && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;
}
var matchHighlighter = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class(view) {
    _classCallCheck(this, _class);
    this.decorations = this.getDeco(view);
  }
  _createClass(_class, [{
    key: "update",
    value: function update(_update) {
      if (_update.selectionSet || _update.docChanged || _update.viewportChanged) this.decorations = this.getDeco(_update.view);
    }
  }, {
    key: "getDeco",
    value: function getDeco(view) {
      var conf = view.state.facet(highlightConfig);
      var state = view.state,
        sel = state.selection;
      if (sel.ranges.length > 1) return Decoration.none;
      var range = sel.main,
        query,
        check = null;
      if (range.empty) {
        if (!conf.highlightWordAroundCursor) return Decoration.none;
        var word = state.wordAt(range.head);
        if (!word) return Decoration.none;
        check = state.charCategorizer(range.head);
        query = state.sliceDoc(word.from, word.to);
      } else {
        var len = range.to - range.from;
        if (len < conf.minSelectionLength || len > 200) return Decoration.none;
        if (conf.wholeWords) {
          query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?
          check = state.charCategorizer(range.head);
          if (!(insideWordBoundaries(check, state, range.from, range.to) && insideWord(check, state, range.from, range.to))) return Decoration.none;
        } else {
          query = state.sliceDoc(range.from, range.to).trim();
          if (!query) return Decoration.none;
        }
      }
      var deco = [];
      var _iterator2 = _createForOfIteratorHelper(view.visibleRanges),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var part = _step2.value;
          var cursor = new SearchCursor(state.doc, query, part.from, part.to);
          while (!cursor.next().done) {
            var _cursor$value = cursor.value,
              from = _cursor$value.from,
              to = _cursor$value.to;
            if (!check || insideWordBoundaries(check, state, from, to)) {
              if (range.empty && from <= range.from && to >= range.to) deco.push(mainMatchDeco.range(from, to));else if (from >= range.to || to <= range.from) deco.push(matchDeco.range(from, to));
              if (deco.length > conf.maxMatches) return Decoration.none;
            }
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      return Decoration.set(deco);
    }
  }]);
  return _class;
}(), {
  decorations: function decorations(v) {
    return v.decorations;
  }
});
var defaultTheme = /*@__PURE__*/EditorView.baseTheme({
  ".cm-selectionMatch": {
    backgroundColor: "#99ff7780"
  },
  ".cm-searchMatch .cm-selectionMatch": {
    backgroundColor: "transparent"
  }
});
// Select the words around the cursors.
var selectWord = function selectWord(_ref) {
  var state = _ref.state,
    dispatch = _ref.dispatch;
  var selection = state.selection;
  var newSel = EditorSelection.create(selection.ranges.map(function (range) {
    return state.wordAt(range.head) || EditorSelection.cursor(range.head);
  }), selection.mainIndex);
  if (newSel.eq(selection)) return false;
  dispatch(state.update({
    selection: newSel
  }));
  return true;
};
// Find next occurrence of query relative to last cursor. Wrap around
// the document if there are no more matches.
function findNextOccurrence(state, query) {
  var _state$selection = state.selection,
    main = _state$selection.main,
    ranges = _state$selection.ranges;
  var word = state.wordAt(main.head),
    fullWord = word && word.from == main.from && word.to == main.to;
  var _loop = function _loop(_cycled, _cursor) {
    _cursor.next();
    if (_cursor.done) {
      if (_cycled) return {
        v: null
      };
      _cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));
      _cycled = true;
    } else {
      if (_cycled && ranges.some(function (r) {
        return r.from == _cursor.value.from;
      })) {
        cycled = _cycled, cursor = _cursor;
        return "continue";
      }
      if (fullWord) {
        var _word = state.wordAt(_cursor.value.from);
        if (!_word || _word.from != _cursor.value.from || _word.to != _cursor.value.to) {
          cycled = _cycled, cursor = _cursor;
          return "continue";
        }
      }
      return {
        v: _cursor.value
      };
    }
    cycled = _cycled, cursor = _cursor;
  };
  for (var cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {
    var _ret = _loop(cycled, cursor);
    if (_ret === "continue") continue;
    if (_typeof(_ret) === "object") return _ret.v;
  }
}
/**
Select next occurrence of the current selection. Expand selection
to the surrounding word when the selection is empty.
*/
var selectNextOccurrence = function selectNextOccurrence(_ref2) {
  var state = _ref2.state,
    dispatch = _ref2.dispatch;
  var ranges = state.selection.ranges;
  if (ranges.some(function (sel) {
    return sel.from === sel.to;
  })) return selectWord({
    state: state,
    dispatch: dispatch
  });
  var searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);
  if (state.selection.ranges.some(function (r) {
    return state.sliceDoc(r.from, r.to) != searchedText;
  })) return false;
  var range = findNextOccurrence(state, searchedText);
  if (!range) return false;
  dispatch(state.update({
    selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),
    effects: EditorView.scrollIntoView(range.to)
  }));
  return true;
};
var searchConfigFacet = /*@__PURE__*/Facet.define({
  combine: function combine(configs) {
    return combineConfig(configs, {
      top: false,
      caseSensitive: false,
      literal: false,
      regexp: false,
      wholeWord: false,
      createPanel: function createPanel(view) {
        return new SearchPanel(view);
      },
      scrollToMatch: function scrollToMatch(range) {
        return EditorView.scrollIntoView(range);
      }
    });
  }
});
/**
A search query. Part of the editor's search state.
*/
var SearchQuery = /*#__PURE__*/function () {
  /**
  Create a query object.
  */
  function SearchQuery(config) {
    _classCallCheck(this, SearchQuery);
    this.search = config.search;
    this.caseSensitive = !!config.caseSensitive;
    this.literal = !!config.literal;
    this.regexp = !!config.regexp;
    this.replace = config.replace || "";
    this.valid = !!this.search && (!this.regexp || validRegExp(this.search));
    this.unquoted = this.unquote(this.search);
    this.wholeWord = !!config.wholeWord;
  }
  /**
  @internal
  */
  _createClass(SearchQuery, [{
    key: "unquote",
    value: function unquote(text) {
      return this.literal ? text : text.replace(/\\([nrt\\])/g, function (_, ch) {
        return ch == "n" ? "\n" : ch == "r" ? "\r" : ch == "t" ? "\t" : "\\";
      });
    }
    /**
    Compare this query to another query.
    */
  }, {
    key: "eq",
    value: function eq(other) {
      return this.search == other.search && this.replace == other.replace && this.caseSensitive == other.caseSensitive && this.regexp == other.regexp && this.wholeWord == other.wholeWord;
    }
    /**
    @internal
    */
  }, {
    key: "create",
    value: function create() {
      return this.regexp ? new RegExpQuery(this) : new StringQuery(this);
    }
    /**
    Get a search cursor for this query, searching through the given
    range in the given state.
    */
  }, {
    key: "getCursor",
    value: function getCursor(state) {
      var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var to = arguments.length > 2 ? arguments[2] : undefined;
      var st = state.doc ? state : EditorState.create({
        doc: state
      });
      if (to == null) to = st.doc.length;
      return this.regexp ? regexpCursor(this, st, from, to) : stringCursor(this, st, from, to);
    }
  }]);
  return SearchQuery;
}();
var QueryType = /*#__PURE__*/_createClass(function QueryType(spec) {
  _classCallCheck(this, QueryType);
  this.spec = spec;
});
function stringCursor(spec, state, from, to) {
  return new SearchCursor(state.doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : function (x) {
    return x.toLowerCase();
  }, spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : undefined);
}
function stringWordTest(doc, categorizer) {
  return function (from, to, buf, bufPos) {
    if (bufPos > from || bufPos + buf.length < to) {
      bufPos = Math.max(0, from - 2);
      buf = doc.sliceString(bufPos, Math.min(doc.length, to + 2));
    }
    return (categorizer(charBefore(buf, from - bufPos)) != CharCategory.Word || categorizer(charAfter(buf, from - bufPos)) != CharCategory.Word) && (categorizer(charAfter(buf, to - bufPos)) != CharCategory.Word || categorizer(charBefore(buf, to - bufPos)) != CharCategory.Word);
  };
}
var StringQuery = /*#__PURE__*/function (_QueryType) {
  _inherits(StringQuery, _QueryType);
  var _super = _createSuper(StringQuery);
  function StringQuery(spec) {
    _classCallCheck(this, StringQuery);
    return _super.call(this, spec);
  }
  _createClass(StringQuery, [{
    key: "nextMatch",
    value: function nextMatch(state, curFrom, curTo) {
      var cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();
      if (cursor.done) cursor = stringCursor(this.spec, state, 0, curFrom).nextOverlapping();
      return cursor.done ? null : cursor.value;
    }
    // Searching in reverse is, rather than implementing an inverted search
    // cursor, done by scanning chunk after chunk forward.
  }, {
    key: "prevMatchInRange",
    value: function prevMatchInRange(state, from, to) {
      for (var pos = to;;) {
        var start = Math.max(from, pos - 10000 /* ChunkSize */ - this.spec.unquoted.length);
        var cursor = stringCursor(this.spec, state, start, pos),
          range = null;
        while (!cursor.nextOverlapping().done) range = cursor.value;
        if (range) return range;
        if (start == from) return null;
        pos -= 10000 /* ChunkSize */;
      }
    }
  }, {
    key: "prevMatch",
    value: function prevMatch(state, curFrom, curTo) {
      return this.prevMatchInRange(state, 0, curFrom) || this.prevMatchInRange(state, curTo, state.doc.length);
    }
  }, {
    key: "getReplacement",
    value: function getReplacement(_result) {
      return this.spec.unquote(this.spec.replace);
    }
  }, {
    key: "matchAll",
    value: function matchAll(state, limit) {
      var cursor = stringCursor(this.spec, state, 0, state.doc.length),
        ranges = [];
      while (!cursor.next().done) {
        if (ranges.length >= limit) return null;
        ranges.push(cursor.value);
      }
      return ranges;
    }
  }, {
    key: "highlight",
    value: function highlight(state, from, to, add) {
      var cursor = stringCursor(this.spec, state, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));
      while (!cursor.next().done) add(cursor.value.from, cursor.value.to);
    }
  }]);
  return StringQuery;
}(QueryType);
function regexpCursor(spec, state, from, to) {
  return new RegExpCursor(state.doc, spec.search, {
    ignoreCase: !spec.caseSensitive,
    test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : undefined
  }, from, to);
}
function charBefore(str, index) {
  return str.slice(findClusterBreak(str, index, false), index);
}
function charAfter(str, index) {
  return str.slice(index, findClusterBreak(str, index));
}
function regexpWordTest(categorizer) {
  return function (_from, _to, match) {
    return !match[0].length || (categorizer(charBefore(match.input, match.index)) != CharCategory.Word || categorizer(charAfter(match.input, match.index)) != CharCategory.Word) && (categorizer(charAfter(match.input, match.index + match[0].length)) != CharCategory.Word || categorizer(charBefore(match.input, match.index + match[0].length)) != CharCategory.Word);
  };
}
var RegExpQuery = /*#__PURE__*/function (_QueryType2) {
  _inherits(RegExpQuery, _QueryType2);
  var _super2 = _createSuper(RegExpQuery);
  function RegExpQuery() {
    _classCallCheck(this, RegExpQuery);
    return _super2.apply(this, arguments);
  }
  _createClass(RegExpQuery, [{
    key: "nextMatch",
    value: function nextMatch(state, curFrom, curTo) {
      var cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();
      if (cursor.done) cursor = regexpCursor(this.spec, state, 0, curFrom).next();
      return cursor.done ? null : cursor.value;
    }
  }, {
    key: "prevMatchInRange",
    value: function prevMatchInRange(state, from, to) {
      for (var size = 1;; size++) {
        var start = Math.max(from, to - size * 10000 /* ChunkSize */);
        var cursor = regexpCursor(this.spec, state, start, to),
          range = null;
        while (!cursor.next().done) range = cursor.value;
        if (range && (start == from || range.from > start + 10)) return range;
        if (start == from) return null;
      }
    }
  }, {
    key: "prevMatch",
    value: function prevMatch(state, curFrom, curTo) {
      return this.prevMatchInRange(state, 0, curFrom) || this.prevMatchInRange(state, curTo, state.doc.length);
    }
  }, {
    key: "getReplacement",
    value: function getReplacement(result) {
      return this.spec.unquote(this.spec.replace.replace(/\$([$&\d+])/g, function (m, i) {
        return i == "$" ? "$" : i == "&" ? result.match[0] : i != "0" && +i < result.match.length ? result.match[i] : m;
      }));
    }
  }, {
    key: "matchAll",
    value: function matchAll(state, limit) {
      var cursor = regexpCursor(this.spec, state, 0, state.doc.length),
        ranges = [];
      while (!cursor.next().done) {
        if (ranges.length >= limit) return null;
        ranges.push(cursor.value);
      }
      return ranges;
    }
  }, {
    key: "highlight",
    value: function highlight(state, from, to, add) {
      var cursor = regexpCursor(this.spec, state, Math.max(0, from - 250 /* HighlightMargin */), Math.min(to + 250 /* HighlightMargin */, state.doc.length));
      while (!cursor.next().done) add(cursor.value.from, cursor.value.to);
    }
  }]);
  return RegExpQuery;
}(QueryType);
/**
A state effect that updates the current search query. Note that
this only has an effect if the search state has been initialized
(by including [`search`](https://codemirror.net/6/docs/ref/#search.search) in your configuration or
by running [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) at least
once).
*/
var setSearchQuery = /*@__PURE__*/StateEffect.define();
var togglePanel$1 = /*@__PURE__*/StateEffect.define();
var searchState = /*@__PURE__*/StateField.define({
  create: function create(state) {
    return new SearchState(defaultQuery(state).create(), null);
  },
  update: function update(value, tr) {
    var _iterator3 = _createForOfIteratorHelper(tr.effects),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var effect = _step3.value;
        if (effect.is(setSearchQuery)) value = new SearchState(effect.value.create(), value.panel);else if (effect.is(togglePanel$1)) value = new SearchState(value.query, effect.value ? createSearchPanel : null);
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
    return value;
  },
  provide: function provide(f) {
    return showPanel.from(f, function (val) {
      return val.panel;
    });
  }
});
var SearchState = /*#__PURE__*/_createClass(function SearchState(query, panel) {
  _classCallCheck(this, SearchState);
  this.query = query;
  this.panel = panel;
});
var matchMark = /*@__PURE__*/Decoration.mark({
    "class": "cm-searchMatch"
  }),
  selectedMatchMark = /*@__PURE__*/Decoration.mark({
    "class": "cm-searchMatch cm-searchMatch-selected"
  });
var searchHighlighter = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class2(view) {
    _classCallCheck(this, _class2);
    this.view = view;
    this.decorations = this.highlight(view.state.field(searchState));
  }
  _createClass(_class2, [{
    key: "update",
    value: function update(_update2) {
      var state = _update2.state.field(searchState);
      if (state != _update2.startState.field(searchState) || _update2.docChanged || _update2.selectionSet || _update2.viewportChanged) this.decorations = this.highlight(state);
    }
  }, {
    key: "highlight",
    value: function highlight(_ref3) {
      var query = _ref3.query,
        panel = _ref3.panel;
      if (!panel || !query.spec.valid) return Decoration.none;
      var view = this.view;
      var builder = new RangeSetBuilder();
      for (var i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {
        var _ranges$i = ranges[i],
          from = _ranges$i.from,
          to = _ranges$i.to;
        while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* HighlightMargin */) to = ranges[++i].to;
        query.highlight(view.state, from, to, function (from, to) {
          var selected = view.state.selection.ranges.some(function (r) {
            return r.from == from && r.to == to;
          });
          builder.add(from, to, selected ? selectedMatchMark : matchMark);
        });
      }
      return builder.finish();
    }
  }]);
  return _class2;
}(), {
  decorations: function decorations(v) {
    return v.decorations;
  }
});
function searchCommand(f) {
  return function (view) {
    var state = view.state.field(searchState, false);
    return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);
  };
}
/**
Open the search panel if it isn't already open, and move the
selection to the first match after the current main selection.
Will wrap around to the start of the document when it reaches the
end.
*/
var findNext = /*@__PURE__*/searchCommand(function (view, _ref4) {
  var query = _ref4.query;
  var to = view.state.selection.main.to;
  var next = query.nextMatch(view.state, to, to);
  if (!next) return false;
  var selection = EditorSelection.single(next.from, next.to);
  var config = view.state.facet(searchConfigFacet);
  view.dispatch({
    selection: selection,
    effects: [announceMatch(view, next), config.scrollToMatch(selection.main, view)],
    userEvent: "select.search"
  });
  selectSearchInput(view);
  return true;
});
/**
Move the selection to the previous instance of the search query,
before the current main selection. Will wrap past the start
of the document to start searching at the end again.
*/
var findPrevious = /*@__PURE__*/searchCommand(function (view, _ref5) {
  var query = _ref5.query;
  var state = view.state,
    from = state.selection.main.from;
  var prev = query.prevMatch(state, from, from);
  if (!prev) return false;
  var selection = EditorSelection.single(prev.from, prev.to);
  var config = view.state.facet(searchConfigFacet);
  view.dispatch({
    selection: selection,
    effects: [announceMatch(view, prev), config.scrollToMatch(selection.main, view)],
    userEvent: "select.search"
  });
  selectSearchInput(view);
  return true;
});
/**
Select all instances of the search query.
*/
var selectMatches = /*@__PURE__*/searchCommand(function (view, _ref6) {
  var query = _ref6.query;
  var ranges = query.matchAll(view.state, 1000);
  if (!ranges || !ranges.length) return false;
  view.dispatch({
    selection: EditorSelection.create(ranges.map(function (r) {
      return EditorSelection.range(r.from, r.to);
    })),
    userEvent: "select.search.matches"
  });
  return true;
});
/**
Select all instances of the currently selected text.
*/
var selectSelectionMatches = function selectSelectionMatches(_ref7) {
  var state = _ref7.state,
    dispatch = _ref7.dispatch;
  var sel = state.selection;
  if (sel.ranges.length > 1 || sel.main.empty) return false;
  var _sel$main = sel.main,
    from = _sel$main.from,
    to = _sel$main.to;
  var ranges = [],
    main = 0;
  for (var cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {
    if (ranges.length > 1000) return false;
    if (cur.value.from == from) main = ranges.length;
    ranges.push(EditorSelection.range(cur.value.from, cur.value.to));
  }
  dispatch(state.update({
    selection: EditorSelection.create(ranges, main),
    userEvent: "select.search.matches"
  }));
  return true;
};
/**
Replace the current match of the search query.
*/
var replaceNext = /*@__PURE__*/searchCommand(function (view, _ref8) {
  var query = _ref8.query;
  var state = view.state,
    _state$selection$main = state.selection.main,
    from = _state$selection$main.from,
    to = _state$selection$main.to;
  if (state.readOnly) return false;
  var next = query.nextMatch(state, from, from);
  if (!next) return false;
  var changes = [],
    selection,
    replacement;
  var effects = [];
  if (next.from == from && next.to == to) {
    replacement = state.toText(query.getReplacement(next));
    changes.push({
      from: next.from,
      to: next.to,
      insert: replacement
    });
    next = query.nextMatch(state, next.from, next.to);
    effects.push(EditorView.announce.of(state.phrase("replaced match on line $", state.doc.lineAt(from).number) + "."));
  }
  if (next) {
    var off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;
    selection = EditorSelection.single(next.from - off, next.to - off);
    effects.push(announceMatch(view, next));
    effects.push(state.facet(searchConfigFacet).scrollToMatch(selection.main, view));
  }
  view.dispatch({
    changes: changes,
    selection: selection,
    effects: effects,
    userEvent: "input.replace"
  });
  return true;
});
/**
Replace all instances of the search query with the given
replacement.
*/
var replaceAll = /*@__PURE__*/searchCommand(function (view, _ref9) {
  var query = _ref9.query;
  if (view.state.readOnly) return false;
  var changes = query.matchAll(view.state, 1e9).map(function (match) {
    var from = match.from,
      to = match.to;
    return {
      from: from,
      to: to,
      insert: query.getReplacement(match)
    };
  });
  if (!changes.length) return false;
  var announceText = view.state.phrase("replaced $ matches", changes.length) + ".";
  view.dispatch({
    changes: changes,
    effects: EditorView.announce.of(announceText),
    userEvent: "input.replace.all"
  });
  return true;
});
function createSearchPanel(view) {
  return view.state.facet(searchConfigFacet).createPanel(view);
}
function defaultQuery(state, fallback) {
  var _a, _b, _c, _d, _e;
  var sel = state.selection.main;
  var selText = sel.empty || sel.to > sel.from + 100 ? "" : state.sliceDoc(sel.from, sel.to);
  if (fallback && !selText) return fallback;
  var config = state.facet(searchConfigFacet);
  return new SearchQuery({
    search: ((_a = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a !== void 0 ? _a : config.literal) ? selText : selText.replace(/\n/g, "\\n"),
    caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config.caseSensitive,
    literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config.literal,
    regexp: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.regexp) !== null && _d !== void 0 ? _d : config.regexp,
    wholeWord: (_e = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _e !== void 0 ? _e : config.wholeWord
  });
}
function getSearchInput(view) {
  var panel = getPanel(view, createSearchPanel);
  return panel && panel.dom.querySelector("[main-field]");
}
function selectSearchInput(view) {
  var input = getSearchInput(view);
  if (input && input == view.root.activeElement) input.select();
}
/**
Make sure the search panel is open and focused.
*/
var openSearchPanel = function openSearchPanel(view) {
  var state = view.state.field(searchState, false);
  if (state && state.panel) {
    var searchInput = getSearchInput(view);
    if (searchInput && searchInput != view.root.activeElement) {
      var query = defaultQuery(view.state, state.query.spec);
      if (query.valid) view.dispatch({
        effects: setSearchQuery.of(query)
      });
      searchInput.focus();
      searchInput.select();
    }
  } else {
    view.dispatch({
      effects: [togglePanel$1.of(true), state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)]
    });
  }
  return true;
};
/**
Close the search panel.
*/
var closeSearchPanel = function closeSearchPanel(view) {
  var state = view.state.field(searchState, false);
  if (!state || !state.panel) return false;
  var panel = getPanel(view, createSearchPanel);
  if (panel && panel.dom.contains(view.root.activeElement)) view.focus();
  view.dispatch({
    effects: togglePanel$1.of(false)
  });
  return true;
};
/**
Default search-related key bindings.

 - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)
 - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)
 - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)
 - Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)
 - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)
*/
var searchKeymap = [{
  key: "Mod-f",
  run: openSearchPanel,
  scope: "editor search-panel"
}, {
  key: "F3",
  run: findNext,
  shift: findPrevious,
  scope: "editor search-panel",
  preventDefault: true
}, {
  key: "Mod-g",
  run: findNext,
  shift: findPrevious,
  scope: "editor search-panel",
  preventDefault: true
}, {
  key: "Escape",
  run: closeSearchPanel,
  scope: "editor search-panel"
}, {
  key: "Mod-Shift-l",
  run: selectSelectionMatches
}, {
  key: "Alt-g",
  run: gotoLine
}, {
  key: "Mod-d",
  run: selectNextOccurrence,
  preventDefault: true
}];
var SearchPanel = /*#__PURE__*/function () {
  function SearchPanel(view) {
    var _this = this;
    _classCallCheck(this, SearchPanel);
    this.view = view;
    var query = this.query = view.state.field(searchState).query.spec;
    this.commit = this.commit.bind(this);
    this.searchField = crelt("input", {
      value: query.search,
      placeholder: phrase(view, "Find"),
      "aria-label": phrase(view, "Find"),
      "class": "cm-textfield",
      name: "search",
      form: "",
      "main-field": "true",
      onchange: this.commit,
      onkeyup: this.commit
    });
    this.replaceField = crelt("input", {
      value: query.replace,
      placeholder: phrase(view, "Replace"),
      "aria-label": phrase(view, "Replace"),
      "class": "cm-textfield",
      name: "replace",
      form: "",
      onchange: this.commit,
      onkeyup: this.commit
    });
    this.caseField = crelt("input", {
      type: "checkbox",
      name: "case",
      form: "",
      checked: query.caseSensitive,
      onchange: this.commit
    });
    this.reField = crelt("input", {
      type: "checkbox",
      name: "re",
      form: "",
      checked: query.regexp,
      onchange: this.commit
    });
    this.wordField = crelt("input", {
      type: "checkbox",
      name: "word",
      form: "",
      checked: query.wholeWord,
      onchange: this.commit
    });
    function button(name, onclick, content) {
      return crelt("button", {
        "class": "cm-button",
        name: name,
        onclick: onclick,
        type: "button"
      }, content);
    }
    this.dom = crelt("div", {
      onkeydown: function onkeydown(e) {
        return _this.keydown(e);
      },
      "class": "cm-search"
    }, [this.searchField, button("next", function () {
      return findNext(view);
    }, [phrase(view, "next")]), button("prev", function () {
      return findPrevious(view);
    }, [phrase(view, "previous")]), button("select", function () {
      return selectMatches(view);
    }, [phrase(view, "all")]), crelt("label", null, [this.caseField, phrase(view, "match case")]), crelt("label", null, [this.reField, phrase(view, "regexp")]), crelt("label", null, [this.wordField, phrase(view, "by word")])].concat(_toConsumableArray(view.state.readOnly ? [] : [crelt("br"), this.replaceField, button("replace", function () {
      return replaceNext(view);
    }, [phrase(view, "replace")]), button("replaceAll", function () {
      return replaceAll(view);
    }, [phrase(view, "replace all")])]), [crelt("button", {
      name: "close",
      onclick: function onclick() {
        return closeSearchPanel(view);
      },
      "aria-label": phrase(view, "close"),
      type: "button"
    }, ["×"])]));
  }
  _createClass(SearchPanel, [{
    key: "commit",
    value: function commit() {
      var query = new SearchQuery({
        search: this.searchField.value,
        caseSensitive: this.caseField.checked,
        regexp: this.reField.checked,
        wholeWord: this.wordField.checked,
        replace: this.replaceField.value
      });
      if (!query.eq(this.query)) {
        this.query = query;
        this.view.dispatch({
          effects: setSearchQuery.of(query)
        });
      }
    }
  }, {
    key: "keydown",
    value: function keydown(e) {
      if (runScopeHandlers(this.view, e, "search-panel")) {
        e.preventDefault();
      } else if (e.keyCode == 13 && e.target == this.searchField) {
        e.preventDefault();
        (e.shiftKey ? findPrevious : findNext)(this.view);
      } else if (e.keyCode == 13 && e.target == this.replaceField) {
        e.preventDefault();
        replaceNext(this.view);
      }
    }
  }, {
    key: "update",
    value: function update(_update3) {
      var _iterator4 = _createForOfIteratorHelper(_update3.transactions),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var tr = _step4.value;
          var _iterator5 = _createForOfIteratorHelper(tr.effects),
            _step5;
          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var effect = _step5.value;
              if (effect.is(setSearchQuery) && !effect.value.eq(this.query)) this.setQuery(effect.value);
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
  }, {
    key: "setQuery",
    value: function setQuery(query) {
      this.query = query;
      this.searchField.value = query.search;
      this.replaceField.value = query.replace;
      this.caseField.checked = query.caseSensitive;
      this.reField.checked = query.regexp;
      this.wordField.checked = query.wholeWord;
    }
  }, {
    key: "mount",
    value: function mount() {
      this.searchField.select();
    }
  }, {
    key: "pos",
    get: function get() {
      return 80;
    }
  }, {
    key: "top",
    get: function get() {
      return this.view.state.facet(searchConfigFacet).top;
    }
  }]);
  return SearchPanel;
}();
function phrase(view, phrase) {
  return view.state.phrase(phrase);
}
var AnnounceMargin = 30;
var Break = /[\s\.,:;?!]/;
function announceMatch(view, _ref10) {
  var from = _ref10.from,
    to = _ref10.to;
  var line = view.state.doc.lineAt(from),
    lineEnd = view.state.doc.lineAt(to).to;
  var start = Math.max(line.from, from - AnnounceMargin),
    end = Math.min(lineEnd, to + AnnounceMargin);
  var text = view.state.sliceDoc(start, end);
  if (start != line.from) {
    for (var i = 0; i < AnnounceMargin; i++) if (!Break.test(text[i + 1]) && Break.test(text[i])) {
      text = text.slice(i);
      break;
    }
  }
  if (end != lineEnd) {
    for (var _i = text.length - 1; _i > text.length - AnnounceMargin; _i--) if (!Break.test(text[_i - 1]) && Break.test(text[_i])) {
      text = text.slice(0, _i);
      break;
    }
  }
  return EditorView.announce.of("".concat(view.state.phrase("current match"), ". ").concat(text, " ").concat(view.state.phrase("on line"), " ").concat(line.number, "."));
}
var baseTheme$2 = /*@__PURE__*/EditorView.baseTheme({
  ".cm-panel.cm-search": {
    padding: "2px 6px 4px",
    position: "relative",
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "4px",
      backgroundColor: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    },
    "& input, & button, & label": {
      margin: ".2em .6em .2em 0"
    },
    "& input[type=checkbox]": {
      marginRight: ".2em"
    },
    "& label": {
      fontSize: "80%",
      whiteSpace: "pre"
    }
  },
  "&light .cm-searchMatch": {
    backgroundColor: "#ffff0054"
  },
  "&dark .cm-searchMatch": {
    backgroundColor: "#00ffff8a"
  },
  "&light .cm-searchMatch-selected": {
    backgroundColor: "#ff6a0054"
  },
  "&dark .cm-searchMatch-selected": {
    backgroundColor: "#ff00ff8a"
  }
});
var searchExtensions = [searchState, /*@__PURE__*/Prec.lowest(searchHighlighter), baseTheme$2];

/**
An instance of this is passed to completion source functions.
*/
var CompletionContext = /*#__PURE__*/function () {
  /**
  Create a new completion context. (Mostly useful for testing
  completion sources—in the editor, the extension will create
  these for you.)
  */
  function CompletionContext(
  /**
  The editor state that the completion happens in.
  */
  state,
  /**
  The position at which the completion is happening.
  */
  pos,
  /**
  Indicates whether completion was activated explicitly, or
  implicitly by typing. The usual way to respond to this is to
  only return completions when either there is part of a
  completable entity before the cursor, or `explicit` is true.
  */
  explicit) {
    _classCallCheck(this, CompletionContext);
    this.state = state;
    this.pos = pos;
    this.explicit = explicit;
    /**
    @internal
    */
    this.abortListeners = [];
  }
  /**
  Get the extent, content, and (if there is a token) type of the
  token before `this.pos`.
  */
  _createClass(CompletionContext, [{
    key: "tokenBefore",
    value: function tokenBefore(types) {
      var token = syntaxTree(this.state).resolveInner(this.pos, -1);
      while (token && types.indexOf(token.name) < 0) token = token.parent;
      return token ? {
        from: token.from,
        to: this.pos,
        text: this.state.sliceDoc(token.from, this.pos),
        type: token.type
      } : null;
    }
    /**
    Get the match of the given expression directly before the
    cursor.
    */
  }, {
    key: "matchBefore",
    value: function matchBefore(expr) {
      var line = this.state.doc.lineAt(this.pos);
      var start = Math.max(line.from, this.pos - 250);
      var str = line.text.slice(start - line.from, this.pos - line.from);
      var found = str.search(ensureAnchor(expr, false));
      return found < 0 ? null : {
        from: start + found,
        to: this.pos,
        text: str.slice(found)
      };
    }
    /**
    Yields true when the query has been aborted. Can be useful in
    asynchronous queries to avoid doing work that will be ignored.
    */
  }, {
    key: "aborted",
    get: function get() {
      return this.abortListeners == null;
    }
    /**
    Allows you to register abort handlers, which will be called when
    the query is
    [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
    */
  }, {
    key: "addEventListener",
    value: function addEventListener(type, listener) {
      if (type == "abort" && this.abortListeners) this.abortListeners.push(listener);
    }
  }]);
  return CompletionContext;
}();
function toSet(chars) {
  var flat = Object.keys(chars).join("");
  var words = /\w/.test(flat);
  if (words) flat = flat.replace(/\w/g, "");
  return "[".concat(words ? "\\w" : "").concat(flat.replace(/[^\w\s]/g, "\\$&"), "]");
}
function prefixMatch(options) {
  var first = Object.create(null),
    rest = Object.create(null);
  var _iterator = _createForOfIteratorHelper(options),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var label = _step.value.label;
      first[label[0]] = true;
      for (var i = 1; i < label.length; i++) rest[label[i]] = true;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var source = toSet(first) + toSet(rest) + "*$";
  return [new RegExp("^" + source), new RegExp(source)];
}
/**
Given a a fixed array of options, return an autocompleter that
completes them.
*/
function completeFromList(list) {
  var options = list.map(function (o) {
    return typeof o == "string" ? {
      label: o
    } : o;
  });
  var _ref = options.every(function (o) {
      return /^\w+$/.test(o.label);
    }) ? [/\w*$/, /\w+$/] : prefixMatch(options),
    _ref2 = _slicedToArray(_ref, 2),
    validFor = _ref2[0],
    match = _ref2[1];
  return function (context) {
    var token = context.matchBefore(match);
    return token || context.explicit ? {
      from: token ? token.from : context.pos,
      options: options,
      validFor: validFor
    } : null;
  };
}
/**
Wrap the given completion source so that it will not fire when the
cursor is in a syntax node with one of the given names.
*/
function ifNotIn(nodes, source) {
  return function (context) {
    for (var pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {
      if (nodes.indexOf(pos.name) > -1) return null;
      if (pos.type.isTop) break;
    }
    return source(context);
  };
}
var Option = /*#__PURE__*/_createClass(function Option(completion, source, match, score) {
  _classCallCheck(this, Option);
  this.completion = completion;
  this.source = source;
  this.match = match;
  this.score = score;
});
function cur(state) {
  return state.selection.main.from;
}
// Make sure the given regexp has a $ at its end and, if `start` is
// true, a ^ at its start.
function ensureAnchor(expr, start) {
  var _a;
  var source = expr.source;
  var addStart = start && source[0] != "^",
    addEnd = source[source.length - 1] != "$";
  if (!addStart && !addEnd) return expr;
  return new RegExp("".concat(addStart ? "^" : "", "(?:").concat(source, ")").concat(addEnd ? "$" : ""), (_a = expr.flags) !== null && _a !== void 0 ? _a : expr.ignoreCase ? "i" : "");
}
/**
This annotation is added to transactions that are produced by
picking a completion.
*/
var pickedCompletion = /*@__PURE__*/Annotation.define();
/**
Helper function that returns a transaction spec which inserts a
completion's text in the main selection range, and any other
selection range that has the same text in front of it.
*/
function insertCompletionText(state, text, from, to) {
  var main = state.selection.main,
    fromOff = from - main.from,
    toOff = to - main.from;
  return Object.assign(Object.assign({}, state.changeByRange(function (range) {
    if (range != main && from != to && state.sliceDoc(range.from + fromOff, range.from + toOff) != state.sliceDoc(from, to)) return {
      range: range
    };
    return {
      changes: {
        from: range.from + fromOff,
        to: to == main.from ? range.to : range.from + toOff,
        insert: text
      },
      range: EditorSelection.cursor(range.from + fromOff + text.length)
    };
  })), {
    userEvent: "input.complete"
  });
}
var SourceCache = /*@__PURE__*/new WeakMap();
function asSource(source) {
  if (!Array.isArray(source)) return source;
  var known = SourceCache.get(source);
  if (!known) SourceCache.set(source, known = completeFromList(source));
  return known;
}
var startCompletionEffect = /*@__PURE__*/StateEffect.define();
var closeCompletionEffect = /*@__PURE__*/StateEffect.define();

// A pattern matcher for fuzzy completion matching. Create an instance
// once for a pattern, and then use that to match any number of
// completions.
var FuzzyMatcher = /*#__PURE__*/function () {
  function FuzzyMatcher(pattern) {
    _classCallCheck(this, FuzzyMatcher);
    this.pattern = pattern;
    this.chars = [];
    this.folded = [];
    // Buffers reused by calls to `match` to track matched character
    // positions.
    this.any = [];
    this.precise = [];
    this.byWord = [];
    for (var p = 0; p < pattern.length;) {
      var _char = codePointAt(pattern, p),
        size = codePointSize(_char);
      this.chars.push(_char);
      var part = pattern.slice(p, p + size),
        upper = part.toUpperCase();
      this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));
      p += size;
    }
    this.astral = pattern.length != this.chars.length;
  }
  // Matches a given word (completion) against the pattern (input).
  // Will return null for no match, and otherwise an array that starts
  // with the match score, followed by any number of `from, to` pairs
  // indicating the matched parts of `word`.
  //
  // The score is a number that is more negative the worse the match
  // is. See `Penalty` above.
  _createClass(FuzzyMatcher, [{
    key: "match",
    value: function match(word) {
      if (this.pattern.length == 0) return [-100 /* Penalty.NotFull */];
      if (word.length < this.pattern.length) return null;
      var chars = this.chars,
        folded = this.folded,
        any = this.any,
        precise = this.precise,
        byWord = this.byWord;
      // For single-character queries, only match when they occur right
      // at the start
      if (chars.length == 1) {
        var first = codePointAt(word, 0),
          firstSize = codePointSize(first);
        var _score = firstSize == word.length ? 0 : -100 /* Penalty.NotFull */;
        if (first == chars[0]) ;else if (first == folded[0]) _score += -200 /* Penalty.CaseFold */;else return null;
        return [_score, 0, firstSize];
      }
      var direct = word.indexOf(this.pattern);
      if (direct == 0) return [word.length == this.pattern.length ? 0 : -100 /* Penalty.NotFull */, 0, this.pattern.length];
      var len = chars.length,
        anyTo = 0;
      if (direct < 0) {
        for (var i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {
          var next = codePointAt(word, i);
          if (next == chars[anyTo] || next == folded[anyTo]) any[anyTo++] = i;
          i += codePointSize(next);
        }
        // No match, exit immediately
        if (anyTo < len) return null;
      }
      // This tracks the extent of the precise (non-folded, not
      // necessarily adjacent) match
      var preciseTo = 0;
      // Tracks whether there is a match that hits only characters that
      // appear to be starting words. `byWordFolded` is set to true when
      // a case folded character is encountered in such a match
      var byWordTo = 0,
        byWordFolded = false;
      // If we've found a partial adjacent match, these track its state
      var adjacentTo = 0,
        adjacentStart = -1,
        adjacentEnd = -1;
      var hasLower = /[a-z]/.test(word),
        wordAdjacent = true;
      // Go over the option's text, scanning for the various kinds of matches
      for (var _i = 0, _e = Math.min(word.length, 200), prevType = 0 /* Tp.NonWord */; _i < _e && byWordTo < len;) {
        var _next = codePointAt(word, _i);
        if (direct < 0) {
          if (preciseTo < len && _next == chars[preciseTo]) precise[preciseTo++] = _i;
          if (adjacentTo < len) {
            if (_next == chars[adjacentTo] || _next == folded[adjacentTo]) {
              if (adjacentTo == 0) adjacentStart = _i;
              adjacentEnd = _i + 1;
              adjacentTo++;
            } else {
              adjacentTo = 0;
            }
          }
        }
        var ch = void 0,
          type = _next < 0xff ? _next >= 48 && _next <= 57 || _next >= 97 && _next <= 122 ? 2 /* Tp.Lower */ : _next >= 65 && _next <= 90 ? 1 /* Tp.Upper */ : 0 /* Tp.NonWord */ : (ch = fromCodePoint(_next)) != ch.toLowerCase() ? 1 /* Tp.Upper */ : ch != ch.toUpperCase() ? 2 /* Tp.Lower */ : 0 /* Tp.NonWord */;
        if (!_i || type == 1 /* Tp.Upper */ && hasLower || prevType == 0 /* Tp.NonWord */ && type != 0 /* Tp.NonWord */) {
          if (chars[byWordTo] == _next || folded[byWordTo] == _next && (byWordFolded = true)) byWord[byWordTo++] = _i;else if (byWord.length) wordAdjacent = false;
        }
        prevType = type;
        _i += codePointSize(_next);
      }
      if (byWordTo == len && byWord[0] == 0 && wordAdjacent) return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0), byWord, word);
      if (adjacentTo == len && adjacentStart == 0) return [-200 /* Penalty.CaseFold */ - word.length + (adjacentEnd == word.length ? 0 : -100 /* Penalty.NotFull */), 0, adjacentEnd];
      if (direct > -1) return [-700 /* Penalty.NotStart */ - word.length, direct, direct + this.pattern.length];
      if (adjacentTo == len) return [-200 /* Penalty.CaseFold */ + -700 /* Penalty.NotStart */ - word.length, adjacentStart, adjacentEnd];
      if (byWordTo == len) return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0) + -700 /* Penalty.NotStart */ + (wordAdjacent ? 0 : -1100 /* Penalty.Gap */), byWord, word);
      return chars.length == 2 ? null : this.result((any[0] ? -700 /* Penalty.NotStart */ : 0) + -200 /* Penalty.CaseFold */ + -1100 /* Penalty.Gap */, any, word);
    }
  }, {
    key: "result",
    value: function result(score, positions, word) {
      var result = [score - word.length],
        i = 1;
      var _iterator2 = _createForOfIteratorHelper(positions),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var pos = _step2.value;
          var to = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);
          if (i > 1 && result[i - 1] == pos) result[i - 1] = to;else {
            result[i++] = pos;
            result[i++] = to;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      return result;
    }
  }]);
  return FuzzyMatcher;
}();
var completionConfig = /*@__PURE__*/Facet.define({
  combine: function combine(configs) {
    return combineConfig(configs, {
      activateOnTyping: true,
      selectOnOpen: true,
      override: null,
      closeOnBlur: true,
      maxRenderedOptions: 100,
      defaultKeymap: true,
      tooltipClass: function tooltipClass() {
        return "";
      },
      optionClass: function optionClass() {
        return "";
      },
      aboveCursor: false,
      icons: true,
      addToOptions: [],
      positionInfo: defaultPositionInfo,
      compareCompletions: function compareCompletions(a, b) {
        return a.label.localeCompare(b.label);
      },
      interactionDelay: 75
    }, {
      defaultKeymap: function defaultKeymap(a, b) {
        return a && b;
      },
      closeOnBlur: function closeOnBlur(a, b) {
        return a && b;
      },
      icons: function icons(a, b) {
        return a && b;
      },
      tooltipClass: function tooltipClass(a, b) {
        return function (c) {
          return joinClass(a(c), b(c));
        };
      },
      optionClass: function optionClass(a, b) {
        return function (c) {
          return joinClass(a(c), b(c));
        };
      },
      addToOptions: function addToOptions(a, b) {
        return a.concat(b);
      }
    });
  }
});
function joinClass(a, b) {
  return a ? b ? a + " " + b : a : b;
}
function defaultPositionInfo(view, list, option, info, space) {
  var rtl = view.textDirection == Direction.RTL,
    left = rtl,
    narrow = false;
  var side = "top",
    offset,
    maxWidth;
  var spaceLeft = list.left - space.left,
    spaceRight = space.right - list.right;
  var infoWidth = info.right - info.left,
    infoHeight = info.bottom - info.top;
  if (left && spaceLeft < Math.min(infoWidth, spaceRight)) left = false;else if (!left && spaceRight < Math.min(infoWidth, spaceLeft)) left = true;
  if (infoWidth <= (left ? spaceLeft : spaceRight)) {
    offset = Math.max(space.top, Math.min(option.top, space.bottom - infoHeight)) - list.top;
    maxWidth = Math.min(400 /* Info.Width */, left ? spaceLeft : spaceRight);
  } else {
    narrow = true;
    maxWidth = Math.min(400 /* Info.Width */, (rtl ? list.right : space.right - list.left) - 30 /* Info.Margin */);
    var spaceBelow = space.bottom - list.bottom;
    if (spaceBelow >= infoHeight || spaceBelow > list.top) {
      // Below the completion
      offset = option.bottom - list.top;
    } else {
      // Above it
      side = "bottom";
      offset = list.bottom - option.top;
    }
  }
  return {
    style: "".concat(side, ": ").concat(offset, "px; max-width: ").concat(maxWidth, "px"),
    "class": "cm-completionInfo-" + (narrow ? rtl ? "left-narrow" : "right-narrow" : left ? "left" : "right")
  };
}

/**
Returns a command that moves the completion selection forward or
backward by the given amount.
*/
function moveCompletionSelection(forward) {
  var by = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "option";
  return function (view) {
    var cState = view.state.field(completionState, false);
    if (!cState || !cState.open || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay) return false;
    var step = 1,
      tooltip;
    if (by == "page" && (tooltip = getTooltip(view, cState.open.tooltip))) step = Math.max(2, Math.floor(tooltip.dom.offsetHeight / tooltip.dom.querySelector("li").offsetHeight) - 1);
    var length = cState.open.options.length;
    var selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;
    if (selected < 0) selected = by == "page" ? 0 : length - 1;else if (selected >= length) selected = by == "page" ? length - 1 : 0;
    view.dispatch({
      effects: setSelectedEffect.of(selected)
    });
    return true;
  };
}
/**
Accept the current completion.
*/
var acceptCompletion = function acceptCompletion(view) {
  var cState = view.state.field(completionState, false);
  if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay) return false;
  if (!cState.open.disabled) return applyCompletion(view, cState.open.options[cState.open.selected]);
  return true;
};
/**
Explicitly start autocompletion.
*/
var startCompletion = function startCompletion(view) {
  var cState = view.state.field(completionState, false);
  if (!cState) return false;
  view.dispatch({
    effects: startCompletionEffect.of(true)
  });
  return true;
};
/**
Close the currently active completion.
*/
var closeCompletion = function closeCompletion(view) {
  var cState = view.state.field(completionState, false);
  if (!cState || !cState.active.some(function (a) {
    return a.state != 0;
  } /* State.Inactive */)) return false;
  view.dispatch({
    effects: closeCompletionEffect.of(null)
  });
  return true;
};
var RunningQuery = /*#__PURE__*/_createClass(function RunningQuery(active, context) {
  _classCallCheck(this, RunningQuery);
  this.active = active;
  this.context = context;
  this.time = Date.now();
  this.updates = [];
  // Note that 'undefined' means 'not done yet', whereas 'null' means
  // 'query returned null'.
  this.done = undefined;
});
var DebounceTime = 50,
  MaxUpdateCount = 50,
  MinAbortTime = 1000;
var completionPlugin = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class(view) {
    _classCallCheck(this, _class);
    this.view = view;
    this.debounceUpdate = -1;
    this.running = [];
    this.debounceAccept = -1;
    this.composing = 0 /* CompositionState.None */;
    var _iterator3 = _createForOfIteratorHelper(view.state.field(completionState).active),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var active = _step3.value;
        if (active.state == 1 /* State.Pending */) this.startQuery(active);
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  }
  _createClass(_class, [{
    key: "update",
    value: function update(_update) {
      var _this = this;
      var cState = _update.state.field(completionState);
      if (!_update.selectionSet && !_update.docChanged && _update.startState.field(completionState) == cState) return;
      var doesReset = _update.transactions.some(function (tr) {
        return (tr.selection || tr.docChanged) && !getUserEvent(tr);
      });
      for (var i = 0; i < this.running.length; i++) {
        var query = this.running[i];
        if (doesReset || query.updates.length + _update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {
          var _iterator4 = _createForOfIteratorHelper(query.context.abortListeners),
            _step4;
          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var handler = _step4.value;
              try {
                handler();
              } catch (e) {
                logException(this.view.state, e);
              }
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
          query.context.abortListeners = null;
          this.running.splice(i--, 1);
        } else {
          var _query$updates;
          (_query$updates = query.updates).push.apply(_query$updates, _toConsumableArray(_update.transactions));
        }
      }
      if (this.debounceUpdate > -1) clearTimeout(this.debounceUpdate);
      this.debounceUpdate = cState.active.some(function (a) {
        return a.state == 1 /* State.Pending */ && !_this.running.some(function (q) {
          return q.active.source == a.source;
        });
      }) ? setTimeout(function () {
        return _this.startUpdate();
      }, DebounceTime) : -1;
      if (this.composing != 0 /* CompositionState.None */) {
        var _iterator5 = _createForOfIteratorHelper(_update.transactions),
          _step5;
        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var tr = _step5.value;
            if (getUserEvent(tr) == "input") this.composing = 2 /* CompositionState.Changed */;else if (this.composing == 2 /* CompositionState.Changed */ && tr.selection) this.composing = 3 /* CompositionState.ChangedAndMoved */;
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }
    }
  }, {
    key: "startUpdate",
    value: function startUpdate() {
      var _this2 = this;
      this.debounceUpdate = -1;
      var state = this.view.state,
        cState = state.field(completionState);
      var _iterator6 = _createForOfIteratorHelper(cState.active),
        _step6;
      try {
        var _loop = function _loop() {
          var active = _step6.value;
          if (active.state == 1 /* State.Pending */ && !_this2.running.some(function (r) {
            return r.active.source == active.source;
          })) _this2.startQuery(active);
        };
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
    }
  }, {
    key: "startQuery",
    value: function startQuery(active) {
      var _this3 = this;
      var state = this.view.state,
        pos = cur(state);
      var context = new CompletionContext(state, pos, active.explicitPos == pos);
      var pending = new RunningQuery(active, context);
      this.running.push(pending);
      Promise.resolve(active.source(context)).then(function (result) {
        if (!pending.context.aborted) {
          pending.done = result || null;
          _this3.scheduleAccept();
        }
      }, function (err) {
        _this3.view.dispatch({
          effects: closeCompletionEffect.of(null)
        });
        logException(_this3.view.state, err);
      });
    }
  }, {
    key: "scheduleAccept",
    value: function scheduleAccept() {
      var _this4 = this;
      if (this.running.every(function (q) {
        return q.done !== undefined;
      })) this.accept();else if (this.debounceAccept < 0) this.debounceAccept = setTimeout(function () {
        return _this4.accept();
      }, DebounceTime);
    }
    // For each finished query in this.running, try to create a result
    // or, if appropriate, restart the query.
  }, {
    key: "accept",
    value: function accept() {
      var _this5 = this;
      var _a;
      if (this.debounceAccept > -1) clearTimeout(this.debounceAccept);
      this.debounceAccept = -1;
      var updated = [];
      var conf = this.view.state.facet(completionConfig);
      var _loop2 = function _loop2(_i2) {
        var query = _this5.running[_i2];
        if (query.done === undefined) {
          i = _i2;
          return "continue";
        }
        _this5.running.splice(_i2--, 1);
        if (query.done) {
          var active = new ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : cur(query.updates.length ? query.updates[0].startState : _this5.view.state));
          // Replay the transactions that happened since the start of
          // the request and see if that preserves the result
          var _iterator7 = _createForOfIteratorHelper(query.updates),
            _step7;
          try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              var tr = _step7.value;
              active = active.update(tr, conf);
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }
          if (active.hasResult()) {
            updated.push(active);
            i = _i2;
            return "continue";
          }
        }
        var current = _this5.view.state.field(completionState).active.find(function (a) {
          return a.source == query.active.source;
        });
        if (current && current.state == 1 /* State.Pending */) {
          if (query.done == null) {
            // Explicitly failed. Should clear the pending status if it
            // hasn't been re-set in the meantime.
            var _active = new ActiveSource(query.active.source, 0 /* State.Inactive */);
            var _iterator8 = _createForOfIteratorHelper(query.updates),
              _step8;
            try {
              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                var _tr = _step8.value;
                _active = _active.update(_tr, conf);
              }
            } catch (err) {
              _iterator8.e(err);
            } finally {
              _iterator8.f();
            }
            if (_active.state != 1 /* State.Pending */) updated.push(_active);
          } else {
            // Cleared by subsequent transactions. Restart.
            _this5.startQuery(current);
          }
        }
        i = _i2;
      };
      for (var i = 0; i < this.running.length; i++) {
        var _ret = _loop2(i);
        if (_ret === "continue") continue;
      }
      if (updated.length) this.view.dispatch({
        effects: setActiveEffect.of(updated)
      });
    }
  }]);
  return _class;
}(), {
  eventHandlers: {
    blur: function blur(event) {
      var state = this.view.state.field(completionState, false);
      if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) {
        var dialog = state.open && getTooltip(this.view, state.open.tooltip);
        if (!dialog || !dialog.dom.contains(event.relatedTarget)) this.view.dispatch({
          effects: closeCompletionEffect.of(null)
        });
      }
    },
    compositionstart: function compositionstart() {
      this.composing = 1 /* CompositionState.Started */;
    },
    compositionend: function compositionend() {
      var _this6 = this;
      if (this.composing == 3 /* CompositionState.ChangedAndMoved */) {
        // Safari fires compositionend events synchronously, possibly
        // from inside an update, so dispatch asynchronously to avoid reentrancy
        setTimeout(function () {
          return _this6.view.dispatch({
            effects: startCompletionEffect.of(false)
          });
        }, 20);
      }
      this.composing = 0 /* CompositionState.None */;
    }
  }
});

function applyCompletion(view, option) {
  var apply = option.completion.apply || option.completion.label;
  var result = view.state.field(completionState).active.find(function (a) {
    return a.source == option.source;
  });
  if (!(result instanceof ActiveResult)) return false;
  if (typeof apply == "string") view.dispatch(Object.assign(Object.assign({}, insertCompletionText(view.state, apply, result.from, result.to)), {
    annotations: pickedCompletion.of(option.completion)
  }));else apply(view, option.completion, result.from, result.to);
  return true;
}
function optionContent(config) {
  var content = config.addToOptions.slice();
  if (config.icons) content.push({
    render: function render(completion) {
      var _icon$classList;
      var icon = document.createElement("div");
      icon.classList.add("cm-completionIcon");
      if (completion.type) (_icon$classList = icon.classList).add.apply(_icon$classList, _toConsumableArray(completion.type.split(/\s+/g).map(function (cls) {
        return "cm-completionIcon-" + cls;
      })));
      icon.setAttribute("aria-hidden", "true");
      return icon;
    },
    position: 20
  });
  content.push({
    render: function render(completion, _s, match) {
      var labelElt = document.createElement("span");
      labelElt.className = "cm-completionLabel";
      var label = completion.label,
        off = 0;
      for (var j = 1; j < match.length;) {
        var from = match[j++],
          to = match[j++];
        if (from > off) labelElt.appendChild(document.createTextNode(label.slice(off, from)));
        var span = labelElt.appendChild(document.createElement("span"));
        span.appendChild(document.createTextNode(label.slice(from, to)));
        span.className = "cm-completionMatchedText";
        off = to;
      }
      if (off < label.length) labelElt.appendChild(document.createTextNode(label.slice(off)));
      return labelElt;
    },
    position: 50
  }, {
    render: function render(completion) {
      if (!completion.detail) return null;
      var detailElt = document.createElement("span");
      detailElt.className = "cm-completionDetail";
      detailElt.textContent = completion.detail;
      return detailElt;
    },
    position: 80
  });
  return content.sort(function (a, b) {
    return a.position - b.position;
  }).map(function (a) {
    return a.render;
  });
}
function rangeAroundSelected(total, selected, max) {
  if (total <= max) return {
    from: 0,
    to: total
  };
  if (selected < 0) selected = 0;
  if (selected <= total >> 1) {
    var _off = Math.floor(selected / max);
    return {
      from: _off * max,
      to: (_off + 1) * max
    };
  }
  var off = Math.floor((total - selected) / max);
  return {
    from: total - (off + 1) * max,
    to: total - off * max
  };
}
var CompletionTooltip = /*#__PURE__*/function () {
  function CompletionTooltip(view, stateField) {
    var _this7 = this;
    _classCallCheck(this, CompletionTooltip);
    this.view = view;
    this.stateField = stateField;
    this.info = null;
    this.placeInfoReq = {
      read: function read() {
        return _this7.measureInfo();
      },
      write: function write(pos) {
        return _this7.placeInfo(pos);
      },
      key: this
    };
    this.space = null;
    this.currentClass = "";
    var cState = view.state.field(stateField);
    var _cState$open = cState.open,
      options = _cState$open.options,
      selected = _cState$open.selected;
    var config = view.state.facet(completionConfig);
    this.optionContent = optionContent(config);
    this.optionClass = config.optionClass;
    this.tooltipClass = config.tooltipClass;
    this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);
    this.dom = document.createElement("div");
    this.dom.className = "cm-tooltip-autocomplete";
    this.updateTooltipClass(view.state);
    this.dom.addEventListener("mousedown", function (e) {
      for (var dom = e.target, match; dom && dom != _this7.dom; dom = dom.parentNode) {
        if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options.length) {
          applyCompletion(view, options[+match[1]]);
          e.preventDefault();
          return;
        }
      }
    });
    this.dom.addEventListener("focusout", function (e) {
      var state = view.state.field(_this7.stateField, false);
      if (state && state.tooltip && view.state.facet(completionConfig).closeOnBlur && e.relatedTarget != view.contentDOM) view.dispatch({
        effects: closeCompletionEffect.of(null)
      });
    });
    this.list = this.dom.appendChild(this.createListBox(options, cState.id, this.range));
    this.list.addEventListener("scroll", function () {
      if (_this7.info) _this7.view.requestMeasure(_this7.placeInfoReq);
    });
  }
  _createClass(CompletionTooltip, [{
    key: "mount",
    value: function mount() {
      this.updateSel();
    }
  }, {
    key: "update",
    value: function update(_update2) {
      var _a, _b, _c;
      var cState = _update2.state.field(this.stateField);
      var prevState = _update2.startState.field(this.stateField);
      this.updateTooltipClass(_update2.state);
      if (cState != prevState) {
        this.updateSel();
        if (((_a = cState.open) === null || _a === void 0 ? void 0 : _a.disabled) != ((_b = prevState.open) === null || _b === void 0 ? void 0 : _b.disabled)) this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!((_c = cState.open) === null || _c === void 0 ? void 0 : _c.disabled));
      }
    }
  }, {
    key: "updateTooltipClass",
    value: function updateTooltipClass(state) {
      var cls = this.tooltipClass(state);
      if (cls != this.currentClass) {
        var _iterator9 = _createForOfIteratorHelper(this.currentClass.split(" ")),
          _step9;
        try {
          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
            var c = _step9.value;
            if (c) this.dom.classList.remove(c);
          }
        } catch (err) {
          _iterator9.e(err);
        } finally {
          _iterator9.f();
        }
        var _iterator10 = _createForOfIteratorHelper(cls.split(" ")),
          _step10;
        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            var _c2 = _step10.value;
            if (_c2) this.dom.classList.add(_c2);
          }
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }
        this.currentClass = cls;
      }
    }
  }, {
    key: "positioned",
    value: function positioned(space) {
      this.space = space;
      if (this.info) this.view.requestMeasure(this.placeInfoReq);
    }
  }, {
    key: "updateSel",
    value: function updateSel() {
      var _this8 = this;
      var cState = this.view.state.field(this.stateField),
        open = cState.open;
      if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {
        this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
        this.list.remove();
        this.list = this.dom.appendChild(this.createListBox(open.options, cState.id, this.range));
        this.list.addEventListener("scroll", function () {
          if (_this8.info) _this8.view.requestMeasure(_this8.placeInfoReq);
        });
      }
      if (this.updateSelectedOption(open.selected)) {
        if (this.info) {
          this.info.remove();
          this.info = null;
        }
        var completion = open.options[open.selected].completion;
        var info = completion.info;
        if (!info) return;
        var infoResult = typeof info === 'string' ? document.createTextNode(info) : info(completion);
        if (!infoResult) return;
        if ('then' in infoResult) {
          infoResult.then(function (node) {
            if (node && _this8.view.state.field(_this8.stateField, false) == cState) _this8.addInfoPane(node);
          })["catch"](function (e) {
            return logException(_this8.view.state, e, "completion info");
          });
        } else {
          this.addInfoPane(infoResult);
        }
      }
    }
  }, {
    key: "addInfoPane",
    value: function addInfoPane(content) {
      var dom = this.info = document.createElement("div");
      dom.className = "cm-tooltip cm-completionInfo";
      dom.appendChild(content);
      this.dom.appendChild(dom);
      this.view.requestMeasure(this.placeInfoReq);
    }
  }, {
    key: "updateSelectedOption",
    value: function updateSelectedOption(selected) {
      var set = null;
      for (var opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {
        if (opt.nodeName != "LI" || !opt.id) {
          i--; // A section header
        } else if (i == selected) {
          if (!opt.hasAttribute("aria-selected")) {
            opt.setAttribute("aria-selected", "true");
            set = opt;
          }
        } else {
          if (opt.hasAttribute("aria-selected")) opt.removeAttribute("aria-selected");
        }
      }
      if (set) scrollIntoView(this.list, set);
      return set;
    }
  }, {
    key: "measureInfo",
    value: function measureInfo() {
      var sel = this.dom.querySelector("[aria-selected]");
      if (!sel || !this.info) return null;
      var listRect = this.dom.getBoundingClientRect();
      var infoRect = this.info.getBoundingClientRect();
      var selRect = sel.getBoundingClientRect();
      var space = this.space;
      if (!space) {
        var win = this.dom.ownerDocument.defaultView || window;
        space = {
          left: 0,
          top: 0,
          right: win.innerWidth,
          bottom: win.innerHeight
        };
      }
      if (selRect.top > Math.min(space.bottom, listRect.bottom) - 10 || selRect.bottom < Math.max(space.top, listRect.top) + 10) return null;
      return this.view.state.facet(completionConfig).positionInfo(this.view, listRect, selRect, infoRect, space);
    }
  }, {
    key: "placeInfo",
    value: function placeInfo(pos) {
      if (this.info) {
        if (pos) {
          if (pos.style) this.info.style.cssText = pos.style;
          this.info.className = "cm-tooltip cm-completionInfo " + (pos["class"] || "");
        } else {
          this.info.style.cssText = "top: -1e6px";
        }
      }
    }
  }, {
    key: "createListBox",
    value: function createListBox(options, id, range) {
      var ul = document.createElement("ul");
      ul.id = id;
      ul.setAttribute("role", "listbox");
      ul.setAttribute("aria-expanded", "true");
      ul.setAttribute("aria-label", this.view.state.phrase("Completions"));
      var curSection = null;
      for (var i = range.from; i < range.to; i++) {
        var _options$i = options[i],
          completion = _options$i.completion,
          match = _options$i.match,
          section = completion.section;
        if (section) {
          var name = typeof section == "string" ? section : section.name;
          if (name != curSection && (i > range.from || range.from == 0)) {
            curSection = name;
            if (typeof section != "string" && section.header) {
              ul.appendChild(section.header(section));
            } else {
              var header = ul.appendChild(document.createElement("completion-section"));
              header.textContent = name;
            }
          }
        }
        var li = ul.appendChild(document.createElement("li"));
        li.id = id + "-" + i;
        li.setAttribute("role", "option");
        var cls = this.optionClass(completion);
        if (cls) li.className = cls;
        var _iterator11 = _createForOfIteratorHelper(this.optionContent),
          _step11;
        try {
          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
            var source = _step11.value;
            var node = source(completion, this.view.state, match);
            if (node) li.appendChild(node);
          }
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }
      }
      if (range.from) ul.classList.add("cm-completionListIncompleteTop");
      if (range.to < options.length) ul.classList.add("cm-completionListIncompleteBottom");
      return ul;
    }
  }]);
  return CompletionTooltip;
}(); // We allocate a new function instance every time the completion
// changes to force redrawing/repositioning of the tooltip
function completionTooltip(stateField) {
  return function (view) {
    return new CompletionTooltip(view, stateField);
  };
}
function scrollIntoView(container, element) {
  var parent = container.getBoundingClientRect();
  var self = element.getBoundingClientRect();
  if (self.top < parent.top) container.scrollTop -= parent.top - self.top;else if (self.bottom > parent.bottom) container.scrollTop += self.bottom - parent.bottom;
}

// Used to pick a preferred option when two options with the same
// label occur in the result.
function score(option) {
  return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) + (option.type ? 1 : 0);
}
function sortOptions(active, state) {
  var options = [];
  var sections = null;
  var addOption = function addOption(option) {
    options.push(option);
    var section = option.completion.section;
    if (section) {
      if (!sections) sections = [];
      var name = typeof section == "string" ? section : section.name;
      if (!sections.some(function (s) {
        return s.name == name;
      })) sections.push(typeof section == "string" ? {
        name: name
      } : section);
    }
  };
  var _iterator12 = _createForOfIteratorHelper(active),
    _step12;
  try {
    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
      var a = _step12.value;
      if (a.hasResult()) {
        if (a.result.filter === false) {
          var getMatch = a.result.getMatch;
          var _iterator16 = _createForOfIteratorHelper(a.result.options),
            _step16;
          try {
            for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
              var _option = _step16.value;
              var match = [1e9 - options.length];
              if (getMatch) {
                var _iterator17 = _createForOfIteratorHelper(getMatch(_option)),
                  _step17;
                try {
                  for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
                    var n = _step17.value;
                    match.push(n);
                  }
                } catch (err) {
                  _iterator17.e(err);
                } finally {
                  _iterator17.f();
                }
              }
              addOption(new Option(_option, a.source, match, match[0]));
            }
          } catch (err) {
            _iterator16.e(err);
          } finally {
            _iterator16.f();
          }
        } else {
          var matcher = new FuzzyMatcher(state.sliceDoc(a.from, a.to)),
            _match = void 0;
          var _iterator18 = _createForOfIteratorHelper(a.result.options),
            _step18;
          try {
            for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
              var _option2 = _step18.value;
              if (_match = matcher.match(_option2.label)) {
                addOption(new Option(_option2, a.source, _match, _match[0] + (_option2.boost || 0)));
              }
            }
          } catch (err) {
            _iterator18.e(err);
          } finally {
            _iterator18.f();
          }
        }
      }
    }
  } catch (err) {
    _iterator12.e(err);
  } finally {
    _iterator12.f();
  }
  if (sections) {
    var sectionOrder = Object.create(null),
      pos = 0;
    var cmp = function cmp(a, b) {
      var _a, _b;
      return ((_a = a.rank) !== null && _a !== void 0 ? _a : 1e9) - ((_b = b.rank) !== null && _b !== void 0 ? _b : 1e9) || (a.name < b.name ? -1 : 1);
    };
    var _iterator13 = _createForOfIteratorHelper(sections.sort(cmp)),
      _step13;
    try {
      for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
        var s = _step13.value;
        pos -= 1e5;
        sectionOrder[s.name] = pos;
      }
    } catch (err) {
      _iterator13.e(err);
    } finally {
      _iterator13.f();
    }
    var _iterator14 = _createForOfIteratorHelper(options),
      _step14;
    try {
      for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
        var option = _step14.value;
        var section = option.completion.section;
        if (section) option.score += sectionOrder[typeof section == "string" ? section : section.name];
      }
    } catch (err) {
      _iterator14.e(err);
    } finally {
      _iterator14.f();
    }
  }
  var result = [],
    prev = null;
  var compare = state.facet(completionConfig).compareCompletions;
  var _iterator15 = _createForOfIteratorHelper(options.sort(function (a, b) {
      return b.score - a.score || compare(a.completion, b.completion);
    })),
    _step15;
  try {
    for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
      var opt = _step15.value;
      if (!prev || prev.label != opt.completion.label || prev.detail != opt.completion.detail || prev.type != null && opt.completion.type != null && prev.type != opt.completion.type || prev.apply != opt.completion.apply) result.push(opt);else if (score(opt.completion) > score(prev)) result[result.length - 1] = opt;
      prev = opt.completion;
    }
  } catch (err) {
    _iterator15.e(err);
  } finally {
    _iterator15.f();
  }
  return result;
}
var CompletionDialog = /*#__PURE__*/function () {
  function CompletionDialog(options, attrs, tooltip, timestamp, selected, disabled) {
    _classCallCheck(this, CompletionDialog);
    this.options = options;
    this.attrs = attrs;
    this.tooltip = tooltip;
    this.timestamp = timestamp;
    this.selected = selected;
    this.disabled = disabled;
  }
  _createClass(CompletionDialog, [{
    key: "setSelected",
    value: function setSelected(selected, id) {
      return selected == this.selected || selected >= this.options.length ? this : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected, this.disabled);
    }
  }, {
    key: "map",
    value: function map(changes) {
      return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), {
        pos: changes.mapPos(this.tooltip.pos)
      }), this.timestamp, this.selected, this.disabled);
    }
  }], [{
    key: "build",
    value: function build(active, state, id, prev, conf) {
      var options = sortOptions(active, state);
      if (!options.length) {
        return prev && active.some(function (a) {
          return a.state == 1;
        } /* State.Pending */) ? new CompletionDialog(prev.options, prev.attrs, prev.tooltip, prev.timestamp, prev.selected, true) : null;
      }
      var selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;
      if (prev && prev.selected != selected && prev.selected != -1) {
        var selectedValue = prev.options[prev.selected].completion;
        for (var i = 0; i < options.length; i++) if (options[i].completion == selectedValue) {
          selected = i;
          break;
        }
      }
      return new CompletionDialog(options, makeAttrs(id, selected), {
        pos: active.reduce(function (a, b) {
          return b.hasResult() ? Math.min(a, b.from) : a;
        }, 1e8),
        create: completionTooltip(completionState),
        above: conf.aboveCursor
      }, prev ? prev.timestamp : Date.now(), selected, false);
    }
  }]);
  return CompletionDialog;
}();
var CompletionState = /*#__PURE__*/function () {
  function CompletionState(active, id, open) {
    _classCallCheck(this, CompletionState);
    this.active = active;
    this.id = id;
    this.open = open;
  }
  _createClass(CompletionState, [{
    key: "update",
    value: function update(tr) {
      var _this9 = this;
      var state = tr.state,
        conf = state.facet(completionConfig);
      var sources = conf.override || state.languageDataAt("autocomplete", cur(state)).map(asSource);
      var active = sources.map(function (source) {
        var value = _this9.active.find(function (s) {
          return s.source == source;
        }) || new ActiveSource(source, _this9.active.some(function (a) {
          return a.state != 0;
        } /* State.Inactive */) ? 1 /* State.Pending */ : 0 /* State.Inactive */);
        return value.update(tr, conf);
      });
      if (active.length == this.active.length && active.every(function (a, i) {
        return a == _this9.active[i];
      })) active = this.active;
      var open = this.open;
      if (open && tr.docChanged) open = open.map(tr.changes);
      if (tr.selection || active.some(function (a) {
        return a.hasResult() && tr.changes.touchesRange(a.from, a.to);
      }) || !sameResults(active, this.active)) open = CompletionDialog.build(active, state, this.id, open, conf);else if (open && open.disabled && !active.some(function (a) {
        return a.state == 1;
      } /* State.Pending */)) open = null;
      if (!open && active.every(function (a) {
        return a.state != 1;
      } /* State.Pending */) && active.some(function (a) {
        return a.hasResult();
      })) active = active.map(function (a) {
        return a.hasResult() ? new ActiveSource(a.source, 0 /* State.Inactive */) : a;
      });
      var _iterator19 = _createForOfIteratorHelper(tr.effects),
        _step19;
      try {
        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
          var effect = _step19.value;
          if (effect.is(setSelectedEffect)) open = open && open.setSelected(effect.value, this.id);
        }
      } catch (err) {
        _iterator19.e(err);
      } finally {
        _iterator19.f();
      }
      return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);
    }
  }, {
    key: "tooltip",
    get: function get() {
      return this.open ? this.open.tooltip : null;
    }
  }, {
    key: "attrs",
    get: function get() {
      return this.open ? this.open.attrs : baseAttrs;
    }
  }], [{
    key: "start",
    value: function start() {
      return new CompletionState(none, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
    }
  }]);
  return CompletionState;
}();
function sameResults(a, b) {
  if (a == b) return true;
  for (var iA = 0, iB = 0;;) {
    while (iA < a.length && !a[iA].hasResult) iA++;
    while (iB < b.length && !b[iB].hasResult) iB++;
    var endA = iA == a.length,
      endB = iB == b.length;
    if (endA || endB) return endA == endB;
    if (a[iA++].result != b[iB++].result) return false;
  }
}
var baseAttrs = {
  "aria-autocomplete": "list"
};
function makeAttrs(id, selected) {
  var result = {
    "aria-autocomplete": "list",
    "aria-haspopup": "listbox",
    "aria-controls": id
  };
  if (selected > -1) result["aria-activedescendant"] = id + "-" + selected;
  return result;
}
var none = [];
function getUserEvent(tr) {
  return tr.isUserEvent("input.type") ? "input" : tr.isUserEvent("delete.backward") ? "delete" : null;
}
var ActiveSource = /*#__PURE__*/function () {
  function ActiveSource(source, state) {
    var explicitPos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
    _classCallCheck(this, ActiveSource);
    this.source = source;
    this.state = state;
    this.explicitPos = explicitPos;
  }
  _createClass(ActiveSource, [{
    key: "hasResult",
    value: function hasResult() {
      return false;
    }
  }, {
    key: "update",
    value: function update(tr, conf) {
      var event = getUserEvent(tr),
        value = this;
      if (event) value = value.handleUserEvent(tr, event, conf);else if (tr.docChanged) value = value.handleChange(tr);else if (tr.selection && value.state != 0 /* State.Inactive */) value = new ActiveSource(value.source, 0 /* State.Inactive */);
      var _iterator20 = _createForOfIteratorHelper(tr.effects),
        _step20;
      try {
        for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
          var effect = _step20.value;
          if (effect.is(startCompletionEffect)) value = new ActiveSource(value.source, 1 /* State.Pending */, effect.value ? cur(tr.state) : -1);else if (effect.is(closeCompletionEffect)) value = new ActiveSource(value.source, 0 /* State.Inactive */);else if (effect.is(setActiveEffect)) {
            var _iterator21 = _createForOfIteratorHelper(effect.value),
              _step21;
            try {
              for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
                var active = _step21.value;
                if (active.source == value.source) value = active;
              }
            } catch (err) {
              _iterator21.e(err);
            } finally {
              _iterator21.f();
            }
          }
        }
      } catch (err) {
        _iterator20.e(err);
      } finally {
        _iterator20.f();
      }
      return value;
    }
  }, {
    key: "handleUserEvent",
    value: function handleUserEvent(tr, type, conf) {
      return type == "delete" || !conf.activateOnTyping ? this.map(tr.changes) : new ActiveSource(this.source, 1 /* State.Pending */);
    }
  }, {
    key: "handleChange",
    value: function handleChange(tr) {
      return tr.changes.touchesRange(cur(tr.startState)) ? new ActiveSource(this.source, 0 /* State.Inactive */) : this.map(tr.changes);
    }
  }, {
    key: "map",
    value: function map(changes) {
      return changes.empty || this.explicitPos < 0 ? this : new ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));
    }
  }]);
  return ActiveSource;
}();
var ActiveResult = /*#__PURE__*/function (_ActiveSource) {
  _inherits(ActiveResult, _ActiveSource);
  var _super = _createSuper(ActiveResult);
  function ActiveResult(source, explicitPos, result, from, to) {
    var _this10;
    _classCallCheck(this, ActiveResult);
    _this10 = _super.call(this, source, 2 /* State.Result */, explicitPos);
    _this10.result = result;
    _this10.from = from;
    _this10.to = to;
    return _this10;
  }
  _createClass(ActiveResult, [{
    key: "hasResult",
    value: function hasResult() {
      return true;
    }
  }, {
    key: "handleUserEvent",
    value: function handleUserEvent(tr, type, conf) {
      var _a;
      var from = tr.changes.mapPos(this.from),
        to = tr.changes.mapPos(this.to, 1);
      var pos = cur(tr.state);
      if ((this.explicitPos < 0 ? pos <= from : pos < this.from) || pos > to || type == "delete" && cur(tr.startState) == this.from) return new ActiveSource(this.source, type == "input" && conf.activateOnTyping ? 1 /* State.Pending */ : 0 /* State.Inactive */);
      var explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos),
        updated;
      if (checkValid(this.result.validFor, tr.state, from, to)) return new ActiveResult(this.source, explicitPos, this.result, from, to);
      if (this.result.update && (updated = this.result.update(this.result, from, to, new CompletionContext(tr.state, pos, explicitPos >= 0)))) return new ActiveResult(this.source, explicitPos, updated, updated.from, (_a = updated.to) !== null && _a !== void 0 ? _a : cur(tr.state));
      return new ActiveSource(this.source, 1 /* State.Pending */, explicitPos);
    }
  }, {
    key: "handleChange",
    value: function handleChange(tr) {
      return tr.changes.touchesRange(this.from, this.to) ? new ActiveSource(this.source, 0 /* State.Inactive */) : this.map(tr.changes);
    }
  }, {
    key: "map",
    value: function map(mapping) {
      return mapping.empty ? this : new ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));
    }
  }]);
  return ActiveResult;
}(ActiveSource);
function checkValid(validFor, state, from, to) {
  if (!validFor) return false;
  var text = state.sliceDoc(from, to);
  return typeof validFor == "function" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);
}
var setActiveEffect = /*@__PURE__*/StateEffect.define({
  map: function map(sources, mapping) {
    return sources.map(function (s) {
      return s.map(mapping);
    });
  }
});
var setSelectedEffect = /*@__PURE__*/StateEffect.define();
var completionState = /*@__PURE__*/StateField.define({
  create: function create() {
    return CompletionState.start();
  },
  update: function update(value, tr) {
    return value.update(tr);
  },
  provide: function provide(f) {
    return [showTooltip.from(f, function (val) {
      return val.tooltip;
    }), EditorView.contentAttributes.from(f, function (state) {
      return state.attrs;
    })];
  }
});
var baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({
  ".cm-tooltip.cm-tooltip-autocomplete": {
    "& > ul": {
      fontFamily: "monospace",
      whiteSpace: "nowrap",
      overflow: "hidden auto",
      maxWidth_fallback: "700px",
      maxWidth: "min(700px, 95vw)",
      minWidth: "250px",
      maxHeight: "10em",
      height: "100%",
      listStyle: "none",
      margin: 0,
      padding: 0,
      "& > li, & > completion-section": {
        padding: "1px 3px",
        lineHeight: 1.2
      },
      "& > li": {
        overflowX: "hidden",
        textOverflow: "ellipsis",
        cursor: "pointer"
      },
      "& > completion-section": {
        display: "list-item",
        borderBottom: "1px solid silver",
        paddingLeft: "0.5em",
        opacity: 0.7
      }
    }
  },
  "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#17c",
    color: "white"
  },
  "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#777"
  },
  "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#347",
    color: "white"
  },
  "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#444"
  },
  ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
    content: '"···"',
    opacity: 0.5,
    display: "block",
    textAlign: "center"
  },
  ".cm-tooltip.cm-completionInfo": {
    position: "absolute",
    padding: "3px 9px",
    width: "max-content",
    maxWidth: "".concat(400 /* Info.Width */, "px"),
    boxSizing: "border-box"
  },
  ".cm-completionInfo.cm-completionInfo-left": {
    right: "100%"
  },
  ".cm-completionInfo.cm-completionInfo-right": {
    left: "100%"
  },
  ".cm-completionInfo.cm-completionInfo-left-narrow": {
    right: "".concat(30 /* Info.Margin */, "px")
  },
  ".cm-completionInfo.cm-completionInfo-right-narrow": {
    left: "".concat(30 /* Info.Margin */, "px")
  },
  "&light .cm-snippetField": {
    backgroundColor: "#00000022"
  },
  "&dark .cm-snippetField": {
    backgroundColor: "#ffffff22"
  },
  ".cm-snippetFieldPosition": {
    verticalAlign: "text-top",
    width: 0,
    height: "1.15em",
    display: "inline-block",
    margin: "0 -0.7px -.7em",
    borderLeft: "1.4px dotted #888"
  },
  ".cm-completionMatchedText": {
    textDecoration: "underline"
  },
  ".cm-completionDetail": {
    marginLeft: "0.5em",
    fontStyle: "italic"
  },
  ".cm-completionIcon": {
    fontSize: "90%",
    width: ".8em",
    display: "inline-block",
    textAlign: "center",
    paddingRight: ".6em",
    opacity: "0.6",
    boxSizing: "content-box"
  },
  ".cm-completionIcon-function, .cm-completionIcon-method": {
    "&:after": {
      content: "'ƒ'"
    }
  },
  ".cm-completionIcon-class": {
    "&:after": {
      content: "'○'"
    }
  },
  ".cm-completionIcon-interface": {
    "&:after": {
      content: "'◌'"
    }
  },
  ".cm-completionIcon-variable": {
    "&:after": {
      content: "'𝑥'"
    }
  },
  ".cm-completionIcon-constant": {
    "&:after": {
      content: "'𝐶'"
    }
  },
  ".cm-completionIcon-type": {
    "&:after": {
      content: "'𝑡'"
    }
  },
  ".cm-completionIcon-enum": {
    "&:after": {
      content: "'∪'"
    }
  },
  ".cm-completionIcon-property": {
    "&:after": {
      content: "'□'"
    }
  },
  ".cm-completionIcon-keyword": {
    "&:after": {
      content: "'\uD83D\uDD11\uFE0E'"
    } // Disable emoji rendering
  },

  ".cm-completionIcon-namespace": {
    "&:after": {
      content: "'▢'"
    }
  },
  ".cm-completionIcon-text": {
    "&:after": {
      content: "'abc'",
      fontSize: "50%",
      verticalAlign: "middle"
    }
  }
});
var FieldPos = /*#__PURE__*/_createClass(function FieldPos(field, line, from, to) {
  _classCallCheck(this, FieldPos);
  this.field = field;
  this.line = line;
  this.from = from;
  this.to = to;
});
var FieldRange = /*#__PURE__*/function () {
  function FieldRange(field, from, to) {
    _classCallCheck(this, FieldRange);
    this.field = field;
    this.from = from;
    this.to = to;
  }
  _createClass(FieldRange, [{
    key: "map",
    value: function map(changes) {
      var from = changes.mapPos(this.from, -1, MapMode.TrackDel);
      var to = changes.mapPos(this.to, 1, MapMode.TrackDel);
      return from == null || to == null ? null : new FieldRange(this.field, from, to);
    }
  }]);
  return FieldRange;
}();
var Snippet = /*#__PURE__*/function () {
  function Snippet(lines, fieldPositions) {
    _classCallCheck(this, Snippet);
    this.lines = lines;
    this.fieldPositions = fieldPositions;
  }
  _createClass(Snippet, [{
    key: "instantiate",
    value: function instantiate(state, pos) {
      var text = [],
        lineStart = [pos];
      var lineObj = state.doc.lineAt(pos),
        baseIndent = /^\s*/.exec(lineObj.text)[0];
      var _iterator22 = _createForOfIteratorHelper(this.lines),
        _step22;
      try {
        for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
          var line = _step22.value;
          if (text.length) {
            var indent = baseIndent,
              tabs = /^\t*/.exec(line)[0].length;
            for (var i = 0; i < tabs; i++) indent += state.facet(indentUnit);
            lineStart.push(pos + indent.length - tabs);
            line = indent + line.slice(tabs);
          }
          text.push(line);
          pos += line.length + 1;
        }
      } catch (err) {
        _iterator22.e(err);
      } finally {
        _iterator22.f();
      }
      var ranges = this.fieldPositions.map(function (pos) {
        return new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to);
      });
      return {
        text: text,
        ranges: ranges
      };
    }
  }], [{
    key: "parse",
    value: function parse(template) {
      var fields = [];
      var lines = [],
        positions = [],
        m;
      var _iterator23 = _createForOfIteratorHelper(template.split(/\r\n?|\n/)),
        _step23;
      try {
        for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
          var line = _step23.value;
          while (m = /[#$]\{(?:(\d+)(?::([^}]*))?|([^}]*))\}/.exec(line)) {
            var seq = m[1] ? +m[1] : null,
              name = m[2] || m[3] || "",
              found = -1;
            for (var i = 0; i < fields.length; i++) {
              if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false) found = i;
            }
            if (found < 0) {
              var _i3 = 0;
              while (_i3 < fields.length && (seq == null || fields[_i3].seq != null && fields[_i3].seq < seq)) _i3++;
              fields.splice(_i3, 0, {
                seq: seq,
                name: name
              });
              found = _i3;
              var _iterator24 = _createForOfIteratorHelper(positions),
                _step24;
              try {
                for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
                  var pos = _step24.value;
                  if (pos.field >= found) pos.field++;
                }
              } catch (err) {
                _iterator24.e(err);
              } finally {
                _iterator24.f();
              }
            }
            positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));
            line = line.slice(0, m.index) + name + line.slice(m.index + m[0].length);
          }
          for (var esc; esc = /\\([{}])/.exec(line);) {
            line = line.slice(0, esc.index) + esc[1] + line.slice(esc.index + esc[0].length);
            var _iterator25 = _createForOfIteratorHelper(positions),
              _step25;
            try {
              for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
                var _pos = _step25.value;
                if (_pos.line == lines.length && _pos.from > esc.index) {
                  _pos.from--;
                  _pos.to--;
                }
              }
            } catch (err) {
              _iterator25.e(err);
            } finally {
              _iterator25.f();
            }
          }
          lines.push(line);
        }
      } catch (err) {
        _iterator23.e(err);
      } finally {
        _iterator23.f();
      }
      return new Snippet(lines, positions);
    }
  }]);
  return Snippet;
}();
var fieldMarker = /*@__PURE__*/Decoration.widget({
  widget: /*@__PURE__*/new ( /*#__PURE__*/function (_WidgetType) {
    _inherits(_class2, _WidgetType);
    var _super2 = _createSuper(_class2);
    function _class2() {
      _classCallCheck(this, _class2);
      return _super2.apply(this, arguments);
    }
    _createClass(_class2, [{
      key: "toDOM",
      value: function toDOM() {
        var span = document.createElement("span");
        span.className = "cm-snippetFieldPosition";
        return span;
      }
    }, {
      key: "ignoreEvent",
      value: function ignoreEvent() {
        return false;
      }
    }]);
    return _class2;
  }(WidgetType))()
});
var fieldRange = /*@__PURE__*/Decoration.mark({
  "class": "cm-snippetField"
});
var ActiveSnippet = /*#__PURE__*/function () {
  function ActiveSnippet(ranges, active) {
    _classCallCheck(this, ActiveSnippet);
    this.ranges = ranges;
    this.active = active;
    this.deco = Decoration.set(ranges.map(function (r) {
      return (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to);
    }));
  }
  _createClass(ActiveSnippet, [{
    key: "map",
    value: function map(changes) {
      var ranges = [];
      var _iterator26 = _createForOfIteratorHelper(this.ranges),
        _step26;
      try {
        for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
          var r = _step26.value;
          var mapped = r.map(changes);
          if (!mapped) return null;
          ranges.push(mapped);
        }
      } catch (err) {
        _iterator26.e(err);
      } finally {
        _iterator26.f();
      }
      return new ActiveSnippet(ranges, this.active);
    }
  }, {
    key: "selectionInsideField",
    value: function selectionInsideField(sel) {
      var _this11 = this;
      return sel.ranges.every(function (range) {
        return _this11.ranges.some(function (r) {
          return r.field == _this11.active && r.from <= range.from && r.to >= range.to;
        });
      });
    }
  }]);
  return ActiveSnippet;
}();
var setActive = /*@__PURE__*/StateEffect.define({
  map: function map(value, changes) {
    return value && value.map(changes);
  }
});
var moveToField = /*@__PURE__*/StateEffect.define();
var snippetState = /*@__PURE__*/StateField.define({
  create: function create() {
    return null;
  },
  update: function update(value, tr) {
    var _iterator27 = _createForOfIteratorHelper(tr.effects),
      _step27;
    try {
      for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
        var effect = _step27.value;
        if (effect.is(setActive)) return effect.value;
        if (effect.is(moveToField) && value) return new ActiveSnippet(value.ranges, effect.value);
      }
    } catch (err) {
      _iterator27.e(err);
    } finally {
      _iterator27.f();
    }
    if (value && tr.docChanged) value = value.map(tr.changes);
    if (value && tr.selection && !value.selectionInsideField(tr.selection)) value = null;
    return value;
  },
  provide: function provide(f) {
    return EditorView.decorations.from(f, function (val) {
      return val ? val.deco : Decoration.none;
    });
  }
});
function fieldSelection(ranges, field) {
  return EditorSelection.create(ranges.filter(function (r) {
    return r.field == field;
  }).map(function (r) {
    return EditorSelection.range(r.from, r.to);
  }));
}
/**
Convert a snippet template to a function that can
[apply](https://codemirror.net/6/docs/ref/#autocomplete.Completion.apply) it. Snippets are written
using syntax like this:

    "for (let ${index} = 0; ${index} < ${end}; ${index}++) {\n\t${}\n}"

Each `${}` placeholder (you may also use `#{}`) indicates a field
that the user can fill in. Its name, if any, will be the default
content for the field.

When the snippet is activated by calling the returned function,
the code is inserted at the given position. Newlines in the
template are indented by the indentation of the start line, plus
one [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after
the newline.

On activation, (all instances of) the first field are selected.
The user can move between fields with Tab and Shift-Tab as long as
the fields are active. Moving to the last field or moving the
cursor out of the current field deactivates the fields.

The order of fields defaults to textual order, but you can add
numbers to placeholders (`${1}` or `${1:defaultText}`) to provide
a custom order.

To include a literal `{` or `}` in your template, put a backslash
in front of it. This will be removed and the brace will not be
interpreted as indicating a placeholder.
*/
function snippet(template) {
  var snippet = Snippet.parse(template);
  return function (editor, completion, from, to) {
    var _snippet$instantiate = snippet.instantiate(editor.state, from),
      text = _snippet$instantiate.text,
      ranges = _snippet$instantiate.ranges;
    var spec = {
      changes: {
        from: from,
        to: to,
        insert: Text.of(text)
      },
      scrollIntoView: true,
      annotations: completion ? pickedCompletion.of(completion) : undefined
    };
    if (ranges.length) spec.selection = fieldSelection(ranges, 0);
    if (ranges.length > 1) {
      var active = new ActiveSnippet(ranges, 0);
      var effects = spec.effects = [setActive.of(active)];
      if (editor.state.field(snippetState, false) === undefined) effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme$1]));
    }
    editor.dispatch(editor.state.update(spec));
  };
}
function moveField(dir) {
  return function (_ref3) {
    var state = _ref3.state,
      dispatch = _ref3.dispatch;
    var active = state.field(snippetState, false);
    if (!active || dir < 0 && active.active == 0) return false;
    var next = active.active + dir,
      last = dir > 0 && !active.ranges.some(function (r) {
        return r.field == next + dir;
      });
    dispatch(state.update({
      selection: fieldSelection(active.ranges, next),
      effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next))
    }));
    return true;
  };
}
/**
A command that clears the active snippet, if any.
*/
var clearSnippet = function clearSnippet(_ref4) {
  var state = _ref4.state,
    dispatch = _ref4.dispatch;
  var active = state.field(snippetState, false);
  if (!active) return false;
  dispatch(state.update({
    effects: setActive.of(null)
  }));
  return true;
};
/**
Move to the next snippet field, if available.
*/
var nextSnippetField = /*@__PURE__*/moveField(1);
/**
Move to the previous snippet field, if available.
*/
var prevSnippetField = /*@__PURE__*/moveField(-1);
var defaultSnippetKeymap = [{
  key: "Tab",
  run: nextSnippetField,
  shift: prevSnippetField
}, {
  key: "Escape",
  run: clearSnippet
}];
/**
A facet that can be used to configure the key bindings used by
snippets. The default binds Tab to
[`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to
[`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape
to [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).
*/
var snippetKeymap = /*@__PURE__*/Facet.define({
  combine: function combine(maps) {
    return maps.length ? maps[0] : defaultSnippetKeymap;
  }
});
var addSnippetKeymap = /*@__PURE__*/Prec.highest( /*@__PURE__*/keymap.compute([snippetKeymap], function (state) {
  return state.facet(snippetKeymap);
}));
/**
Create a completion from a snippet. Returns an object with the
properties from `completion`, plus an `apply` function that
applies the snippet.
*/
function snippetCompletion(template, completion) {
  return Object.assign(Object.assign({}, completion), {
    apply: snippet(template)
  });
}
var snippetPointerHandler = /*@__PURE__*/EditorView.domEventHandlers({
  mousedown: function mousedown(event, view) {
    var active = view.state.field(snippetState, false),
      pos;
    if (!active || (pos = view.posAtCoords({
      x: event.clientX,
      y: event.clientY
    })) == null) return false;
    var match = active.ranges.find(function (r) {
      return r.from <= pos && r.to >= pos;
    });
    if (!match || match.field == active.active) return false;
    view.dispatch({
      selection: fieldSelection(active.ranges, match.field),
      effects: setActive.of(active.ranges.some(function (r) {
        return r.field > match.field;
      }) ? new ActiveSnippet(active.ranges, match.field) : null)
    });
    return true;
  }
});
var defaults = {
  brackets: ["(", "[", "{", "'", '"'],
  before: ")]}:;>",
  stringPrefixes: []
};
var closeBracketEffect = /*@__PURE__*/StateEffect.define({
  map: function map(value, mapping) {
    var mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
    return mapped == null ? undefined : mapped;
  }
});
var closedBracket = /*@__PURE__*/new ( /*#__PURE__*/function (_RangeValue) {
  _inherits(_class3, _RangeValue);
  var _super3 = _createSuper(_class3);
  function _class3() {
    _classCallCheck(this, _class3);
    return _super3.apply(this, arguments);
  }
  return _createClass(_class3);
}(RangeValue))();
closedBracket.startSide = 1;
closedBracket.endSide = -1;
var bracketState = /*@__PURE__*/StateField.define({
  create: function create() {
    return RangeSet.empty;
  },
  update: function update(value, tr) {
    if (tr.selection) {
      var lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;
      var prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;
      if (lineStart != tr.changes.mapPos(prevLineStart, -1)) value = RangeSet.empty;
    }
    value = value.map(tr.changes);
    var _iterator30 = _createForOfIteratorHelper(tr.effects),
      _step30;
    try {
      for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
        var effect = _step30.value;
        if (effect.is(closeBracketEffect)) value = value.update({
          add: [closedBracket.range(effect.value, effect.value + 1)]
        });
      }
    } catch (err) {
      _iterator30.e(err);
    } finally {
      _iterator30.f();
    }
    return value;
  }
});
/**
Extension to enable bracket-closing behavior. When a closeable
bracket is typed, its closing bracket is immediately inserted
after the cursor. When closing a bracket directly in front of a
closing bracket inserted by the extension, the cursor moves over
that bracket.
*/
function closeBrackets() {
  return [inputHandler, bracketState];
}
var definedClosing = "()[]{}<>";
function closing(ch) {
  for (var i = 0; i < definedClosing.length; i += 2) if (definedClosing.charCodeAt(i) == ch) return definedClosing.charAt(i + 1);
  return fromCodePoint(ch < 128 ? ch : ch + 1);
}
function config(state, pos) {
  return state.languageDataAt("closeBrackets", pos)[0] || defaults;
}
var android = (typeof navigator === "undefined" ? "undefined" : _typeof(navigator)) == "object" && /*@__PURE__*/ /Android\b/.test(navigator.userAgent);
var inputHandler = /*@__PURE__*/EditorView.inputHandler.of(function (view, from, to, insert) {
  if ((android ? view.composing : view.compositionStarted) || view.state.readOnly) return false;
  var sel = view.state.selection.main;
  if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 || from != sel.from || to != sel.to) return false;
  var tr = insertBracket(view.state, insert);
  if (!tr) return false;
  view.dispatch(tr);
  return true;
});
/**
Command that implements deleting a pair of matching brackets when
the cursor is between them.
*/
var deleteBracketPair = function deleteBracketPair(_ref5) {
  var state = _ref5.state,
    dispatch = _ref5.dispatch;
  if (state.readOnly) return false;
  var conf = config(state, state.selection.main.head);
  var tokens = conf.brackets || defaults.brackets;
  var dont = null,
    changes = state.changeByRange(function (range) {
      if (range.empty) {
        var before = prevChar(state.doc, range.head);
        var _iterator31 = _createForOfIteratorHelper(tokens),
          _step31;
        try {
          for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
            var token = _step31.value;
            if (token == before && nextChar(state.doc, range.head) == closing(codePointAt(token, 0))) return {
              changes: {
                from: range.head - token.length,
                to: range.head + token.length
              },
              range: EditorSelection.cursor(range.head - token.length)
            };
          }
        } catch (err) {
          _iterator31.e(err);
        } finally {
          _iterator31.f();
        }
      }
      return {
        range: dont = range
      };
    });
  if (!dont) dispatch(state.update(changes, {
    scrollIntoView: true,
    userEvent: "delete.backward"
  }));
  return !dont;
};
/**
Close-brackets related key bindings. Binds Backspace to
[`deleteBracketPair`](https://codemirror.net/6/docs/ref/#autocomplete.deleteBracketPair).
*/
var closeBracketsKeymap = [{
  key: "Backspace",
  run: deleteBracketPair
}];
/**
Implements the extension's behavior on text insertion. If the
given string counts as a bracket in the language around the
selection, and replacing the selection with it requires custom
behavior (inserting a closing version or skipping past a
previously-closed bracket), this function returns a transaction
representing that custom behavior. (You only need this if you want
to programmatically insert brackets—the
[`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will
take care of running this for user input.)
*/
function insertBracket(state, bracket) {
  var conf = config(state, state.selection.main.head);
  var tokens = conf.brackets || defaults.brackets;
  var _iterator32 = _createForOfIteratorHelper(tokens),
    _step32;
  try {
    for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
      var tok = _step32.value;
      var closed = closing(codePointAt(tok, 0));
      if (bracket == tok) return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1, conf) : handleOpen(state, tok, closed, conf.before || defaults.before);
      if (bracket == closed && closedBracketAt(state, state.selection.main.from)) return handleClose(state, tok, closed);
    }
  } catch (err) {
    _iterator32.e(err);
  } finally {
    _iterator32.f();
  }
  return null;
}
function closedBracketAt(state, pos) {
  var found = false;
  state.field(bracketState).between(0, state.doc.length, function (from) {
    if (from == pos) found = true;
  });
  return found;
}
function nextChar(doc, pos) {
  var next = doc.sliceString(pos, pos + 2);
  return next.slice(0, codePointSize(codePointAt(next, 0)));
}
function prevChar(doc, pos) {
  var prev = doc.sliceString(pos - 2, pos);
  return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);
}
function handleOpen(state, open, close, closeBefore) {
  var dont = null,
    changes = state.changeByRange(function (range) {
      if (!range.empty) return {
        changes: [{
          insert: open,
          from: range.from
        }, {
          insert: close,
          from: range.to
        }],
        effects: closeBracketEffect.of(range.to + open.length),
        range: EditorSelection.range(range.anchor + open.length, range.head + open.length)
      };
      var next = nextChar(state.doc, range.head);
      if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1) return {
        changes: {
          insert: open + close,
          from: range.head
        },
        effects: closeBracketEffect.of(range.head + open.length),
        range: EditorSelection.cursor(range.head + open.length)
      };
      return {
        range: dont = range
      };
    });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    userEvent: "input.type"
  });
}
function handleClose(state, _open, close) {
  var dont = null,
    changes = state.changeByRange(function (range) {
      if (range.empty && nextChar(state.doc, range.head) == close) return {
        changes: {
          from: range.head,
          to: range.head + close.length,
          insert: close
        },
        range: EditorSelection.cursor(range.head + close.length)
      };
      return dont = {
        range: range
      };
    });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    userEvent: "input.type"
  });
}
// Handles cases where the open and close token are the same, and
// possibly triple quotes (as in `"""abc"""`-style quoting).
function handleSame(state, token, allowTriple, config) {
  var stringPrefixes = config.stringPrefixes || defaults.stringPrefixes;
  var dont = null,
    changes = state.changeByRange(function (range) {
      if (!range.empty) return {
        changes: [{
          insert: token,
          from: range.from
        }, {
          insert: token,
          from: range.to
        }],
        effects: closeBracketEffect.of(range.to + token.length),
        range: EditorSelection.range(range.anchor + token.length, range.head + token.length)
      };
      var pos = range.head,
        next = nextChar(state.doc, pos),
        start;
      if (next == token) {
        if (nodeStart(state, pos)) {
          return {
            changes: {
              insert: token + token,
              from: pos
            },
            effects: closeBracketEffect.of(pos + token.length),
            range: EditorSelection.cursor(pos + token.length)
          };
        } else if (closedBracketAt(state, pos)) {
          var isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
          var content = isTriple ? token + token + token : token;
          return {
            changes: {
              from: pos,
              to: pos + content.length,
              insert: content
            },
            range: EditorSelection.cursor(pos + content.length)
          };
        }
      } else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token && (start = canStartStringAt(state, pos - 2 * token.length, stringPrefixes)) > -1 && nodeStart(state, start)) {
        return {
          changes: {
            insert: token + token + token + token,
            from: pos
          },
          effects: closeBracketEffect.of(pos + token.length),
          range: EditorSelection.cursor(pos + token.length)
        };
      } else if (state.charCategorizer(pos)(next) != CharCategory.Word) {
        if (canStartStringAt(state, pos, stringPrefixes) > -1 && !probablyInString(state, pos, token, stringPrefixes)) return {
          changes: {
            insert: token + token,
            from: pos
          },
          effects: closeBracketEffect.of(pos + token.length),
          range: EditorSelection.cursor(pos + token.length)
        };
      }
      return {
        range: dont = range
      };
    });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    userEvent: "input.type"
  });
}
function nodeStart(state, pos) {
  var tree = syntaxTree(state).resolveInner(pos + 1);
  return tree.parent && tree.from == pos;
}
function probablyInString(state, pos, quoteToken, prefixes) {
  var node = syntaxTree(state).resolveInner(pos, -1);
  var maxPrefix = prefixes.reduce(function (m, p) {
    return Math.max(m, p.length);
  }, 0);
  for (var i = 0; i < 5; i++) {
    var start = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));
    var quotePos = start.indexOf(quoteToken);
    if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {
      var first = node.firstChild;
      while (first && first.from == node.from && first.to - first.from > quoteToken.length + quotePos) {
        if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken) return false;
        first = first.firstChild;
      }
      return true;
    }
    var parent = node.to == pos && node.parent;
    if (!parent) break;
    node = parent;
  }
  return false;
}
function canStartStringAt(state, pos, prefixes) {
  var charCat = state.charCategorizer(pos);
  if (charCat(state.sliceDoc(pos - 1, pos)) != CharCategory.Word) return pos;
  var _iterator33 = _createForOfIteratorHelper(prefixes),
    _step33;
  try {
    for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {
      var prefix = _step33.value;
      var start = pos - prefix.length;
      if (state.sliceDoc(start, pos) == prefix && charCat(state.sliceDoc(start - 1, start)) != CharCategory.Word) return start;
    }
  } catch (err) {
    _iterator33.e(err);
  } finally {
    _iterator33.f();
  }
  return -1;
}

/**
Returns an extension that enables autocompletion.
*/
function autocompletion() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return [completionState, completionConfig.of(config), completionPlugin, completionKeymapExt, baseTheme$1];
}
/**
Basic keybindings for autocompletion.

 - Ctrl-Space: [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)
 - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)
 - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`
 - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`
 - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
 - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
 - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)
*/
var completionKeymap = [{
  key: "Ctrl-Space",
  run: startCompletion
}, {
  key: "Escape",
  run: closeCompletion
}, {
  key: "ArrowDown",
  run: /*@__PURE__*/moveCompletionSelection(true)
}, {
  key: "ArrowUp",
  run: /*@__PURE__*/moveCompletionSelection(false)
}, {
  key: "PageDown",
  run: /*@__PURE__*/moveCompletionSelection(true, "page")
}, {
  key: "PageUp",
  run: /*@__PURE__*/moveCompletionSelection(false, "page")
}, {
  key: "Enter",
  run: acceptCompletion
}];
var completionKeymapExt = /*@__PURE__*/Prec.highest( /*@__PURE__*/keymap.computeN([completionConfig], function (state) {
  return state.facet(completionConfig).defaultKeymap ? [completionKeymap] : [];
}));

var SelectedDiagnostic = /*#__PURE__*/_createClass(function SelectedDiagnostic(from, to, diagnostic) {
  _classCallCheck(this, SelectedDiagnostic);
  this.from = from;
  this.to = to;
  this.diagnostic = diagnostic;
});
var LintState = /*#__PURE__*/function () {
  function LintState(diagnostics, panel, selected) {
    _classCallCheck(this, LintState);
    this.diagnostics = diagnostics;
    this.panel = panel;
    this.selected = selected;
  }
  _createClass(LintState, null, [{
    key: "init",
    value: function init(diagnostics, panel, state) {
      // Filter the list of diagnostics for which to create markers
      var markedDiagnostics = diagnostics;
      var diagnosticFilter = state.facet(lintConfig).markerFilter;
      if (diagnosticFilter) markedDiagnostics = diagnosticFilter(markedDiagnostics);
      var ranges = Decoration.set(markedDiagnostics.map(function (d) {
        // For zero-length ranges or ranges covering only a line break, create a widget
        return d.from == d.to || d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from ? Decoration.widget({
          widget: new DiagnosticWidget(d),
          diagnostic: d
        }).range(d.from) : Decoration.mark({
          attributes: {
            "class": "cm-lintRange cm-lintRange-" + d.severity
          },
          diagnostic: d
        }).range(d.from, d.to);
      }), true);
      return new LintState(ranges, panel, findDiagnostic(ranges));
    }
  }]);
  return LintState;
}();
function findDiagnostic(diagnostics) {
  var diagnostic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var found = null;
  diagnostics.between(after, 1e9, function (from, to, _ref) {
    var spec = _ref.spec;
    if (diagnostic && spec.diagnostic != diagnostic) return;
    found = new SelectedDiagnostic(from, to, spec.diagnostic);
    return false;
  });
  return found;
}
function hideTooltip(tr, tooltip) {
  var line = tr.startState.doc.lineAt(tooltip.pos);
  return !!(tr.effects.some(function (e) {
    return e.is(setDiagnosticsEffect);
  }) || tr.changes.touchesRange(line.from, line.to));
}
function maybeEnableLint(state, effects) {
  return state.field(lintState, false) ? effects : effects.concat(StateEffect.appendConfig.of(lintExtensions));
}
/**
The state effect that updates the set of active diagnostics. Can
be useful when writing an extension that needs to track these.
*/
var setDiagnosticsEffect = /*@__PURE__*/StateEffect.define();
var togglePanel = /*@__PURE__*/StateEffect.define();
var movePanelSelection = /*@__PURE__*/StateEffect.define();
var lintState = /*@__PURE__*/StateField.define({
  create: function create() {
    return new LintState(Decoration.none, null, null);
  },
  update: function update(value, tr) {
    if (tr.docChanged) {
      var mapped = value.diagnostics.map(tr.changes),
        selected = null;
      if (value.selected) {
        var selPos = tr.changes.mapPos(value.selected.from, 1);
        selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
      }
      value = new LintState(mapped, value.panel, selected);
    }
    var _iterator = _createForOfIteratorHelper(tr.effects),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var effect = _step.value;
        if (effect.is(setDiagnosticsEffect)) {
          value = LintState.init(effect.value, value.panel, tr.state);
        } else if (effect.is(togglePanel)) {
          value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
        } else if (effect.is(movePanelSelection)) {
          value = new LintState(value.diagnostics, value.panel, effect.value);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return value;
  },
  provide: function provide(f) {
    return [showPanel.from(f, function (val) {
      return val.panel;
    }), EditorView.decorations.from(f, function (s) {
      return s.diagnostics;
    })];
  }
});
var activeMark = /*@__PURE__*/Decoration.mark({
  "class": "cm-lintRange cm-lintRange-active"
});
function lintTooltip(view, pos, side) {
  var _view$state$field = view.state.field(lintState),
    diagnostics = _view$state$field.diagnostics;
  var found = [],
    stackStart = 2e8,
    stackEnd = 0;
  diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), function (from, to, _ref2) {
    var spec = _ref2.spec;
    if (pos >= from && pos <= to && (from == to || (pos > from || side > 0) && (pos < to || side < 0))) {
      found.push(spec.diagnostic);
      stackStart = Math.min(from, stackStart);
      stackEnd = Math.max(to, stackEnd);
    }
  });
  var diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;
  if (diagnosticFilter) found = diagnosticFilter(found);
  if (!found.length) return null;
  return {
    pos: stackStart,
    end: stackEnd,
    above: view.state.doc.lineAt(stackStart).to < stackEnd,
    create: function create() {
      return {
        dom: diagnosticsTooltip(view, found)
      };
    }
  };
}
function diagnosticsTooltip(view, diagnostics) {
  return crelt("ul", {
    "class": "cm-tooltip-lint"
  }, diagnostics.map(function (d) {
    return renderDiagnostic(view, d, false);
  }));
}
/**
Command to open and focus the lint panel.
*/
var openLintPanel = function openLintPanel(view) {
  var field = view.state.field(lintState, false);
  if (!field || !field.panel) view.dispatch({
    effects: maybeEnableLint(view.state, [togglePanel.of(true)])
  });
  var panel = getPanel(view, LintPanel.open);
  if (panel) panel.dom.querySelector(".cm-panel-lint ul").focus();
  return true;
};
/**
Command to close the lint panel, when open.
*/
var closeLintPanel = function closeLintPanel(view) {
  var field = view.state.field(lintState, false);
  if (!field || !field.panel) return false;
  view.dispatch({
    effects: togglePanel.of(false)
  });
  return true;
};
/**
Move the selection to the next diagnostic.
*/
var nextDiagnostic = function nextDiagnostic(view) {
  var field = view.state.field(lintState, false);
  if (!field) return false;
  var sel = view.state.selection.main,
    next = field.diagnostics.iter(sel.to + 1);
  if (!next.value) {
    next = field.diagnostics.iter(0);
    if (!next.value || next.from == sel.from && next.to == sel.to) return false;
  }
  view.dispatch({
    selection: {
      anchor: next.from,
      head: next.to
    },
    scrollIntoView: true
  });
  return true;
};
/**
A set of default key bindings for the lint functionality.

- Ctrl-Shift-m (Cmd-Shift-m on macOS): [`openLintPanel`](https://codemirror.net/6/docs/ref/#lint.openLintPanel)
- F8: [`nextDiagnostic`](https://codemirror.net/6/docs/ref/#lint.nextDiagnostic)
*/
var lintKeymap = [{
  key: "Mod-Shift-m",
  run: openLintPanel,
  preventDefault: true
}, {
  key: "F8",
  run: nextDiagnostic
}];
var lintConfig = /*@__PURE__*/Facet.define({
  combine: function combine(input) {
    return Object.assign({
      sources: input.map(function (i) {
        return i.source;
      })
    }, combineConfig(input.map(function (i) {
      return i.config;
    }), {
      delay: 750,
      markerFilter: null,
      tooltipFilter: null,
      needsRefresh: null
    }, {
      needsRefresh: function needsRefresh(a, b) {
        return !a ? b : !b ? a : function (u) {
          return a(u) || b(u);
        };
      }
    }));
  }
});
function assignKeys(actions) {
  var assigned = [];
  if (actions) {
    var _iterator2 = _createForOfIteratorHelper(actions),
      _step2;
    try {
      actions: for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var name = _step2.value.name;
        var _loop = function _loop() {
          var ch = name[i];
          if (/[a-zA-Z]/.test(ch) && !assigned.some(function (c) {
            return c.toLowerCase() == ch.toLowerCase();
          })) {
            assigned.push(ch);
            return "continue|actions";
          }
        };
        for (var i = 0; i < name.length; i++) {
          var _ret = _loop();
          if (_ret === "continue|actions") continue actions;
        }
        assigned.push("");
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }
  return assigned;
}
function renderDiagnostic(view, diagnostic, inPanel) {
  var _a;
  var keys = inPanel ? assignKeys(diagnostic.actions) : [];
  return crelt("li", {
    "class": "cm-diagnostic cm-diagnostic-" + diagnostic.severity
  }, crelt("span", {
    "class": "cm-diagnosticText"
  }, diagnostic.renderMessage ? diagnostic.renderMessage() : diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map(function (action, i) {
    var fired = false,
      click = function click(e) {
        e.preventDefault();
        if (fired) return;
        fired = true;
        var found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
        if (found) action.apply(view, found.from, found.to);
      };
    var name = action.name,
      keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;
    var nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex), crelt("u", name.slice(keyIndex, keyIndex + 1)), name.slice(keyIndex + 1)];
    return crelt("button", {
      type: "button",
      "class": "cm-diagnosticAction",
      onclick: click,
      onmousedown: click,
      "aria-label": " Action: ".concat(name).concat(keyIndex < 0 ? "" : " (access key \"".concat(keys[i], ")\""), ".")
    }, nameElt);
  }), diagnostic.source && crelt("div", {
    "class": "cm-diagnosticSource"
  }, diagnostic.source));
}
var DiagnosticWidget = /*#__PURE__*/function (_WidgetType) {
  _inherits(DiagnosticWidget, _WidgetType);
  var _super = _createSuper(DiagnosticWidget);
  function DiagnosticWidget(diagnostic) {
    var _this2;
    _classCallCheck(this, DiagnosticWidget);
    _this2 = _super.call(this);
    _this2.diagnostic = diagnostic;
    return _this2;
  }
  _createClass(DiagnosticWidget, [{
    key: "eq",
    value: function eq(other) {
      return other.diagnostic == this.diagnostic;
    }
  }, {
    key: "toDOM",
    value: function toDOM() {
      return crelt("span", {
        "class": "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity
      });
    }
  }]);
  return DiagnosticWidget;
}(WidgetType);
var PanelItem = /*#__PURE__*/_createClass(function PanelItem(view, diagnostic) {
  _classCallCheck(this, PanelItem);
  this.diagnostic = diagnostic;
  this.id = "item_" + Math.floor(Math.random() * 0xffffffff).toString(16);
  this.dom = renderDiagnostic(view, diagnostic, true);
  this.dom.id = this.id;
  this.dom.setAttribute("role", "option");
});
var LintPanel = /*#__PURE__*/function () {
  function LintPanel(view) {
    var _this3 = this;
    _classCallCheck(this, LintPanel);
    this.view = view;
    this.items = [];
    var onkeydown = function onkeydown(event) {
      if (event.keyCode == 27) {
        // Escape
        closeLintPanel(_this3.view);
        _this3.view.focus();
      } else if (event.keyCode == 38 || event.keyCode == 33) {
        // ArrowUp, PageUp
        _this3.moveSelection((_this3.selectedIndex - 1 + _this3.items.length) % _this3.items.length);
      } else if (event.keyCode == 40 || event.keyCode == 34) {
        // ArrowDown, PageDown
        _this3.moveSelection((_this3.selectedIndex + 1) % _this3.items.length);
      } else if (event.keyCode == 36) {
        // Home
        _this3.moveSelection(0);
      } else if (event.keyCode == 35) {
        // End
        _this3.moveSelection(_this3.items.length - 1);
      } else if (event.keyCode == 13) {
        // Enter
        _this3.view.focus();
      } else if (event.keyCode >= 65 && event.keyCode <= 90 && _this3.selectedIndex >= 0) {
        // A-Z
        var diagnostic = _this3.items[_this3.selectedIndex].diagnostic,
          keys = assignKeys(diagnostic.actions);
        for (var i = 0; i < keys.length; i++) if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {
          var found = findDiagnostic(_this3.view.state.field(lintState).diagnostics, diagnostic);
          if (found) diagnostic.actions[i].apply(view, found.from, found.to);
        }
      } else {
        return;
      }
      event.preventDefault();
    };
    var onclick = function onclick(event) {
      for (var i = 0; i < _this3.items.length; i++) {
        if (_this3.items[i].dom.contains(event.target)) _this3.moveSelection(i);
      }
    };
    this.list = crelt("ul", {
      tabIndex: 0,
      role: "listbox",
      "aria-label": this.view.state.phrase("Diagnostics"),
      onkeydown: onkeydown,
      onclick: onclick
    });
    this.dom = crelt("div", {
      "class": "cm-panel-lint"
    }, this.list, crelt("button", {
      type: "button",
      name: "close",
      "aria-label": this.view.state.phrase("close"),
      onclick: function onclick() {
        return closeLintPanel(_this3.view);
      }
    }, "×"));
    this.update();
  }
  _createClass(LintPanel, [{
    key: "selectedIndex",
    get: function get() {
      var selected = this.view.state.field(lintState).selected;
      if (!selected) return -1;
      for (var i = 0; i < this.items.length; i++) if (this.items[i].diagnostic == selected.diagnostic) return i;
      return -1;
    }
  }, {
    key: "update",
    value: function update() {
      var _this4 = this;
      var _this$view$state$fiel = this.view.state.field(lintState),
        diagnostics = _this$view$state$fiel.diagnostics,
        selected = _this$view$state$fiel.selected;
      var i = 0,
        needsSync = false,
        newSelectedItem = null;
      diagnostics.between(0, this.view.state.doc.length, function (_start, _end, _ref3) {
        var spec = _ref3.spec;
        var found = -1,
          item;
        for (var j = i; j < _this4.items.length; j++) if (_this4.items[j].diagnostic == spec.diagnostic) {
          found = j;
          break;
        }
        if (found < 0) {
          item = new PanelItem(_this4.view, spec.diagnostic);
          _this4.items.splice(i, 0, item);
          needsSync = true;
        } else {
          item = _this4.items[found];
          if (found > i) {
            _this4.items.splice(i, found - i);
            needsSync = true;
          }
        }
        if (selected && item.diagnostic == selected.diagnostic) {
          if (!item.dom.hasAttribute("aria-selected")) {
            item.dom.setAttribute("aria-selected", "true");
            newSelectedItem = item;
          }
        } else if (item.dom.hasAttribute("aria-selected")) {
          item.dom.removeAttribute("aria-selected");
        }
        i++;
      });
      while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
        needsSync = true;
        this.items.pop();
      }
      if (this.items.length == 0) {
        this.items.push(new PanelItem(this.view, {
          from: -1,
          to: -1,
          severity: "info",
          message: this.view.state.phrase("No diagnostics")
        }));
        needsSync = true;
      }
      if (newSelectedItem) {
        this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
        this.view.requestMeasure({
          key: this,
          read: function read() {
            return {
              sel: newSelectedItem.dom.getBoundingClientRect(),
              panel: _this4.list.getBoundingClientRect()
            };
          },
          write: function write(_ref4) {
            var sel = _ref4.sel,
              panel = _ref4.panel;
            if (sel.top < panel.top) _this4.list.scrollTop -= panel.top - sel.top;else if (sel.bottom > panel.bottom) _this4.list.scrollTop += sel.bottom - panel.bottom;
          }
        });
      } else if (this.selectedIndex < 0) {
        this.list.removeAttribute("aria-activedescendant");
      }
      if (needsSync) this.sync();
    }
  }, {
    key: "sync",
    value: function sync() {
      var domPos = this.list.firstChild;
      function rm() {
        var prev = domPos;
        domPos = prev.nextSibling;
        prev.remove();
      }
      var _iterator3 = _createForOfIteratorHelper(this.items),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var item = _step3.value;
          if (item.dom.parentNode == this.list) {
            while (domPos != item.dom) rm();
            domPos = item.dom.nextSibling;
          } else {
            this.list.insertBefore(item.dom, domPos);
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      while (domPos) rm();
    }
  }, {
    key: "moveSelection",
    value: function moveSelection(selectedIndex) {
      if (this.selectedIndex < 0) return;
      var field = this.view.state.field(lintState);
      var selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
      if (!selection) return;
      this.view.dispatch({
        selection: {
          anchor: selection.from,
          head: selection.to
        },
        scrollIntoView: true,
        effects: movePanelSelection.of(selection)
      });
    }
  }], [{
    key: "open",
    value: function open(view) {
      return new LintPanel(view);
    }
  }]);
  return LintPanel;
}();
function svg(content) {
  var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "viewBox=\"0 0 40 40\"";
  return "url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" ".concat(attrs, ">").concat(encodeURIComponent(content), "</svg>')");
}
function underline(color) {
  return svg("<path d=\"m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0\" stroke=\"".concat(color, "\" fill=\"none\" stroke-width=\".7\"/>"), "width=\"6\" height=\"3\"");
}
var baseTheme = /*@__PURE__*/EditorView.baseTheme({
  ".cm-diagnostic": {
    padding: "3px 6px 3px 8px",
    marginLeft: "-1px",
    display: "block",
    whiteSpace: "pre-wrap"
  },
  ".cm-diagnostic-error": {
    borderLeft: "5px solid #d11"
  },
  ".cm-diagnostic-warning": {
    borderLeft: "5px solid orange"
  },
  ".cm-diagnostic-info": {
    borderLeft: "5px solid #999"
  },
  ".cm-diagnosticAction": {
    font: "inherit",
    border: "none",
    padding: "2px 4px",
    backgroundColor: "#444",
    color: "white",
    borderRadius: "3px",
    marginLeft: "8px",
    cursor: "pointer"
  },
  ".cm-diagnosticSource": {
    fontSize: "70%",
    opacity: .7
  },
  ".cm-lintRange": {
    backgroundPosition: "left bottom",
    backgroundRepeat: "repeat-x",
    paddingBottom: "0.7px"
  },
  ".cm-lintRange-error": {
    backgroundImage: /*@__PURE__*/underline("#d11")
  },
  ".cm-lintRange-warning": {
    backgroundImage: /*@__PURE__*/underline("orange")
  },
  ".cm-lintRange-info": {
    backgroundImage: /*@__PURE__*/underline("#999")
  },
  ".cm-lintRange-active": {
    backgroundColor: "#ffdd9980"
  },
  ".cm-tooltip-lint": {
    padding: 0,
    margin: 0
  },
  ".cm-lintPoint": {
    position: "relative",
    "&:after": {
      content: '""',
      position: "absolute",
      bottom: 0,
      left: "-2px",
      borderLeft: "3px solid transparent",
      borderRight: "3px solid transparent",
      borderBottom: "4px solid #d11"
    }
  },
  ".cm-lintPoint-warning": {
    "&:after": {
      borderBottomColor: "orange"
    }
  },
  ".cm-lintPoint-info": {
    "&:after": {
      borderBottomColor: "#999"
    }
  },
  ".cm-panel.cm-panel-lint": {
    position: "relative",
    "& ul": {
      maxHeight: "100px",
      overflowY: "auto",
      "& [aria-selected]": {
        backgroundColor: "#ddd",
        "& u": {
          textDecoration: "underline"
        }
      },
      "&:focus [aria-selected]": {
        background_fallback: "#bdf",
        backgroundColor: "Highlight",
        color_fallback: "white",
        color: "HighlightText"
      },
      "& u": {
        textDecoration: "none"
      },
      padding: 0,
      margin: 0
    },
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "2px",
      background: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    }
  }
});
var lintExtensions = [lintState, /*@__PURE__*/EditorView.decorations.compute([lintState], function (state) {
  var _state$field = state.field(lintState),
    selected = _state$field.selected,
    panel = _state$field.panel;
  return !selected || !panel || selected.from == selected.to ? Decoration.none : Decoration.set([activeMark.range(selected.from, selected.to)]);
}), /*@__PURE__*/hoverTooltip(lintTooltip, {
  hideOn: hideTooltip
}), baseTheme];

// (The superfluous function calls around the list of extensions work
// around current limitations in tree-shaking software.)
/**
This is an extension value that just pulls together a number of
extensions that you might want in a basic editor. It is meant as a
convenient helper to quickly set up CodeMirror without installing
and importing a lot of separate packages.

Specifically, it includes...

 - [the default command bindings](https://codemirror.net/6/docs/ref/#commands.defaultKeymap)
 - [line numbers](https://codemirror.net/6/docs/ref/#view.lineNumbers)
 - [special character highlighting](https://codemirror.net/6/docs/ref/#view.highlightSpecialChars)
 - [the undo history](https://codemirror.net/6/docs/ref/#commands.history)
 - [a fold gutter](https://codemirror.net/6/docs/ref/#language.foldGutter)
 - [custom selection drawing](https://codemirror.net/6/docs/ref/#view.drawSelection)
 - [drop cursor](https://codemirror.net/6/docs/ref/#view.dropCursor)
 - [multiple selections](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
 - [reindentation on input](https://codemirror.net/6/docs/ref/#language.indentOnInput)
 - [the default highlight style](https://codemirror.net/6/docs/ref/#language.defaultHighlightStyle) (as fallback)
 - [bracket matching](https://codemirror.net/6/docs/ref/#language.bracketMatching)
 - [bracket closing](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets)
 - [autocompletion](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion)
 - [rectangular selection](https://codemirror.net/6/docs/ref/#view.rectangularSelection) and [crosshair cursor](https://codemirror.net/6/docs/ref/#view.crosshairCursor)
 - [active line highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLine)
 - [active line gutter highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLineGutter)
 - [selection match highlighting](https://codemirror.net/6/docs/ref/#search.highlightSelectionMatches)
 - [search](https://codemirror.net/6/docs/ref/#search.searchKeymap)
 - [linting](https://codemirror.net/6/docs/ref/#lint.lintKeymap)

(You'll probably want to add some language package to your setup
too.)

This extension does not allow customization. The idea is that,
once you decide you want to configure your editor more precisely,
you take this package's source (which is just a bunch of imports
and an array literal), copy it into your own code, and adjust it
as desired.
*/
var basicSetup = /*@__PURE__*/function () {
  return [lineNumbers(), highlightActiveLineGutter(), highlightSpecialChars(), history(), foldGutter(), drawSelection(), dropCursor(), EditorState.allowMultipleSelections.of(true), indentOnInput(), syntaxHighlighting(defaultHighlightStyle, {
    fallback: true
  }), bracketMatching(), closeBrackets(), autocompletion(), rectangularSelection(), crosshairCursor(), highlightActiveLine(), highlightSelectionMatches(), keymap.of([].concat(_toConsumableArray(closeBracketsKeymap), _toConsumableArray(defaultKeymap), _toConsumableArray(searchKeymap), _toConsumableArray(historyKeymap), _toConsumableArray(foldKeymap), _toConsumableArray(completionKeymap), _toConsumableArray(lintKeymap)))];
}();

export { DefaultBufferLength as D, EditorView as E, IterMode as I, LanguageSupport as L, NodeProp as N, Parser as P, Tree as T, NodeSet as a, NodeType as b, completeFromList as c, syntaxTree as d, EditorSelection as e, LRLanguage as f, indentNodeProp as g, continuedIndent as h, ifNotIn as i, flatIndent as j, delimitedIndent as k, foldNodeProp as l, foldInside as m, sublanguageProp as n, snippetCompletion as o, defineLanguageFacet as p, NodeWeakMap as q, basicSetup as r, styleTags as s, tags as t };
//# sourceMappingURL=codemirror-b829ae8b.es.js.map
